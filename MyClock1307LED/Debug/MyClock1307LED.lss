
MyClock1307LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013fc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000013fc  000014b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  0080007c  0080007c  000014cc  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000060  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000210  00000000  00000000  00001578  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002376  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c47  00000000  00000000  00003afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014ef  00000000  00000000  00004745  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003c4  00000000  00000000  00005c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008d7  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000dc0  00000000  00000000  000068cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000768f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	b7 c1       	rjmp	.+878    	; 0x376 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	7c c1       	rjmp	.+760    	; 0x306 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	db c1       	rjmp	.+950    	; 0x3ca <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ec ef       	ldi	r30, 0xFC	; 252
      3a:	f3 e1       	ldi	r31, 0x13	; 19
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 37       	cpi	r26, 0x7C	; 124
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ac e7       	ldi	r26, 0x7C	; 124
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3e       	cpi	r26, 0xE8	; 232
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	c2 d3       	rcall	.+1924   	; 0x7de <main>
      5a:	ce c9       	rjmp	.-3172   	; 0xfffff3f8 <__eeprom_end+0xff7ef3ec>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
      5e:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__data_end>
      62:	28 30       	cpi	r18, 0x08	; 8
      64:	78 f4       	brcc	.+30     	; 0x84 <PutBut+0x26>
     buf[head] = but;
      66:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <head>
      6a:	e9 2f       	mov	r30, r25
      6c:	f0 e0       	ldi	r31, 0x00	; 0
      6e:	e1 58       	subi	r30, 0x81	; 129
      70:	ff 4f       	sbci	r31, 0xFF	; 255
      72:	80 83       	st	Z, r24
     count++;
      74:	2f 5f       	subi	r18, 0xFF	; 255
      76:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__data_end>
     head++;
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	89 0f       	add	r24, r25
     head &= (BUT_SIZE_BUF - 1);    
      7e:	87 70       	andi	r24, 0x07	; 7
      80:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <head>
      84:	08 95       	ret

00000086 <BUT_Check.constprop.0>:
  return but;
}

/************************************************/

static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
      86:	ef 92       	push	r14
      88:	ff 92       	push	r15
      8a:	0f 93       	push	r16
      8c:	1f 93       	push	r17
      8e:	cf 93       	push	r28
      90:	df 93       	push	r29
      92:	00 d0       	rcall	.+0      	; 0x94 <BUT_Check.constprop.0+0xe>
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
      98:	2f ef       	ldi	r18, 0xFF	; 255
      9a:	26 0f       	add	r18, r22
   
  stateTmp = stateBut[i];
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	a9 01       	movw	r20, r18
      a0:	49 57       	subi	r20, 0x79	; 121
      a2:	5f 4f       	sbci	r21, 0xFF	; 255
      a4:	7a 01       	movw	r14, r20
      a6:	fa 01       	movw	r30, r20
      a8:	40 81       	ld	r20, Z
  event = 0;

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
      aa:	f9 01       	movw	r30, r18
      ac:	e4 57       	subi	r30, 0x74	; 116
      ae:	ff 4f       	sbci	r31, 0xFF	; 255
      b0:	90 81       	ld	r25, Z
      b2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <countHoldTmp>
#endif

 countDebTmp = countDeb[i];
      b6:	89 01       	movw	r16, r18
      b8:	00 0f       	add	r16, r16
      ba:	11 1f       	adc	r17, r17
      bc:	d8 01       	movw	r26, r16
      be:	ae 56       	subi	r26, 0x6E	; 110
      c0:	bf 4f       	sbci	r27, 0xFF	; 255
      c2:	2d 91       	ld	r18, X+
      c4:	3c 91       	ld	r19, X
      c6:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <countDebTmp+0x1>
      ca:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <countDebTmp>
  
 if (state){
      ce:	88 23       	and	r24, r24
      d0:	e1 f0       	breq	.+56     	; 0x10a <BUT_Check.constprop.0+0x84>
    if (countDebTmp < BUT_COUNT_MAX){
      d2:	25 3f       	cpi	r18, 0xF5	; 245
      d4:	51 e0       	ldi	r21, 0x01	; 1
      d6:	35 07       	cpc	r19, r21
      d8:	c8 f5       	brcc	.+114    	; 0x14c <BUT_Check.constprop.0+0xc6>
       countDebTmp++;
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <countDebTmp+0x1>
      e2:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <countDebTmp>

       if (countDebTmp > BUT_COUNT_THR){
      e6:	2b 30       	cpi	r18, 0x0B	; 11
      e8:	31 05       	cpc	r19, r1
      ea:	80 f1       	brcs	.+96     	; 0x14c <BUT_Check.constprop.0+0xc6>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
      ec:	40 fd       	sbrc	r20, 0
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <BUT_Check.constprop.0+0x70>
             stateTmp |= FLAG_BUT_PRESSED;
      f0:	41 60       	ori	r20, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <BUT_Check.constprop.0+0x72>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
      f6:	90 e0       	ldi	r25, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
      f8:	25 3f       	cpi	r18, 0xF5	; 245
      fa:	31 40       	sbci	r19, 0x01	; 1
      fc:	41 f5       	brne	.+80     	; 0x14e <BUT_Check.constprop.0+0xc8>
         if (!(stateTmp & FLAG_BUT_HOLD)){
      fe:	41 fd       	sbrc	r20, 1
     100:	26 c0       	rjmp	.+76     	; 0x14e <BUT_Check.constprop.0+0xc8>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     102:	4b 7f       	andi	r20, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     104:	42 60       	ori	r20, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     106:	92 e0       	ldi	r25, 0x02	; 2
     108:	22 c0       	rjmp	.+68     	; 0x14e <BUT_Check.constprop.0+0xc8>
    }    
  }
  else{

#if (BUT_DOUBLE_CLICK_EN == 1)     
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     10a:	40 ff       	sbrs	r20, 0
     10c:	0a c0       	rjmp	.+20     	; 0x122 <BUT_Check.constprop.0+0x9c>
     10e:	41 fd       	sbrc	r20, 1
     110:	08 c0       	rjmp	.+16     	; 0x122 <BUT_Check.constprop.0+0x9c>

       if (stateTmp & FLAG_BUT_RELEASED){
     112:	42 ff       	sbrs	r20, 2
     114:	03 c0       	rjmp	.+6      	; 0x11c <BUT_Check.constprop.0+0x96>
          stateTmp &= ~FLAG_BUT_RELEASED;
     116:	4b 7f       	andi	r20, 0xFB	; 251
          SaveEvent_m(settings, BUT_EV_DOUBLE_CLICK, BUT_DOUBLE_CLICK_CODE, event);
     118:	95 e0       	ldi	r25, 0x05	; 5
     11a:	04 c0       	rjmp	.+8      	; 0x124 <BUT_Check.constprop.0+0x9e>
       }
       else{
          countHoldTmp = 0;
     11c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <countHoldTmp>
          stateTmp |= FLAG_BUT_RELEASED;
     120:	44 60       	ori	r20, 0x04	; 4
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     122:	90 e0       	ldi	r25, 0x00	; 0
          countHoldTmp = 0;
          stateTmp |= FLAG_BUT_RELEASED;
       }    
     }       
 
     if (stateTmp & FLAG_BUT_RELEASED){   
     124:	42 ff       	sbrs	r20, 2
     126:	08 c0       	rjmp	.+16     	; 0x138 <BUT_Check.constprop.0+0xb2>
        if (countHoldTmp > BUT_COUNT_THR_2){
     128:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <countHoldTmp>
     12c:	85 36       	cpi	r24, 0x65	; 101
     12e:	20 f0       	brcs	.+8      	; 0x138 <BUT_Check.constprop.0+0xb2>
           countHoldTmp = 0;
     130:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <countHoldTmp>
           stateTmp &= ~FLAG_BUT_RELEASED;
     134:	4b 7f       	andi	r20, 0xFB	; 251
  #if (BUT_RELEASED_EN == 1)   
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     136:	93 e0       	ldi	r25, 0x03	; 3
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
     138:	40 ff       	sbrs	r20, 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <BUT_Check.constprop.0+0xba>
     13c:	41 fd       	sbrc	r20, 1
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     13e:	94 e0       	ldi	r25, 0x04	; 4
     }
#endif     

     countDebTmp = 0;
     140:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <countDebTmp+0x1>
     144:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <countDebTmp>
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     148:	4c 7f       	andi	r20, 0xFC	; 252
     14a:	01 c0       	rjmp	.+2      	; 0x14e <BUT_Check.constprop.0+0xc8>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     14c:	90 e0       	ldi	r25, 0x00	; 0
  }

 

#if (BUT_DOUBLE_CLICK_EN == 1)  
  if (stateTmp & FLAG_BUT_RELEASED){
     14e:	42 ff       	sbrs	r20, 2
     150:	07 c0       	rjmp	.+14     	; 0x160 <BUT_Check.constprop.0+0xda>
     if (countHoldTmp < BUT_COUNT_THR_2_MAX){
     152:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <countHoldTmp>
     156:	85 36       	cpi	r24, 0x65	; 101
     158:	18 f4       	brcc	.+6      	; 0x160 <BUT_Check.constprop.0+0xda>
        countHoldTmp++;
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <countHoldTmp>
     }
  }
 
  countHold[i] = countHoldTmp;
     160:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <countHoldTmp>
     164:	80 83       	st	Z, r24
#endif       
  
  if (event){
     166:	99 23       	and	r25, r25
     168:	41 f0       	breq	.+16     	; 0x17a <BUT_Check.constprop.0+0xf4>
     PutBut(i+1);
     16a:	86 2f       	mov	r24, r22
     16c:	4a 83       	std	Y+2, r20	; 0x02
     16e:	99 83       	std	Y+1, r25	; 0x01
     170:	76 df       	rcall	.-276    	; 0x5e <PutBut>
     PutBut(event);
     172:	99 81       	ldd	r25, Y+1	; 0x01
     174:	89 2f       	mov	r24, r25
     176:	73 df       	rcall	.-282    	; 0x5e <PutBut>
     178:	4a 81       	ldd	r20, Y+2	; 0x02
  }
  
  countDeb[i] = countDebTmp;
     17a:	f8 01       	movw	r30, r16
     17c:	ee 56       	subi	r30, 0x6E	; 110
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <countDebTmp>
     184:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <countDebTmp+0x1>
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     18c:	f7 01       	movw	r30, r14
     18e:	40 83       	st	Z, r20
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	08 95       	ret

000001a2 <BUT_GetBut>:

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    
  if (count){
     1a2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__data_end>
     1a6:	22 23       	and	r18, r18
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <BUT_GetBut+0x26>
     but = buf[tail];
     1aa:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <tail>
     1ae:	e9 2f       	mov	r30, r25
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e1 58       	subi	r30, 0x81	; 129
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	80 81       	ld	r24, Z
     count--;
     1b8:	21 50       	subi	r18, 0x01	; 1
     1ba:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__data_end>
     tail++;
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     1c0:	97 70       	andi	r25, 0x07	; 7
     1c2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <tail>
     1c6:	08 95       	ret
  }
}

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     1ca:	08 95       	ret

000001cc <BUT_Init>:
}

/******************************************************/

void BUT_Init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	e2 e9       	ldi	r30, 0x92	; 146
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	c7 e8       	ldi	r28, 0x87	; 135
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	ac e8       	ldi	r26, 0x8C	; 140
     1da:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     1dc:	11 92       	st	Z+, r1
     1de:	11 92       	st	Z+, r1
     stateBut[i] = 0;
     1e0:	19 92       	st	Y+, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
     1e2:	1d 92       	st	X+, r1

void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	ea 39       	cpi	r30, 0x9A	; 154
     1e8:	f8 07       	cpc	r31, r24
     1ea:	c1 f7       	brne	.-16     	; 0x1dc <BUT_Init+0x10>
     1ec:	ef e7       	ldi	r30, 0x7F	; 127
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     1f0:	11 92       	st	Z+, r1
     countHold[i] = 0;
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	e7 38       	cpi	r30, 0x87	; 135
     1f6:	f8 07       	cpc	r31, r24
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <BUT_Init+0x24>
     buf[i] = 0;    
  }
  
  head = 0;
     1fa:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <head>
  tail = 0;  
     1fe:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <tail>
  count = 0;
     202:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     206:	89 98       	cbi	0x11, 1	; 17
     208:	91 98       	cbi	0x12, 1	; 18
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     20a:	8a 98       	cbi	0x11, 2	; 17
     20c:	92 98       	cbi	0x12, 2	; 18
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     20e:	8b 98       	cbi	0x11, 3	; 17
     210:	93 98       	cbi	0x12, 3	; 18
#endif  

#ifdef BUT_4_ID  
  ButtonInit_m(BUT_4_DDRX, BUT_4_PORTX, BUT_4_PIN, BUT_4_PULL);
     212:	88 98       	cbi	0x11, 0	; 17
     214:	90 98       	cbi	0x12, 0	; 18
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <BUT_Poll>:

/**********************************************/

void BUT_Poll(void)
{
     21c:	cf 93       	push	r28
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     21e:	80 b3       	in	r24, 0x10	; 16
     220:	c1 e0       	ldi	r28, 0x01	; 1
     222:	86 95       	lsr	r24
     224:	81 70       	andi	r24, 0x01	; 1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	8c 27       	eor	r24, r28
     22a:	2d df       	rcall	.-422    	; 0x86 <BUT_Check.constprop.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     22c:	80 b3       	in	r24, 0x10	; 16
     22e:	82 fb       	bst	r24, 2
     230:	88 27       	eor	r24, r24
     232:	80 f9       	bld	r24, 0
     234:	62 e0       	ldi	r22, 0x02	; 2
     236:	8c 27       	eor	r24, r28
     238:	26 df       	rcall	.-436    	; 0x86 <BUT_Check.constprop.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     23a:	80 b3       	in	r24, 0x10	; 16
     23c:	83 fb       	bst	r24, 3
     23e:	88 27       	eor	r24, r24
     240:	80 f9       	bld	r24, 0
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	8c 27       	eor	r24, r28
     246:	1f df       	rcall	.-450    	; 0x86 <BUT_Check.constprop.0>
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     248:	80 b3       	in	r24, 0x10	; 16
     24a:	81 70       	andi	r24, 0x01	; 1
     24c:	64 e0       	ldi	r22, 0x04	; 4
     24e:	8c 27       	eor	r24, r28
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
     250:	cf 91       	pop	r28
#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     252:	19 cf       	rjmp	.-462    	; 0x86 <BUT_Check.constprop.0>

00000254 <timer1_led_init>:
	0b00010111, //SUNSET
};

void timer1_led_init(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     254:	8e b5       	in	r24, 0x2e	; 46
     256:	88 60       	ori	r24, 0x08	; 8
     258:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	80 61       	ori	r24, 0x10	; 16
     25e:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000101; //записываем в регистр число для сравнения
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11011100;
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
     268:	8e b5       	in	r24, 0x2e	; 46
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	8e bd       	out	0x2e, r24	; 46
     26e:	08 95       	ret

00000270 <setCharIndicator>:
}
//Установка символа
void setCharIndicator(unsigned char number,  unsigned char i){
	indicators[i] = number;
     270:	e6 2f       	mov	r30, r22
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ec 58       	subi	r30, 0x8C	; 140
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	80 83       	st	Z, r24
     27a:	08 95       	ret

0000027c <setDotIndicator>:
}
//Установка точки
void setDotIndicator(unsigned char i, unsigned char state){
	indicators_dots[i] = state;
     27c:	e8 2f       	mov	r30, r24
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e5 56       	subi	r30, 0x65	; 101
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 83       	st	Z, r22
     286:	08 95       	ret

00000288 <ClearALLDotsIndicator>:
}
//Очистка точек
void ClearALLDotsIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators_dots[i] = 0;
     288:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <indicators_dots>
     28c:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <indicators_dots+0x1>
     290:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <indicators_dots+0x2>
     294:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <indicators_dots+0x3>
     298:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <indicators_dots+0x4>
     29c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <indicators_dots+0x5>
     2a0:	08 95       	ret

000002a2 <ClearALLCharIndicator>:
}
//Очистка  всех индикаторов
void ClearALLCharIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators[i] = 11;
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <indicators>
     2a8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <indicators+0x1>
     2ac:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <indicators+0x2>
     2b0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <indicators+0x3>
     2b4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <indicators+0x4>
     2b8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <indicators+0x5>
     2bc:	08 95       	ret

000002be <DisplayLED>:
	}
}
void DisplayLED(unsigned char number){
	    unsigned char char_temp = 0;
	    SPDR = ~(0b00000001 << number);
     2be:	48 2f       	mov	r20, r24
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	08 2e       	mov	r0, r24
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DisplayLED+0xe>
     2ca:	22 0f       	add	r18, r18
     2cc:	0a 94       	dec	r0
     2ce:	ea f7       	brpl	.-6      	; 0x2ca <DisplayLED+0xc>
     2d0:	20 95       	com	r18
     2d2:	2f b9       	out	0x0f, r18	; 15
        
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2d4:	77 9b       	sbis	0x0e, 7	; 14
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <DisplayLED+0x16>
		   //Разрешение вложенных прерываний 
	    };
	 //Запрет вложенных прерываний
		
		char_temp = segments[indicators[number]];
     2d8:	fa 01       	movw	r30, r20
     2da:	ec 58       	subi	r30, 0x8C	; 140
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	e0 81       	ld	r30, Z
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e0 5a       	subi	r30, 0xA0	; 160
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	80 81       	ld	r24, Z
		
		//Установка точки
	    if(indicators_dots[number]){ char_temp = char_temp | segments[12];}
     2e8:	fa 01       	movw	r30, r20
     2ea:	e5 56       	subi	r30, 0x65	; 101
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	90 81       	ld	r25, Z
     2f0:	99 23       	and	r25, r25
     2f2:	19 f0       	breq	.+6      	; 0x2fa <DisplayLED+0x3c>
     2f4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
     2f8:	89 2b       	or	r24, r25
	    	
	    SPDR = char_temp;
     2fa:	8f b9       	out	0x0f, r24	; 15
		
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <DisplayLED+0x3e>
		   
	    };
		
        //Строб защелки
	    PORTB |= (1 << 2);
     300:	c2 9a       	sbi	0x18, 2	; 24
	    PORTB &= ~(1 << 2);
     302:	c2 98       	cbi	0x18, 2	; 24
     304:	08 95       	ret

00000306 <__vector_6>:
	}
*/
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
    DisplayLED(dissplay);
     328:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <dissplay>
     32c:	c8 df       	rcall	.-112    	; 0x2be <DisplayLED>
    dissplay++;
     32e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <dissplay>
     332:	8f 5f       	subi	r24, 0xFF	; 255
    if (dissplay > 5 ){ 
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	18 f4       	brcc	.+6      	; 0x33e <__vector_6+0x38>
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
    DisplayLED(dissplay);
    dissplay++;
     338:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <dissplay>
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_6+0x3c>
    if (dissplay > 5 ){ 
		dissplay = 0;
     33e:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <dissplay>
	}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <PWM_set.part.0>:
	setCharIndicator(month/10, 2);
	setCharIndicator(month%10, 3);
	setDotIndicator(3, 1);
	
	setCharIndicator(year/10, 4);
	setCharIndicator(year%10, 5);
     364:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <red>
     368:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <green>
     36c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <blue>
     370:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <white>
     374:	08 95       	ret

00000376 <__vector_3>:
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <twoHZ>
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <twoHZ>
     38e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <twoHZ>
     392:	81 11       	cpse	r24, r1
     394:	13 c0       	rjmp	.+38     	; 0x3bc <__vector_3+0x46>
     396:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <twoHZ_status>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	91 11       	cpse	r25, r1
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <twoHZ_status>
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <twoHZ>
     3aa:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
     3ae:	88 23       	and	r24, r24
     3b0:	29 f0       	breq	.+10     	; 0x3bc <__vector_3+0x46>
     3b2:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <i2c_error_counter>
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_9>:
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <pwm_trigger_value>
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <pwm_trigger_value>
     3e2:	81 11       	cpse	r24, r1
     3e4:	1e c0       	rjmp	.+60     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3e6:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <red>
     3ea:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <red_b>
     3ee:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <green>
     3f2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <green_b>
     3f6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <blue>
     3fa:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <blue_b>
     3fe:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <white>
     402:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <white_b>
     406:	81 11       	cpse	r24, r1
     408:	95 9a       	sbi	0x12, 5	; 18
     40a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <green>
     40e:	81 11       	cpse	r24, r1
     410:	96 9a       	sbi	0x12, 6	; 18
     412:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <blue>
     416:	81 11       	cpse	r24, r1
     418:	97 9a       	sbi	0x12, 7	; 18
     41a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <white>
     41e:	81 11       	cpse	r24, r1
     420:	c0 9a       	sbi	0x18, 0	; 24
     422:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <red_b>
     426:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <pwm_trigger_value>
     42a:	98 13       	cpse	r25, r24
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	95 98       	cbi	0x12, 5	; 18
     430:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <green_b>
     434:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <pwm_trigger_value>
     438:	98 13       	cpse	r25, r24
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	96 98       	cbi	0x12, 6	; 18
     43e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <blue_b>
     442:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <pwm_trigger_value>
     446:	98 13       	cpse	r25, r24
     448:	01 c0       	rjmp	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	97 98       	cbi	0x12, 7	; 18
     44c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <white_b>
     450:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <pwm_trigger_value>
     454:	98 13       	cpse	r25, r24
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	c0 98       	cbi	0x18, 0	; 24
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <read_adc>:
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	87 b9       	out	0x07, r24	; 7
     46c:	8a e1       	ldi	r24, 0x1A	; 26
     46e:	8a 95       	dec	r24
     470:	f1 f7       	brne	.-4      	; 0x46e <read_adc+0x6>
     472:	00 c0       	rjmp	.+0      	; 0x474 <read_adc+0xc>
     474:	25 e0       	ldi	r18, 0x05	; 5
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	cb 01       	movw	r24, r22
     47c:	36 9a       	sbi	0x06, 6	; 6
     47e:	34 9b       	sbis	0x06, 4	; 6
     480:	fe cf       	rjmp	.-4      	; 0x47e <read_adc+0x16>
     482:	34 9a       	sbi	0x06, 4	; 6
     484:	44 b1       	in	r20, 0x04	; 4
     486:	55 b1       	in	r21, 0x05	; 5
     488:	64 0f       	add	r22, r20
     48a:	75 1f       	adc	r23, r21
     48c:	81 1d       	adc	r24, r1
     48e:	91 1d       	adc	r25, r1
     490:	21 50       	subi	r18, 0x01	; 1
     492:	a1 f7       	brne	.-24     	; 0x47c <read_adc+0x14>
     494:	25 e0       	ldi	r18, 0x05	; 5
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	34 d7       	rcall	.+3688   	; 0x1306 <__udivmodsi4>
     49e:	c9 01       	movw	r24, r18
     4a0:	08 95       	ret

000004a2 <led_strob>:
     4a2:	c6 9a       	sbi	0x18, 6	; 24
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	80 e7       	ldi	r24, 0x70	; 112
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	90 40       	sbci	r25, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <led_strob+0x8>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <led_strob+0x12>
     4b4:	00 00       	nop
     4b6:	c6 98       	cbi	0x18, 6	; 24
     4b8:	08 95       	ret

000004ba <SPI_init>:
     4ba:	87 b3       	in	r24, 0x17	; 23
     4bc:	88 62       	ori	r24, 0x28	; 40
     4be:	87 bb       	out	0x17, r24	; 23
     4c0:	88 b3       	in	r24, 0x18	; 24
     4c2:	87 7d       	andi	r24, 0xD7	; 215
     4c4:	88 bb       	out	0x18, r24	; 24
     4c6:	ba 9a       	sbi	0x17, 2	; 23
     4c8:	c2 98       	cbi	0x18, 2	; 24
     4ca:	80 e5       	ldi	r24, 0x50	; 80
     4cc:	8d b9       	out	0x0d, r24	; 13
     4ce:	08 95       	ret

000004d0 <PWM_init>:
     4d0:	8d 9a       	sbi	0x11, 5	; 17
     4d2:	8e 9a       	sbi	0x11, 6	; 17
     4d4:	8f 9a       	sbi	0x11, 7	; 17
     4d6:	b8 9a       	sbi	0x17, 0	; 23
     4d8:	95 98       	cbi	0x12, 5	; 18
     4da:	96 98       	cbi	0x12, 6	; 18
     4dc:	97 98       	cbi	0x12, 7	; 18
     4de:	c0 98       	cbi	0x18, 0	; 24
     4e0:	bf 98       	cbi	0x17, 7	; 23
     4e2:	83 b7       	in	r24, 0x33	; 51
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	83 bf       	out	0x33, r24	; 51
     4e8:	12 be       	out	0x32, r1	; 50
     4ea:	89 b7       	in	r24, 0x39	; 57
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	89 bf       	out	0x39, r24	; 57
     4f0:	08 95       	ret

000004f2 <ModifyRTC>:
     4f2:	49 d6       	rcall	.+3218   	; 0x1186 <I2C_StartCondition>
     4f4:	80 ed       	ldi	r24, 0xD0	; 208
     4f6:	63 d6       	rcall	.+3270   	; 0x11be <I2C_SendByte>
     4f8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	19 f0       	breq	.+6      	; 0x506 <ModifyRTC+0x14>
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	61 f1       	breq	.+88     	; 0x55c <ModifyRTC+0x6a>
     504:	55 c0       	rjmp	.+170    	; 0x5b0 <ModifyRTC+0xbe>
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	5a d6       	rcall	.+3252   	; 0x11be <I2C_SendByte>
     50a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <increment_mode>
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	89 f4       	brne	.+34     	; 0x534 <ModifyRTC+0x42>
     512:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     516:	87 31       	cpi	r24, 0x17	; 23
     518:	38 f4       	brcc	.+14     	; 0x528 <ModifyRTC+0x36>
     51a:	8f 5f       	subi	r24, 0xFF	; 255
     51c:	28 d6       	rcall	.+3152   	; 0x116e <RTC_ConvertFromBinDec>
     51e:	4f d6       	rcall	.+3230   	; 0x11be <I2C_SendByte>
     520:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	12 c0       	rjmp	.+36     	; 0x54c <ModifyRTC+0x5a>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	21 d6       	rcall	.+3138   	; 0x116e <RTC_ConvertFromBinDec>
     52c:	48 d6       	rcall	.+3216   	; 0x11be <I2C_SendByte>
     52e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <hour>
     532:	3e c0       	rjmp	.+124    	; 0x5b0 <ModifyRTC+0xbe>
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	e1 f5       	brne	.+120    	; 0x5b0 <ModifyRTC+0xbe>
     538:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     53c:	88 23       	and	r24, r24
     53e:	49 f0       	breq	.+18     	; 0x552 <ModifyRTC+0x60>
     540:	81 50       	subi	r24, 0x01	; 1
     542:	15 d6       	rcall	.+3114   	; 0x116e <RTC_ConvertFromBinDec>
     544:	3c d6       	rcall	.+3192   	; 0x11be <I2C_SendByte>
     546:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <hour>
     550:	2f c0       	rjmp	.+94     	; 0x5b0 <ModifyRTC+0xbe>
     552:	87 e1       	ldi	r24, 0x17	; 23
     554:	0c d6       	rcall	.+3096   	; 0x116e <RTC_ConvertFromBinDec>
     556:	33 d6       	rcall	.+3174   	; 0x11be <I2C_SendByte>
     558:	87 e1       	ldi	r24, 0x17	; 23
     55a:	f8 cf       	rjmp	.-16     	; 0x54c <ModifyRTC+0x5a>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	2f d6       	rcall	.+3166   	; 0x11be <I2C_SendByte>
     560:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <increment_mode>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	89 f4       	brne	.+34     	; 0x58a <ModifyRTC+0x98>
     568:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
     56c:	8b 33       	cpi	r24, 0x3B	; 59
     56e:	38 f4       	brcc	.+14     	; 0x57e <ModifyRTC+0x8c>
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	fd d5       	rcall	.+3066   	; 0x116e <RTC_ConvertFromBinDec>
     574:	24 d6       	rcall	.+3144   	; 0x11be <I2C_SendByte>
     576:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <ModifyRTC+0xba>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	f6 d5       	rcall	.+3052   	; 0x116e <RTC_ConvertFromBinDec>
     582:	1d d6       	rcall	.+3130   	; 0x11be <I2C_SendByte>
     584:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <min>
     588:	13 c0       	rjmp	.+38     	; 0x5b0 <ModifyRTC+0xbe>
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	89 f4       	brne	.+34     	; 0x5b0 <ModifyRTC+0xbe>
     58e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
     592:	88 23       	and	r24, r24
     594:	39 f0       	breq	.+14     	; 0x5a4 <ModifyRTC+0xb2>
     596:	81 50       	subi	r24, 0x01	; 1
     598:	ea d5       	rcall	.+3028   	; 0x116e <RTC_ConvertFromBinDec>
     59a:	11 d6       	rcall	.+3106   	; 0x11be <I2C_SendByte>
     59c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <ModifyRTC+0xba>
     5a4:	8b e3       	ldi	r24, 0x3B	; 59
     5a6:	e3 d5       	rcall	.+3014   	; 0x116e <RTC_ConvertFromBinDec>
     5a8:	0a d6       	rcall	.+3092   	; 0x11be <I2C_SendByte>
     5aa:	8b e3       	ldi	r24, 0x3B	; 59
     5ac:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <min>
     5b0:	03 c6       	rjmp	.+3078   	; 0x11b8 <I2C_StopCondition>

000005b2 <ModifyLEDMenu>:
     5b2:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     5b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     5ba:	89 30       	cpi	r24, 0x09	; 9
     5bc:	91 05       	cpc	r25, r1
     5be:	09 f4       	brne	.+2      	; 0x5c2 <ModifyLEDMenu+0x10>
     5c0:	5e c0       	rjmp	.+188    	; 0x67e <ModifyLEDMenu+0xcc>
     5c2:	30 f4       	brcc	.+12     	; 0x5d0 <ModifyLEDMenu+0x1e>
     5c4:	87 30       	cpi	r24, 0x07	; 7
     5c6:	91 05       	cpc	r25, r1
     5c8:	69 f0       	breq	.+26     	; 0x5e4 <ModifyLEDMenu+0x32>
     5ca:	08 97       	sbiw	r24, 0x08	; 8
     5cc:	89 f1       	breq	.+98     	; 0x630 <ModifyLEDMenu+0x7e>
     5ce:	08 95       	ret
     5d0:	8b 30       	cpi	r24, 0x0B	; 11
     5d2:	91 05       	cpc	r25, r1
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <ModifyLEDMenu+0x26>
     5d6:	9f c0       	rjmp	.+318    	; 0x716 <ModifyLEDMenu+0x164>
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <ModifyLEDMenu+0x2a>
     5da:	77 c0       	rjmp	.+238    	; 0x6ca <ModifyLEDMenu+0x118>
     5dc:	0c 97       	sbiw	r24, 0x0c	; 12
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ModifyLEDMenu+0x30>
     5e0:	c0 c0       	rjmp	.+384    	; 0x762 <ModifyLEDMenu+0x1b0>
     5e2:	08 95       	ret
     5e4:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     5e8:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	91 05       	cpc	r25, r1
     5f0:	81 f4       	brne	.+32     	; 0x612 <ModifyLEDMenu+0x60>
     5f2:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     5f6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	91 05       	cpc	r25, r1
     5fe:	10 f4       	brcc	.+4      	; 0x604 <ModifyLEDMenu+0x52>
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	02 c0       	rjmp	.+4      	; 0x608 <ModifyLEDMenu+0x56>
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <led_menu_dawn_hours+0x1>
     60c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <led_menu_dawn_hours>
     610:	08 95       	ret
     612:	02 97       	sbiw	r24, 0x02	; 2
     614:	09 f0       	breq	.+2      	; 0x618 <ModifyLEDMenu+0x66>
     616:	c9 c0       	rjmp	.+402    	; 0x7aa <ModifyLEDMenu+0x1f8>
     618:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     61c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	91 05       	cpc	r25, r1
     624:	10 f0       	brcs	.+4      	; 0x62a <ModifyLEDMenu+0x78>
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	ef cf       	rjmp	.-34     	; 0x608 <ModifyLEDMenu+0x56>
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	ec cf       	rjmp	.-40     	; 0x608 <ModifyLEDMenu+0x56>
     630:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     634:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	91 05       	cpc	r25, r1
     63c:	71 f4       	brne	.+28     	; 0x65a <ModifyLEDMenu+0xa8>
     63e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     642:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     646:	8b 33       	cpi	r24, 0x3B	; 59
     648:	91 05       	cpc	r25, r1
     64a:	10 f4       	brcc	.+4      	; 0x650 <ModifyLEDMenu+0x9e>
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	0f c0       	rjmp	.+30     	; 0x66e <ModifyLEDMenu+0xbc>
     650:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <led_menu_dawn_mins+0x1>
     654:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <led_menu_dawn_mins>
     658:	08 95       	ret
     65a:	02 97       	sbiw	r24, 0x02	; 2
     65c:	09 f0       	breq	.+2      	; 0x660 <ModifyLEDMenu+0xae>
     65e:	a5 c0       	rjmp	.+330    	; 0x7aa <ModifyLEDMenu+0x1f8>
     660:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     664:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	31 f0       	breq	.+12     	; 0x678 <ModifyLEDMenu+0xc6>
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <led_menu_dawn_mins+0x1>
     672:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <led_menu_dawn_mins>
     676:	08 95       	ret
     678:	8b e3       	ldi	r24, 0x3B	; 59
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	f8 cf       	rjmp	.-16     	; 0x66e <ModifyLEDMenu+0xbc>
     67e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     682:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	61 f4       	brne	.+24     	; 0x6a4 <ModifyLEDMenu+0xf2>
     68c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     690:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     694:	88 37       	cpi	r24, 0x78	; 120
     696:	91 05       	cpc	r25, r1
     698:	10 f4       	brcc	.+4      	; 0x69e <ModifyLEDMenu+0xec>
     69a:	0f 96       	adiw	r24, 0x0f	; 15
     69c:	11 c0       	rjmp	.+34     	; 0x6c0 <ModifyLEDMenu+0x10e>
     69e:	8f e0       	ldi	r24, 0x0F	; 15
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <ModifyLEDMenu+0x10e>
     6a4:	02 97       	sbiw	r24, 0x02	; 2
     6a6:	09 f0       	breq	.+2      	; 0x6aa <ModifyLEDMenu+0xf8>
     6a8:	80 c0       	rjmp	.+256    	; 0x7aa <ModifyLEDMenu+0x1f8>
     6aa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     6ae:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     6b2:	80 31       	cpi	r24, 0x10	; 16
     6b4:	91 05       	cpc	r25, r1
     6b6:	10 f0       	brcs	.+4      	; 0x6bc <ModifyLEDMenu+0x10a>
     6b8:	0f 97       	sbiw	r24, 0x0f	; 15
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <ModifyLEDMenu+0x10e>
     6bc:	88 e7       	ldi	r24, 0x78	; 120
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     6c4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <led_menu_dawn_interval_mins>
     6c8:	08 95       	ret
     6ca:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     6ce:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	61 f4       	brne	.+24     	; 0x6f0 <ModifyLEDMenu+0x13e>
     6d8:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     6dc:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     6e0:	85 31       	cpi	r24, 0x15	; 21
     6e2:	91 05       	cpc	r25, r1
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <ModifyLEDMenu+0x138>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	11 c0       	rjmp	.+34     	; 0x70c <ModifyLEDMenu+0x15a>
     6ea:	8d e0       	ldi	r24, 0x0D	; 13
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <ModifyLEDMenu+0x15a>
     6f0:	02 97       	sbiw	r24, 0x02	; 2
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <ModifyLEDMenu+0x144>
     6f4:	5a c0       	rjmp	.+180    	; 0x7aa <ModifyLEDMenu+0x1f8>
     6f6:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     6fa:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     6fe:	8e 30       	cpi	r24, 0x0E	; 14
     700:	91 05       	cpc	r25, r1
     702:	10 f0       	brcs	.+4      	; 0x708 <ModifyLEDMenu+0x156>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	02 c0       	rjmp	.+4      	; 0x70c <ModifyLEDMenu+0x15a>
     708:	85 e1       	ldi	r24, 0x15	; 21
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <led_menu_sunset_hours+0x1>
     710:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <led_menu_sunset_hours>
     714:	08 95       	ret
     716:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     71a:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	71 f4       	brne	.+28     	; 0x740 <ModifyLEDMenu+0x18e>
     724:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
     728:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
     72c:	8b 33       	cpi	r24, 0x3B	; 59
     72e:	91 05       	cpc	r25, r1
     730:	10 f4       	brcc	.+4      	; 0x736 <ModifyLEDMenu+0x184>
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	11 c0       	rjmp	.+34     	; 0x758 <ModifyLEDMenu+0x1a6>
     736:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <led_menu_sunset_mins+0x1>
     73a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <led_menu_sunset_mins>
     73e:	08 95       	ret
     740:	02 97       	sbiw	r24, 0x02	; 2
     742:	99 f5       	brne	.+102    	; 0x7aa <ModifyLEDMenu+0x1f8>
     744:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
     748:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	11 f0       	breq	.+4      	; 0x754 <ModifyLEDMenu+0x1a2>
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	02 c0       	rjmp	.+4      	; 0x758 <ModifyLEDMenu+0x1a6>
     754:	8b e3       	ldi	r24, 0x3B	; 59
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <led_menu_sunset_mins+0x1>
     75c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <led_menu_sunset_mins>
     760:	08 95       	ret
     762:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     766:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	91 05       	cpc	r25, r1
     76e:	61 f4       	brne	.+24     	; 0x788 <ModifyLEDMenu+0x1d6>
     770:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
     774:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     778:	88 37       	cpi	r24, 0x78	; 120
     77a:	91 05       	cpc	r25, r1
     77c:	10 f4       	brcc	.+4      	; 0x782 <ModifyLEDMenu+0x1d0>
     77e:	0f 96       	adiw	r24, 0x0f	; 15
     780:	10 c0       	rjmp	.+32     	; 0x7a2 <ModifyLEDMenu+0x1f0>
     782:	8f e0       	ldi	r24, 0x0F	; 15
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <ModifyLEDMenu+0x1f0>
     788:	02 97       	sbiw	r24, 0x02	; 2
     78a:	79 f4       	brne	.+30     	; 0x7aa <ModifyLEDMenu+0x1f8>
     78c:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
     790:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     794:	80 31       	cpi	r24, 0x10	; 16
     796:	91 05       	cpc	r25, r1
     798:	10 f0       	brcs	.+4      	; 0x79e <ModifyLEDMenu+0x1ec>
     79a:	0f 97       	sbiw	r24, 0x0f	; 15
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <ModifyLEDMenu+0x1f0>
     79e:	88 e7       	ldi	r24, 0x78	; 120
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     7a6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <led_menu_sunset_interval_mins>
     7aa:	08 95       	ret

000007ac <ShowTime>:
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	d6 2f       	mov	r29, r22
     7b4:	ca e0       	ldi	r28, 0x0A	; 10
     7b6:	6c 2f       	mov	r22, r28
     7b8:	73 d5       	rcall	.+2790   	; 0x12a0 <__udivmodqi4>
     7ba:	19 2f       	mov	r17, r25
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	58 dd       	rcall	.-1360   	; 0x270 <setCharIndicator>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 2f       	mov	r24, r17
     7c4:	55 dd       	rcall	.-1366   	; 0x270 <setCharIndicator>
     7c6:	8d 2f       	mov	r24, r29
     7c8:	6c 2f       	mov	r22, r28
     7ca:	6a d5       	rcall	.+2772   	; 0x12a0 <__udivmodqi4>
     7cc:	c9 2f       	mov	r28, r25
     7ce:	63 e0       	ldi	r22, 0x03	; 3
     7d0:	4f dd       	rcall	.-1378   	; 0x270 <setCharIndicator>
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	8c 2f       	mov	r24, r28
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	49 cd       	rjmp	.-1390   	; 0x270 <setCharIndicator>

000007de <main>:
}

int main(void)
{
	//Инициализация перефирии
	I2C_Init();
     7de:	d0 d4       	rcall	.+2464   	; 0x1180 <I2C_Init>
	PWM_init();
     7e0:	77 de       	rcall	.-786    	; 0x4d0 <PWM_init>
	BUT_Init();
     7e2:	f4 dc       	rcall	.-1560   	; 0x1cc <BUT_Init>
	BUTTON_SPROB_LED_DDR |= (1 << BUTTON_SPROB_LED_PIN);
     7e4:	be 9a       	sbi	0x17, 6	; 23
	
   //ADC Init
   ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
     7e6:	85 e8       	ldi	r24, 0x85	; 133
     7e8:	86 b9       	out	0x06, r24	; 6
	
	SPI_init();
     7ea:	67 de       	rcall	.-818    	; 0x4ba <SPI_init>
	timer1_led_init();
     7ec:	33 dd       	rcall	.-1434   	; 0x254 <timer1_led_init>
	
	//на случай если зависнет мк, то при подаче питания свет будет включен
	PORT_R |= (1<<R);
     7ee:	95 9a       	sbi	0x12, 5	; 18
	PORT_G |= (1<<G);
     7f0:	96 9a       	sbi	0x12, 6	; 18
	PORT_B |= (1<<B);
     7f2:	97 9a       	sbi	0x12, 7	; 18
	PORT_W |= (1<<W);
     7f4:	c0 9a       	sbi	0x18, 0	; 24
	
    OCR2 = 255;
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	83 bd       	out	0x23, r24	; 35

    TCCR2 |= (1 << WGM21);
     7fa:	85 b5       	in	r24, 0x25	; 37
     7fc:	88 60       	ori	r24, 0x08	; 8
     7fe:	85 bd       	out	0x25, r24	; 37
    // Set to CTC Mode

    TIMSK |= (1 << OCIE2);
     800:	89 b7       	in	r24, 0x39	; 57
     802:	80 68       	ori	r24, 0x80	; 128
     804:	89 bf       	out	0x39, r24	; 57
    //Set interrupt on compare match

    TCCR2 |= ((1 << CS21) | (1 << CS20) | (1 << CS20));
     806:	85 b5       	in	r24, 0x25	; 37
     808:	83 60       	ori	r24, 0x03	; 3
     80a:	85 bd       	out	0x25, r24	; 37
    // set prescaler to 64 and starts PWM	
    sei(); 
     80c:	78 94       	sei
	
	//1Hz generator
	DDRC &= ~(1 << PC3);
     80e:	a3 98       	cbi	0x14, 3	; 20
	I2C_StartCondition();
     810:	ba d4       	rcall	.+2420   	; 0x1186 <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     812:	80 ed       	ldi	r24, 0xD0	; 208
     814:	d4 d4       	rcall	.+2472   	; 0x11be <I2C_SendByte>
	I2C_SendByte(7);//Переходим на 0x07
     816:	87 e0       	ldi	r24, 0x07	; 7
     818:	d2 d4       	rcall	.+2468   	; 0x11be <I2C_SendByte>
	I2C_SendByte(0b00010000); //включим SQWE
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	d0 d4       	rcall	.+2464   	; 0x11be <I2C_SendByte>
	I2C_StopCondition();
     81e:	cc d4       	rcall	.+2456   	; 0x11b8 <I2C_StopCondition>
	
	//Читаем время
	I2C_SendByteByADDR(0,0b11010000);	//Установка адреса в 0
     820:	60 ed       	ldi	r22, 0xD0	; 208
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	e6 d4       	rcall	.+2508   	; 0x11f2 <I2C_SendByteByADDR>
	I2C_StartCondition(); //Отправим условие START
     826:	af d4       	rcall	.+2398   	; 0x1186 <I2C_StartCondition>
	I2C_SendByte(0b11010001); //Бит на чтение
     828:	81 ed       	ldi	r24, 0xD1	; 209
     82a:	c9 d4       	rcall	.+2450   	; 0x11be <I2C_SendByte>
	sec_ = I2C_ReadByte();
     82c:	f6 d4       	rcall	.+2540   	; 0x121a <I2C_ReadByte>
     82e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <sec_>
	min_ = I2C_ReadByte();
     832:	f3 d4       	rcall	.+2534   	; 0x121a <I2C_ReadByte>
     834:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <min_>
	hour_ = I2C_ReadByte();
     838:	f0 d4       	rcall	.+2528   	; 0x121a <I2C_ReadByte>
     83a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <hour_>
	day_ = I2C_ReadByte();
     83e:	ed d4       	rcall	.+2522   	; 0x121a <I2C_ReadByte>
     840:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <day_>
	date_ = I2C_ReadByte();
     844:	ea d4       	rcall	.+2516   	; 0x121a <I2C_ReadByte>
     846:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <date_>
	month_ = I2C_ReadByte();
     84a:	e7 d4       	rcall	.+2510   	; 0x121a <I2C_ReadByte>
     84c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <month_>
	year_ = I2C_ReadLastByte();
     850:	fe d4       	rcall	.+2556   	; 0x124e <I2C_ReadLastByte>
     852:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <year_>
	I2C_StopCondition(); //Отправим условие STOP
     856:	b0 d4       	rcall	.+2400   	; 0x11b8 <I2C_StopCondition>
					
	sec = RTC_ConvertFromDec(sec_); //Преобразуем в десятичный формат
     858:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <sec_>
     85c:	7f d4       	rcall	.+2302   	; 0x115c <RTC_ConvertFromDec>
     85e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <sec>
	min = RTC_ConvertFromDec(min_); //Преобразуем в десятичный формат
     862:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <min_>
     866:	7a d4       	rcall	.+2292   	; 0x115c <RTC_ConvertFromDec>
     868:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <min>
	hour = RTC_ConvertFromDec(hour_); //Преобразуем в десятичный формат
     86c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <hour_>
     870:	75 d4       	rcall	.+2282   	; 0x115c <RTC_ConvertFromDec>
     872:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <hour>
	day = RTC_ConvertFromDec(day_); //Преобразуем в десятичный формат
     876:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <day_>
     87a:	70 d4       	rcall	.+2272   	; 0x115c <RTC_ConvertFromDec>
     87c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <day>
	year = RTC_ConvertFromDec(year_); //Преобразуем в десятичный формат
     880:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <year_>
     884:	6b d4       	rcall	.+2262   	; 0x115c <RTC_ConvertFromDec>
     886:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <year>
	month = RTC_ConvertFromDec(month_); //Преобразуем в десятичный формат
     88a:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <month_>
     88e:	66 d4       	rcall	.+2252   	; 0x115c <RTC_ConvertFromDec>
     890:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <month>
	date = RTC_ConvertFromDec(date_); //Преобразуем в десятичный формат
     894:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <date_>
     898:	61 d4       	rcall	.+2242   	; 0x115c <RTC_ConvertFromDec>
     89a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <date>
	
	
	//Защита от кривых данных в DSxxxx
	if(min > 59 || hour > 23){
     89e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
     8a2:	8c 33       	cpi	r24, 0x3C	; 60
     8a4:	20 f4       	brcc	.+8      	; 0x8ae <main+0xd0>
     8a6:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     8aa:	88 31       	cpi	r24, 0x18	; 24
     8ac:	d8 f0       	brcs	.+54     	; 0x8e4 <main+0x106>
	 	I2C_StartCondition();
     8ae:	6b d4       	rcall	.+2262   	; 0x1186 <I2C_StartCondition>
	 	I2C_SendByte(0b11010000);
     8b0:	80 ed       	ldi	r24, 0xD0	; 208
     8b2:	85 d4       	rcall	.+2314   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(0);//Переходим на 0x00
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	83 d4       	rcall	.+2310   	; 0x11be <I2C_SendByte>
		I2C_SendByte(RTC_ConvertFromBinDec(0)); //секунды
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	59 d4       	rcall	.+2226   	; 0x116e <RTC_ConvertFromBinDec>
     8bc:	80 d4       	rcall	.+2304   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(RTC_ConvertFromBinDec(0)); //минуты
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	56 d4       	rcall	.+2220   	; 0x116e <RTC_ConvertFromBinDec>
     8c2:	7d d4       	rcall	.+2298   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(RTC_ConvertFromBinDec(0)); //часы
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	53 d4       	rcall	.+2214   	; 0x116e <RTC_ConvertFromBinDec>
     8c8:	7a d4       	rcall	.+2292   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(RTC_ConvertFromBinDec(1)); //день недели
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	50 d4       	rcall	.+2208   	; 0x116e <RTC_ConvertFromBinDec>
     8ce:	77 d4       	rcall	.+2286   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(RTC_ConvertFromBinDec(23)); //дата
     8d0:	87 e1       	ldi	r24, 0x17	; 23
     8d2:	4d d4       	rcall	.+2202   	; 0x116e <RTC_ConvertFromBinDec>
     8d4:	74 d4       	rcall	.+2280   	; 0x11be <I2C_SendByte>
	 	I2C_SendByte(RTC_ConvertFromBinDec(7)); //месяц
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	4a d4       	rcall	.+2196   	; 0x116e <RTC_ConvertFromBinDec>
     8da:	71 d4       	rcall	.+2274   	; 0x11be <I2C_SendByte>
		I2C_SendByte(RTC_ConvertFromBinDec(20)); //год
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	47 d4       	rcall	.+2190   	; 0x116e <RTC_ConvertFromBinDec>
     8e0:	6e d4       	rcall	.+2268   	; 0x11be <I2C_SendByte>
		I2C_StopCondition();
     8e2:	6a d4       	rcall	.+2260   	; 0x11b8 <I2C_StopCondition>
	}
	
	
	//Восстанавливаем значения из EEPOM
	led_menu_dawn_hours = eeprom_read_word(&ee_led_menu_dawn_hours);
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	62 d5       	rcall	.+2756   	; 0x13ae <eeprom_read_word>
     8ea:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <led_menu_dawn_hours+0x1>
     8ee:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <led_menu_dawn_hours>
	led_menu_dawn_mins = eeprom_read_word(&ee_led_menu_dawn_mins);
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	5b d5       	rcall	.+2742   	; 0x13ae <eeprom_read_word>
     8f8:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <led_menu_dawn_mins+0x1>
     8fc:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <led_menu_dawn_mins>
	led_menu_dawn_interval_mins = eeprom_read_word(&ee_led_menu_dawn_interval_mins);
     900:	86 e0       	ldi	r24, 0x06	; 6
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	54 d5       	rcall	.+2728   	; 0x13ae <eeprom_read_word>
     906:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     90a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <led_menu_dawn_interval_mins>
	led_menu_sunset_hours = eeprom_read_word(&ee_led_menu_sunset_hours);
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	4d d5       	rcall	.+2714   	; 0x13ae <eeprom_read_word>
     914:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <led_menu_sunset_hours+0x1>
     918:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <led_menu_sunset_hours>
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	46 d5       	rcall	.+2700   	; 0x13ae <eeprom_read_word>
     922:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <led_menu_sunset_mins+0x1>
     926:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <led_menu_sunset_mins>
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	3f d5       	rcall	.+2686   	; 0x13ae <eeprom_read_word>
     930:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     934:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <led_menu_sunset_interval_mins>
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, adcMaxPWM, 10));
												now_mode_light = LIGHT_SUNSET;
     938:	b2 e0       	ldi	r27, 0x02	; 2
     93a:	2b 2e       	mov	r2, r27
     93c:	31 2c       	mov	r3, r1
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
										now_mode_light = LIGHT_DAWM;
     93e:	88 24       	eor	r8, r8
     940:	83 94       	inc	r8
     942:	91 2c       	mov	r9, r1
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     944:	04 e6       	ldi	r16, 0x64	; 100
     946:	10 e0       	ldi	r17, 0x00	; 0
					  setCharIndicator((led_menu_dawn_interval_mins%100)/10, 2);
     948:	ca e0       	ldi	r28, 0x0A	; 10
     94a:	d0 e0       	ldi	r29, 0x00	; 0
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
	
	while(1)
	{ 
				adcMaxPWM = read_adc(0)/4;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	8c dd       	rcall	.-1256   	; 0x468 <read_adc>
     950:	fc 01       	movw	r30, r24
     952:	f6 95       	lsr	r31
     954:	e7 95       	ror	r30
     956:	f6 95       	lsr	r31
     958:	e7 95       	ror	r30
     95a:	f0 93 a3 00 	sts	0x00A3, r31	; 0x8000a3 <adcMaxPWM+0x1>
     95e:	e0 93 a2 00 	sts	0x00A2, r30	; 0x8000a2 <adcMaxPWM>
		  	    //Принудительное включение 
				if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     962:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     966:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	09 f0       	breq	.+2      	; 0x970 <main+0x192>
     96e:	60 c1       	rjmp	.+704    	; 0xc30 <main+0x452>
     970:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     974:	81 11       	cpse	r24, r1
     976:	5c c1       	rjmp	.+696    	; 0xc30 <main+0x452>
				if((PINB & (1 << PB7))){	
     978:	b7 9b       	sbis	0x16, 7	; 22
     97a:	14 c1       	rjmp	.+552    	; 0xba4 <main+0x3c6>
								//Супер дупер крутой рассвет и закат
								
								all_time_in_sec = (((long)hour * 60) + (long)min)*60 + (long)sec;
     97c:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <hour>
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	ac e3       	ldi	r26, 0x3C	; 60
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	fd d4       	rcall	.+2554   	; 0x1382 <__umulhisi3>
     988:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <min>
     98c:	6b 01       	movw	r12, r22
     98e:	7c 01       	movw	r14, r24
     990:	c2 0e       	add	r12, r18
     992:	d1 1c       	adc	r13, r1
     994:	e1 1c       	adc	r14, r1
     996:	f1 1c       	adc	r15, r1
     998:	a7 01       	movw	r20, r14
     99a:	96 01       	movw	r18, r12
     99c:	fe d4       	rcall	.+2556   	; 0x139a <__muluhisi3>
     99e:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <sec>
     9a2:	6b 01       	movw	r12, r22
     9a4:	7c 01       	movw	r14, r24
     9a6:	c2 0e       	add	r12, r18
     9a8:	d1 1c       	adc	r13, r1
     9aa:	e1 1c       	adc	r14, r1
     9ac:	f1 1c       	adc	r15, r1
     9ae:	c0 92 b5 00 	sts	0x00B5, r12	; 0x8000b5 <all_time_in_sec>
     9b2:	d0 92 b6 00 	sts	0x00B6, r13	; 0x8000b6 <all_time_in_sec+0x1>
     9b6:	e0 92 b7 00 	sts	0x00B7, r14	; 0x8000b7 <all_time_in_sec+0x2>
     9ba:	f0 92 b8 00 	sts	0x00B8, r15	; 0x8000b8 <all_time_in_sec+0x3>
								all_time_in_sec_dawn = ((long)led_menu_dawn_hours * 60 * 60) + ((long)led_menu_dawn_mins * 60);
     9be:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     9c2:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     9c6:	40 91 cb 00 	lds	r20, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     9ca:	50 91 cc 00 	lds	r21, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     9ce:	a0 e1       	ldi	r26, 0x10	; 16
     9d0:	be e0       	ldi	r27, 0x0E	; 14
     9d2:	d7 d4       	rcall	.+2478   	; 0x1382 <__umulhisi3>
     9d4:	2b 01       	movw	r4, r22
     9d6:	3c 01       	movw	r6, r24
     9d8:	9a 01       	movw	r18, r20
     9da:	ac e3       	ldi	r26, 0x3C	; 60
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	d1 d4       	rcall	.+2466   	; 0x1382 <__umulhisi3>
     9e0:	46 0e       	add	r4, r22
     9e2:	57 1e       	adc	r5, r23
     9e4:	68 1e       	adc	r6, r24
     9e6:	79 1e       	adc	r7, r25
     9e8:	40 92 ad 00 	sts	0x00AD, r4	; 0x8000ad <all_time_in_sec_dawn>
     9ec:	50 92 ae 00 	sts	0x00AE, r5	; 0x8000ae <all_time_in_sec_dawn+0x1>
     9f0:	60 92 af 00 	sts	0x00AF, r6	; 0x8000af <all_time_in_sec_dawn+0x2>
     9f4:	70 92 b0 00 	sts	0x00B0, r7	; 0x8000b0 <all_time_in_sec_dawn+0x3>
								
								if(all_time_in_sec_dawn < all_time_in_sec){
     9f8:	4c 14       	cp	r4, r12
     9fa:	5d 04       	cpc	r5, r13
     9fc:	6e 04       	cpc	r6, r14
     9fe:	7f 04       	cpc	r7, r15
     a00:	08 f0       	brcs	.+2      	; 0xa04 <main+0x226>
     a02:	a6 c0       	rjmp	.+332    	; 0xb50 <main+0x372>
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
     a04:	d7 01       	movw	r26, r14
     a06:	c6 01       	movw	r24, r12
     a08:	84 19       	sub	r24, r4
     a0a:	95 09       	sbc	r25, r5
     a0c:	a6 09       	sbc	r26, r6
     a0e:	b7 09       	sbc	r27, r7
     a10:	2c 01       	movw	r4, r24
     a12:	3d 01       	movw	r6, r26
     a14:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <excess_sec_dawm>
     a18:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <excess_sec_dawm+0x1>
     a1c:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <excess_sec_dawm+0x2>
     a20:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <excess_sec_dawm+0x3>
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
     a24:	a0 90 c9 00 	lds	r10, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     a28:	b0 90 ca 00 	lds	r11, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     a2c:	6c e3       	ldi	r22, 0x3C	; 60
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	57 d4       	rcall	.+2222   	; 0x12e0 <__divmodhi4>
     a32:	6a 15       	cp	r22, r10
     a34:	7b 05       	cpc	r23, r11
     a36:	40 f5       	brcc	.+80     	; 0xa88 <main+0x2aa>
     a38:	cf 01       	movw	r24, r30
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	9c 01       	movw	r18, r24
     a40:	ad 01       	movw	r20, r26
     a42:	2a 50       	subi	r18, 0x0A	; 10
     a44:	31 09       	sbc	r19, r1
     a46:	41 09       	sbc	r20, r1
     a48:	51 09       	sbc	r21, r1
     a4a:	c3 01       	movw	r24, r6
     a4c:	b2 01       	movw	r22, r4
     a4e:	61 50       	subi	r22, 0x01	; 1
     a50:	71 09       	sbc	r23, r1
     a52:	81 09       	sbc	r24, r1
     a54:	91 09       	sbc	r25, r1
     a56:	15 d4       	rcall	.+2090   	; 0x1282 <__mulsi3>
     a58:	4c e3       	ldi	r20, 0x3C	; 60
     a5a:	4a 9d       	mul	r20, r10
     a5c:	90 01       	movw	r18, r0
     a5e:	4b 9d       	mul	r20, r11
     a60:	30 0d       	add	r19, r0
     a62:	11 24       	eor	r1, r1
     a64:	69 01       	movw	r12, r18
     a66:	e1 2c       	mov	r14, r1
     a68:	f1 2c       	mov	r15, r1
     a6a:	a7 01       	movw	r20, r14
     a6c:	96 01       	movw	r18, r12
     a6e:	21 50       	subi	r18, 0x01	; 1
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	69 d4       	rcall	.+2258   	; 0x134a <__divmodsi4>
     a78:	8a e0       	ldi	r24, 0x0A	; 10
     a7a:	82 0f       	add	r24, r18
     a7c:	73 dc       	rcall	.-1818   	; 0x364 <PWM_set.part.0>
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
										now_mode_light = LIGHT_DAWM;
     a7e:	90 92 bc 00 	sts	0x00BC, r9	; 0x8000bc <now_mode_light+0x1>
     a82:	80 92 bb 00 	sts	0x00BB, r8	; 0x8000bb <now_mode_light>
     a86:	76 c0       	rjmp	.+236    	; 0xb74 <main+0x396>
									}else{
										all_time_in_sec_sunset = ((long)led_menu_sunset_hours * 60 * 60) + ((long)led_menu_sunset_mins * 60);
     a88:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     a8c:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     a90:	40 91 c5 00 	lds	r20, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
     a94:	50 91 c6 00 	lds	r21, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
     a98:	a0 e1       	ldi	r26, 0x10	; 16
     a9a:	be e0       	ldi	r27, 0x0E	; 14
     a9c:	72 d4       	rcall	.+2276   	; 0x1382 <__umulhisi3>
     a9e:	2b 01       	movw	r4, r22
     aa0:	3c 01       	movw	r6, r24
     aa2:	9a 01       	movw	r18, r20
     aa4:	ac e3       	ldi	r26, 0x3C	; 60
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	6c d4       	rcall	.+2264   	; 0x1382 <__umulhisi3>
     aaa:	46 0e       	add	r4, r22
     aac:	57 1e       	adc	r5, r23
     aae:	68 1e       	adc	r6, r24
     ab0:	79 1e       	adc	r7, r25
     ab2:	40 92 b1 00 	sts	0x00B1, r4	; 0x8000b1 <all_time_in_sec_sunset>
     ab6:	50 92 b2 00 	sts	0x00B2, r5	; 0x8000b2 <all_time_in_sec_sunset+0x1>
     aba:	60 92 b3 00 	sts	0x00B3, r6	; 0x8000b3 <all_time_in_sec_sunset+0x2>
     abe:	70 92 b4 00 	sts	0x00B4, r7	; 0x8000b4 <all_time_in_sec_sunset+0x3>
																				
										if(all_time_in_sec_sunset  < all_time_in_sec){
     ac2:	4c 14       	cp	r4, r12
     ac4:	5d 04       	cpc	r5, r13
     ac6:	6e 04       	cpc	r6, r14
     ac8:	7f 04       	cpc	r7, r15
     aca:	08 f0       	brcs	.+2      	; 0xace <main+0x2f0>
     acc:	4a c0       	rjmp	.+148    	; 0xb62 <main+0x384>
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
     ace:	c4 18       	sub	r12, r4
     ad0:	d5 08       	sbc	r13, r5
     ad2:	e6 08       	sbc	r14, r6
     ad4:	f7 08       	sbc	r15, r7
     ad6:	c0 92 cf 00 	sts	0x00CF, r12	; 0x8000cf <excess_sec_sunset>
     ada:	d0 92 d0 00 	sts	0x00D0, r13	; 0x8000d0 <excess_sec_sunset+0x1>
     ade:	e0 92 d1 00 	sts	0x00D1, r14	; 0x8000d1 <excess_sec_sunset+0x2>
     ae2:	f0 92 d2 00 	sts	0x00D2, r15	; 0x8000d2 <excess_sec_sunset+0x3>
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
     ae6:	a0 90 c3 00 	lds	r10, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
     aea:	b0 90 c4 00 	lds	r11, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     aee:	c6 01       	movw	r24, r12
     af0:	6c e3       	ldi	r22, 0x3C	; 60
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	f5 d3       	rcall	.+2026   	; 0x12e0 <__divmodhi4>
     af6:	6a 15       	cp	r22, r10
     af8:	7b 05       	cpc	r23, r11
     afa:	50 f5       	brcc	.+84     	; 0xb50 <main+0x372>
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, adcMaxPWM, 10));
     afc:	2f 01       	movw	r4, r30
     afe:	61 2c       	mov	r6, r1
     b00:	71 2c       	mov	r7, r1
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	31 09       	sbc	r19, r1
     b0a:	41 09       	sbc	r20, r1
     b0c:	51 09       	sbc	r21, r1
     b0e:	6a e0       	ldi	r22, 0x0A	; 10
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	64 19       	sub	r22, r4
     b18:	75 09       	sbc	r23, r5
     b1a:	86 09       	sbc	r24, r6
     b1c:	97 09       	sbc	r25, r7
     b1e:	b1 d3       	rcall	.+1890   	; 0x1282 <__mulsi3>
     b20:	4c e3       	ldi	r20, 0x3C	; 60
     b22:	4a 9d       	mul	r20, r10
     b24:	90 01       	movw	r18, r0
     b26:	4b 9d       	mul	r20, r11
     b28:	30 0d       	add	r19, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	69 01       	movw	r12, r18
     b2e:	e1 2c       	mov	r14, r1
     b30:	f1 2c       	mov	r15, r1
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	31 09       	sbc	r19, r1
     b3a:	41 09       	sbc	r20, r1
     b3c:	51 09       	sbc	r21, r1
     b3e:	05 d4       	rcall	.+2058   	; 0x134a <__divmodsi4>
     b40:	82 2f       	mov	r24, r18
     b42:	84 0d       	add	r24, r4
     b44:	0f dc       	rcall	.-2018   	; 0x364 <PWM_set.part.0>
												now_mode_light = LIGHT_SUNSET;
     b46:	30 92 bc 00 	sts	0x00BC, r3	; 0x8000bc <now_mode_light+0x1>
     b4a:	20 92 bb 00 	sts	0x00BB, r2	; 0x8000bb <now_mode_light>
     b4e:	12 c0       	rjmp	.+36     	; 0xb74 <main+0x396>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 dc       	rcall	.-2032   	; 0x364 <PWM_set.part.0>
										    }else{ 
												PWM_set(RGBW, 0x00); 
												now_mode_light = LIGHT_OFF;
     b54:	a4 e0       	ldi	r26, 0x04	; 4
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	b0 93 bc 00 	sts	0x00BC, r27	; 0x8000bc <now_mode_light+0x1>
     b5c:	a0 93 bb 00 	sts	0x00BB, r26	; 0x8000bb <now_mode_light>
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <main+0x396>
     b62:	8e 2f       	mov	r24, r30
     b64:	ff db       	rcall	.-2050   	; 0x364 <PWM_set.part.0>
											}
										}else{ 
											PWM_set(RGBW, adcMaxPWM); 
											now_mode_light = LIGHT_FULL;
     b66:	f3 e0       	ldi	r31, 0x03	; 3
     b68:	cf 2e       	mov	r12, r31
     b6a:	d1 2c       	mov	r13, r1
     b6c:	d0 92 bc 00 	sts	0x00BC, r13	; 0x8000bc <now_mode_light+0x1>
     b70:	c0 92 bb 00 	sts	0x00BB, r12	; 0x8000bb <now_mode_light>
								}else{  
									PWM_set(RGBW, 0x00); 
									now_mode_light = LIGHT_OFF;
								}			
					
								if(prev_now_mode_light != now_mode_light ){
     b74:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <prev_now_mode_light>
     b78:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <prev_now_mode_light+0x1>
     b7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <now_mode_light>
     b80:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <now_mode_light+0x1>
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	09 f0       	breq	.+2      	; 0xb8c <main+0x3ae>
									ClearALLCharIndicator();
     b8a:	8b db       	rcall	.-2282   	; 0x2a2 <ClearALLCharIndicator>
								}
					
								prev_now_mode_light = now_mode_light;
     b8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <now_mode_light>
     b90:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <now_mode_light+0x1>
     b94:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <prev_now_mode_light+0x1>
     b98:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <prev_now_mode_light>
								TIMSK |= (1 << TOIE0);
     b9c:	89 b7       	in	r24, 0x39	; 57
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	89 bf       	out	0x39, r24	; 57
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <main+0x3ca>
     ba4:	8e 2f       	mov	r24, r30
     ba6:	de db       	rcall	.-2116   	; 0x364 <PWM_set.part.0>
					}else{
						PWM_set(RGBW, adcMaxPWM); 
					}
					
					//Читаем время
					I2C_SendByteByADDR(0,0b11010000);	//Установка адреса в 0
     ba8:	60 ed       	ldi	r22, 0xD0	; 208
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	22 d3       	rcall	.+1604   	; 0x11f2 <I2C_SendByteByADDR>
					I2C_StartCondition(); //Отправим условие START
     bae:	eb d2       	rcall	.+1494   	; 0x1186 <I2C_StartCondition>
					I2C_SendByte(0b11010001); //Бит на чтение
     bb0:	81 ed       	ldi	r24, 0xD1	; 209
     bb2:	05 d3       	rcall	.+1546   	; 0x11be <I2C_SendByte>
					sec_ = I2C_ReadByte();
     bb4:	32 d3       	rcall	.+1636   	; 0x121a <I2C_ReadByte>
     bb6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <sec_>
					min_ = I2C_ReadByte();
     bba:	2f d3       	rcall	.+1630   	; 0x121a <I2C_ReadByte>
     bbc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <min_>
					hour_ = I2C_ReadByte();
     bc0:	2c d3       	rcall	.+1624   	; 0x121a <I2C_ReadByte>
     bc2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <hour_>
					day_ = I2C_ReadByte();
     bc6:	29 d3       	rcall	.+1618   	; 0x121a <I2C_ReadByte>
     bc8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <day_>
					date_ = I2C_ReadByte();
     bcc:	26 d3       	rcall	.+1612   	; 0x121a <I2C_ReadByte>
     bce:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <date_>
					month_ = I2C_ReadByte();
     bd2:	23 d3       	rcall	.+1606   	; 0x121a <I2C_ReadByte>
     bd4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <month_>
					year_ = I2C_ReadLastByte();
     bd8:	3a d3       	rcall	.+1652   	; 0x124e <I2C_ReadLastByte>
     bda:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <year_>
					I2C_StopCondition(); //Отправим условие STOP
     bde:	ec d2       	rcall	.+1496   	; 0x11b8 <I2C_StopCondition>
					
					sec = RTC_ConvertFromDec(sec_); //Преобразуем в десятичный формат
     be0:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <sec_>
     be4:	bb d2       	rcall	.+1398   	; 0x115c <RTC_ConvertFromDec>
     be6:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <sec>
					min = RTC_ConvertFromDec(min_); //Преобразуем в десятичный формат
     bea:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <min_>
     bee:	b6 d2       	rcall	.+1388   	; 0x115c <RTC_ConvertFromDec>
     bf0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <min>
					hour = RTC_ConvertFromDec(hour_); //Преобразуем в десятичный формат
     bf4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <hour_>
     bf8:	b1 d2       	rcall	.+1378   	; 0x115c <RTC_ConvertFromDec>
     bfa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <hour>
					day = RTC_ConvertFromDec(day_); //Преобразуем в десятичный формат
     bfe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <day_>
     c02:	ac d2       	rcall	.+1368   	; 0x115c <RTC_ConvertFromDec>
     c04:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <day>
					year = RTC_ConvertFromDec(year_); //Преобразуем в десятичный формат
     c08:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <year_>
     c0c:	a7 d2       	rcall	.+1358   	; 0x115c <RTC_ConvertFromDec>
     c0e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <year>
					month = RTC_ConvertFromDec(month_); //Преобразуем в десятичный формат
     c12:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <month_>
     c16:	a2 d2       	rcall	.+1348   	; 0x115c <RTC_ConvertFromDec>
     c18:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <month>
					date = RTC_ConvertFromDec(date_); //Преобразуем в десятичный формат
     c1c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <date_>
     c20:	9d d2       	rcall	.+1338   	; 0x115c <RTC_ConvertFromDec>
     c22:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <date>
					if((PINB & (1 << PB7))){
     c26:	b7 9b       	sbis	0x16, 7	; 22
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <main+0x460>
					  TIMSK |= (1 << TOIE0);
     c2a:	89 b7       	in	r24, 0x39	; 57
     c2c:	81 60       	ori	r24, 0x01	; 1
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <main+0x45e>
					}
		}else{
		    PORT_R &= ~(1<<R);
     c30:	95 98       	cbi	0x12, 5	; 18
			PORT_G &= ~(1<<G);
     c32:	96 98       	cbi	0x12, 6	; 18
			PORT_B &= ~(1<<B);
     c34:	97 98       	cbi	0x12, 7	; 18
			PORT_W &= ~(1<<W);
     c36:	c0 98       	cbi	0x18, 0	; 24
			TIMSK &=~ (1 << TOIE0);
     c38:	89 b7       	in	r24, 0x39	; 57
     c3a:	8e 7f       	andi	r24, 0xFE	; 254
     c3c:	89 bf       	out	0x39, r24	; 57
		}
		
		//Модификация данных если выключены настроки и изменяется значение
	    if((now_mode != MODE_NONE) && ((increment_mode == MODE_INC) || (increment_mode == MODE_DISINC)))
     c3e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     c42:	88 23       	and	r24, r24
     c44:	41 f0       	breq	.+16     	; 0xc56 <main+0x478>
     c46:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <increment_mode>
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	18 f4       	brcc	.+6      	; 0xc56 <main+0x478>
		{
				ModifyRTC();
     c50:	50 dc       	rcall	.-1888   	; 0x4f2 <ModifyRTC>
				increment_mode = MODE_NONE_INC;
     c52:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <increment_mode>
	    }
		
	    if((now_mode_led_menu != MODE_NONE) && ((increment_mode_led_menu == MODE_INC) || (increment_mode_led_menu == MODE_DISINC)))
     c56:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     c5a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     c5e:	89 2b       	or	r24, r25
     c60:	61 f0       	breq	.+24     	; 0xc7a <main+0x49c>
     c62:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <increment_mode_led_menu>
     c66:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <increment_mode_led_menu+0x1>
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	02 97       	sbiw	r24, 0x02	; 2
     c6e:	28 f4       	brcc	.+10     	; 0xc7a <main+0x49c>
	    {
				    ModifyLEDMenu();
     c70:	a0 dc       	rcall	.-1728   	; 0x5b2 <ModifyLEDMenu>
				    increment_mode_led_menu = MODE_NONE_INC;
     c72:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <increment_mode_led_menu+0x1>
     c76:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <increment_mode_led_menu>
	    }
				
		//Опрашиваем кнопки				
		BUT_Poll();
     c7a:	d0 da       	rcall	.-2656   	; 0x21c <BUT_Poll>
		button = BUT_GetBut(); 
     c7c:	92 da       	rcall	.-2780   	; 0x1a2 <BUT_GetBut>
     c7e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <button>
		if(button){
     c82:	88 23       	and	r24, r24
     c84:	09 f4       	brne	.+2      	; 0xc88 <main+0x4aa>
     c86:	05 c1       	rjmp	.+522    	; 0xe92 <main+0x6b4>
		    button_code = BUT_GetBut();  
     c88:	8c da       	rcall	.-2792   	; 0x1a2 <BUT_GetBut>
     c8a:	f8 2e       	mov	r15, r24
     c8c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <button_code>
			switch(button){
     c90:	e0 90 e3 00 	lds	r14, 0x00E3	; 0x8000e3 <button>
     c94:	e2 e0       	ldi	r30, 0x02	; 2
     c96:	de 2e       	mov	r13, r30
     c98:	ed 14       	cp	r14, r13
     c9a:	51 f1       	breq	.+84     	; 0xcf0 <main+0x512>
     c9c:	de 14       	cp	r13, r14
     c9e:	20 f0       	brcs	.+8      	; 0xca8 <main+0x4ca>
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	e2 16       	cp	r14, r18
     ca4:	69 f0       	breq	.+26     	; 0xcc0 <main+0x4e2>
     ca6:	f5 c0       	rjmp	.+490    	; 0xe92 <main+0x6b4>
     ca8:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     cac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     cb0:	a3 e0       	ldi	r26, 0x03	; 3
     cb2:	ea 16       	cp	r14, r26
     cb4:	a9 f1       	breq	.+106    	; 0xd20 <main+0x542>
     cb6:	b4 e0       	ldi	r27, 0x04	; 4
     cb8:	eb 16       	cp	r14, r27
     cba:	09 f4       	brne	.+2      	; 0xcbe <main+0x4e0>
     cbc:	64 c0       	rjmp	.+200    	; 0xd86 <main+0x5a8>
     cbe:	e9 c0       	rjmp	.+466    	; 0xe92 <main+0x6b4>
				//Plus
				case 1:   
				 if(button_code == BUT_RELEASED_EN){
     cc0:	cc 24       	eor	r12, r12
     cc2:	c3 94       	inc	r12
     cc4:	8c 11       	cpse	r24, r12
     cc6:	e5 c0       	rjmp	.+458    	; 0xe92 <main+0x6b4>
				  led_strob();
     cc8:	ec db       	rcall	.-2088   	; 0x4a2 <led_strob>
				  if(now_mode != MODE_NONE){
     cca:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     cce:	88 23       	and	r24, r24
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <main+0x4fa>
				   increment_mode = MODE_INC; 
     cd2:	f0 92 c1 00 	sts	0x00C1, r15	; 0x8000c1 <increment_mode>
     cd6:	dd c0       	rjmp	.+442    	; 0xe92 <main+0x6b4>
				  }else if(now_mode_led_menu != MODE_NONE){
     cd8:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     cdc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     ce0:	89 2b       	or	r24, r25
     ce2:	09 f4       	brne	.+2      	; 0xce6 <main+0x508>
     ce4:	dc c0       	rjmp	.+440    	; 0xe9e <main+0x6c0>
				   increment_mode_led_menu = MODE_INC;
     ce6:	90 92 be 00 	sts	0x00BE, r9	; 0x8000be <increment_mode_led_menu+0x1>
     cea:	80 92 bd 00 	sts	0x00BD, r8	; 0x8000bd <increment_mode_led_menu>
     cee:	d1 c0       	rjmp	.+418    	; 0xe92 <main+0x6b4>
				 }
				break;
			
				//Minus
				case 2: 
				 if(button_code == BUT_RELEASED_EN){
     cf0:	dd 24       	eor	r13, r13
     cf2:	d3 94       	inc	r13
     cf4:	8d 11       	cpse	r24, r13
     cf6:	cd c0       	rjmp	.+410    	; 0xe92 <main+0x6b4>
				  led_strob();
     cf8:	d4 db       	rcall	.-2136   	; 0x4a2 <led_strob>
				  if(now_mode != MODE_NONE){
     cfa:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     cfe:	88 23       	and	r24, r24
     d00:	19 f0       	breq	.+6      	; 0xd08 <main+0x52a>
				   increment_mode = MODE_DISINC;
     d02:	e0 92 c1 00 	sts	0x00C1, r14	; 0x8000c1 <increment_mode>
     d06:	c5 c0       	rjmp	.+394    	; 0xe92 <main+0x6b4>
				  }else if(now_mode_led_menu != MODE_NONE){
     d08:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     d0c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     d10:	89 2b       	or	r24, r25
     d12:	09 f4       	brne	.+2      	; 0xd16 <main+0x538>
     d14:	c4 c0       	rjmp	.+392    	; 0xe9e <main+0x6c0>
				   increment_mode_led_menu = MODE_DISINC;
     d16:	30 92 be 00 	sts	0x00BE, r3	; 0x8000be <increment_mode_led_menu+0x1>
     d1a:	20 92 bd 00 	sts	0x00BD, r2	; 0x8000bd <increment_mode_led_menu>
     d1e:	b9 c0       	rjmp	.+370    	; 0xe92 <main+0x6b4>
				 }
				break;
			
				//Okey
				case 3: 
				  if(now_mode_led_menu == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode == MODE_NONE) || (now_mode != MODE_NONE && button_code == BUT_RELEASED_EN))){ 
     d20:	89 2b       	or	r24, r25
     d22:	09 f0       	breq	.+2      	; 0xd26 <main+0x548>
     d24:	b6 c0       	rjmp	.+364    	; 0xe92 <main+0x6b4>
     d26:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     d2a:	74 e0       	ldi	r23, 0x04	; 4
     d2c:	e7 2e       	mov	r14, r23
     d2e:	fe 10       	cpse	r15, r14
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <main+0x558>
     d32:	88 23       	and	r24, r24
     d34:	31 f0       	breq	.+12     	; 0xd42 <main+0x564>
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <main+0x55e>
     d3a:	b1 c0       	rjmp	.+354    	; 0xe9e <main+0x6c0>
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	f2 12       	cpse	r15, r18
     d40:	ae c0       	rjmp	.+348    	; 0xe9e <main+0x6c0>
				   led_strob();
     d42:	af db       	rcall	.-2210   	; 0x4a2 <led_strob>
				   if(now_mode == MODE_NONE){
     d44:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     d48:	81 11       	cpse	r24, r1
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <main+0x57a>
					//Редактируем часы
					now_mode = MODE_EDIT_HOURS;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <now_mode>
                    ClearALLCharIndicator();
     d52:	a7 da       	rcall	.-2738   	; 0x2a2 <ClearALLCharIndicator>
                    ClearALLDotsIndicator();
     d54:	99 da       	rcall	.-2766   	; 0x288 <ClearALLDotsIndicator>
     d56:	9d c0       	rjmp	.+314    	; 0xe92 <main+0x6b4>
				   }else if(now_mode == MODE_EDIT_HOURS){
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <main+0x586>
					//Минуты
					now_mode = MODE_EDIT_MINUTES; 
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <now_mode>
     d62:	97 c0       	rjmp	.+302    	; 0xe92 <main+0x6b4>
				   }else if(now_mode == MODE_EDIT_MINUTES){
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	09 f0       	breq	.+2      	; 0xd6a <main+0x58c>
     d68:	94 c0       	rjmp	.+296    	; 0xe92 <main+0x6b4>
					I2C_StartCondition();
     d6a:	0d d2       	rcall	.+1050   	; 0x1186 <I2C_StartCondition>
					I2C_SendByte(0b11010000);
     d6c:	80 ed       	ldi	r24, 0xD0	; 208
     d6e:	27 d2       	rcall	.+1102   	; 0x11be <I2C_SendByte>
					I2C_SendByte(0);
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	25 d2       	rcall	.+1098   	; 0x11be <I2C_SendByte>
					I2C_SendByte(0);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	23 d2       	rcall	.+1094   	; 0x11be <I2C_SendByte>
					I2C_StopCondition();
     d78:	1f d2       	rcall	.+1086   	; 0x11b8 <I2C_StopCondition>
					ClearALLCharIndicator();
     d7a:	93 da       	rcall	.-2778   	; 0x2a2 <ClearALLCharIndicator>
					now_mode = MODE_NONE;
     d7c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <now_mode>
					increment_mode = MODE_NONE_INC;
     d80:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <increment_mode>
     d84:	86 c0       	rjmp	.+268    	; 0xe92 <main+0x6b4>
				   }
				  }
				break;
			
				case 4: 
				  if(now_mode == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode_led_menu == MODE_NONE) || (now_mode_led_menu != MODE_NONE && button_code == BUT_RELEASED_EN))){
     d86:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <now_mode>
     d8a:	21 11       	cpse	r18, r1
     d8c:	82 c0       	rjmp	.+260    	; 0xe92 <main+0x6b4>
     d8e:	a4 e0       	ldi	r26, 0x04	; 4
     d90:	fa 12       	cpse	r15, r26
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <main+0x5ba>
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	31 f0       	breq	.+12     	; 0xda4 <main+0x5c6>
     d98:	89 2b       	or	r24, r25
     d9a:	09 f4       	brne	.+2      	; 0xd9e <main+0x5c0>
     d9c:	80 c0       	rjmp	.+256    	; 0xe9e <main+0x6c0>
     d9e:	b1 e0       	ldi	r27, 0x01	; 1
     da0:	fb 12       	cpse	r15, r27
     da2:	77 c0       	rjmp	.+238    	; 0xe92 <main+0x6b4>
						  led_strob();
     da4:	7e db       	rcall	.-2308   	; 0x4a2 <led_strob>
						  if(now_mode_led_menu == MODE_NONE){
     da6:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     daa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	31 f4       	brne	.+12     	; 0xdbe <main+0x5e0>
							//Часы начала рассвета
							ClearALLCharIndicator();
     db2:	77 da       	rcall	.-2834   	; 0x2a2 <ClearALLCharIndicator>
							ClearALLDotsIndicator();
     db4:	69 da       	rcall	.-2862   	; 0x288 <ClearALLDotsIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
     db6:	67 e0       	ldi	r22, 0x07	; 7
     db8:	c6 2e       	mov	r12, r22
     dba:	d1 2c       	mov	r13, r1
     dbc:	53 c0       	rjmp	.+166    	; 0xe64 <main+0x686>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_HOURS){
     dbe:	87 30       	cpi	r24, 0x07	; 7
     dc0:	91 05       	cpc	r25, r1
     dc2:	79 f4       	brne	.+30     	; 0xde2 <main+0x604>
							eeprom_write_word(&ee_led_menu_dawn_hours , led_menu_dawn_hours);
     dc4:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     dc8:	70 91 ce 00 	lds	r23, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	f3 d2       	rcall	.+1510   	; 0x13b8 <eeprom_write_word>
							//Минуты начала рассвета
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_MINS;
     dd2:	58 e0       	ldi	r21, 0x08	; 8
     dd4:	e5 2e       	mov	r14, r21
     dd6:	f1 2c       	mov	r15, r1
     dd8:	f0 92 c0 00 	sts	0x00C0, r15	; 0x8000c0 <now_mode_led_menu+0x1>
     ddc:	e0 92 bf 00 	sts	0x00BF, r14	; 0x8000bf <now_mode_led_menu>
     de0:	58 c0       	rjmp	.+176    	; 0xe92 <main+0x6b4>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_MINS){
     de2:	88 30       	cpi	r24, 0x08	; 8
     de4:	91 05       	cpc	r25, r1
     de6:	79 f4       	brne	.+30     	; 0xe06 <main+0x628>
							eeprom_write_word(&ee_led_menu_dawn_mins, led_menu_dawn_mins);
     de8:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     dec:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	e1 d2       	rcall	.+1474   	; 0x13b8 <eeprom_write_word>
							//Длительность рассвета
							ClearALLCharIndicator();
     df6:	55 da       	rcall	.-2902   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_INTERVAL_DAWN;
     df8:	89 e0       	ldi	r24, 0x09	; 9
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <now_mode_led_menu+0x1>
     e00:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <now_mode_led_menu>
     e04:	46 c0       	rjmp	.+140    	; 0xe92 <main+0x6b4>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_DAWN){
     e06:	89 30       	cpi	r24, 0x09	; 9
     e08:	91 05       	cpc	r25, r1
     e0a:	69 f4       	brne	.+26     	; 0xe26 <main+0x648>
							  eeprom_write_word(&ee_led_menu_dawn_interval_mins, led_menu_dawn_interval_mins);
     e0c:	60 91 c9 00 	lds	r22, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     e10:	70 91 ca 00 	lds	r23, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     e14:	86 e0       	ldi	r24, 0x06	; 6
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	cf d2       	rcall	.+1438   	; 0x13b8 <eeprom_write_word>
							//Часы начала заката
							ClearALLCharIndicator();
     e1a:	43 da       	rcall	.-2938   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_HOURS;
     e1c:	d0 93 c0 00 	sts	0x00C0, r29	; 0x8000c0 <now_mode_led_menu+0x1>
     e20:	c0 93 bf 00 	sts	0x00BF, r28	; 0x8000bf <now_mode_led_menu>
     e24:	36 c0       	rjmp	.+108    	; 0xe92 <main+0x6b4>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_HOURS){
     e26:	8a 30       	cpi	r24, 0x0A	; 10
     e28:	91 05       	cpc	r25, r1
     e2a:	71 f4       	brne	.+28     	; 0xe48 <main+0x66a>
							 eeprom_write_word(&ee_led_menu_sunset_hours, led_menu_sunset_hours);
     e2c:	60 91 c7 00 	lds	r22, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     e30:	70 91 c8 00 	lds	r23, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	bf d2       	rcall	.+1406   	; 0x13b8 <eeprom_write_word>
							 //Минуты начала заката
							 now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_MINS;
     e3a:	ab e0       	ldi	r26, 0x0B	; 11
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	b0 93 c0 00 	sts	0x00C0, r27	; 0x8000c0 <now_mode_led_menu+0x1>
     e42:	a0 93 bf 00 	sts	0x00BF, r26	; 0x8000bf <now_mode_led_menu>
     e46:	25 c0       	rjmp	.+74     	; 0xe92 <main+0x6b4>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_MINS){
     e48:	8b 30       	cpi	r24, 0x0B	; 11
     e4a:	91 05       	cpc	r25, r1
     e4c:	81 f4       	brne	.+32     	; 0xe6e <main+0x690>
							 eeprom_write_word(&ee_led_menu_sunset_mins, led_menu_sunset_mins);
     e4e:	60 91 c5 00 	lds	r22, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
     e52:	70 91 c6 00 	lds	r23, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	ae d2       	rcall	.+1372   	; 0x13b8 <eeprom_write_word>
							 //Длительность заката
							 ClearALLCharIndicator();
     e5c:	22 da       	rcall	.-3004   	; 0x2a2 <ClearALLCharIndicator>
							 now_mode_led_menu = MODE_EDIT_INTERVAL_SUNSET;
     e5e:	4c e0       	ldi	r20, 0x0C	; 12
     e60:	c4 2e       	mov	r12, r20
     e62:	d1 2c       	mov	r13, r1
     e64:	d0 92 c0 00 	sts	0x00C0, r13	; 0x8000c0 <now_mode_led_menu+0x1>
     e68:	c0 92 bf 00 	sts	0x00BF, r12	; 0x8000bf <now_mode_led_menu>
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <main+0x6b4>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_SUNSET){
     e6e:	0c 97       	sbiw	r24, 0x0c	; 12
     e70:	81 f4       	brne	.+32     	; 0xe92 <main+0x6b4>
							eeprom_write_word(&ee_led_menu_sunset_interval_mins, led_menu_sunset_interval_mins);
     e72:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
     e76:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9c d2       	rcall	.+1336   	; 0x13b8 <eeprom_write_word>
							ClearALLCharIndicator();
     e80:	10 da       	rcall	.-3040   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_NONE;
     e82:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <now_mode_led_menu+0x1>
     e86:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <now_mode_led_menu>
							increment_mode_led_menu = MODE_NONE_INC;
     e8a:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <increment_mode_led_menu+0x1>
     e8e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <increment_mode_led_menu>
			}
		}

        //Вывод текущего режима, если мы не в меню
		
        if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     e92:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     e96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	49 f5       	brne	.+82     	; 0xef0 <main+0x712>
     e9e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
     ea2:	81 11       	cpse	r24, r1
     ea4:	0c c1       	rjmp	.+536    	; 0x10be <main+0x8e0>
			ShowTime(hour, min);
     ea6:	60 91 dc 00 	lds	r22, 0x00DC	; 0x8000dc <min>
     eaa:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
     eae:	7e dc       	rcall	.-1796   	; 0x7ac <ShowTime>
			setDotIndicator(2, (PINC & (1 << PC3)));
     eb0:	63 b3       	in	r22, 0x13	; 19
     eb2:	68 70       	andi	r22, 0x08	; 8
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	e2 d9       	rcall	.-3132   	; 0x27c <setDotIndicator>
			if(now_mode_light == LIGHT_DAWM){
     eb8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <now_mode_light>
     ebc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <now_mode_light+0x1>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	31 f4       	brne	.+12     	; 0xed2 <main+0x6f4>
				setCharIndicator(18, 0);
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	82 e1       	ldi	r24, 0x12	; 18
     eca:	d2 d9       	rcall	.-3164   	; 0x270 <setCharIndicator>
				setCharIndicator(18, 5);
     ecc:	65 e0       	ldi	r22, 0x05	; 5
     ece:	82 e1       	ldi	r24, 0x12	; 18
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <main+0x702>
			}else if(now_mode_light == LIGHT_SUNSET){
     ed2:	02 97       	sbiw	r24, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <main+0x704>
				setCharIndicator(19, 0);
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	83 e1       	ldi	r24, 0x13	; 19
     eda:	ca d9       	rcall	.-3180   	; 0x270 <setCharIndicator>
				setCharIndicator(19, 5);
     edc:	65 e0       	ldi	r22, 0x05	; 5
     ede:	83 e1       	ldi	r24, 0x13	; 19
     ee0:	c7 d9       	rcall	.-3186   	; 0x270 <setCharIndicator>
			}

        }
		
		if(now_mode_led_menu){
     ee2:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <now_mode_led_menu>
     ee6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <now_mode_led_menu+0x1>
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	09 f4       	brne	.+2      	; 0xef0 <main+0x712>
     eee:	e7 c0       	rjmp	.+462    	; 0x10be <main+0x8e0>
			//Меню настроки заката/рассвета
			switch(now_mode_led_menu){
     ef0:	89 30       	cpi	r24, 0x09	; 9
     ef2:	91 05       	cpc	r25, r1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <main+0x71a>
     ef6:	6c c0       	rjmp	.+216    	; 0xfd0 <main+0x7f2>
     ef8:	30 f4       	brcc	.+12     	; 0xf06 <main+0x728>
     efa:	87 30       	cpi	r24, 0x07	; 7
     efc:	91 05       	cpc	r25, r1
     efe:	69 f0       	breq	.+26     	; 0xf1a <main+0x73c>
     f00:	08 97       	sbiw	r24, 0x08	; 8
     f02:	a1 f1       	breq	.+104    	; 0xf6c <main+0x78e>
     f04:	dc c0       	rjmp	.+440    	; 0x10be <main+0x8e0>
     f06:	8b 30       	cpi	r24, 0x0B	; 11
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <main+0x730>
     f0c:	45 c0       	rjmp	.+138    	; 0xf98 <main+0x7ba>
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <main+0x734>
     f10:	85 c0       	rjmp	.+266    	; 0x101c <main+0x83e>
     f12:	0c 97       	sbiw	r24, 0x0c	; 12
     f14:	09 f4       	brne	.+2      	; 0xf18 <main+0x73a>
     f16:	ae c0       	rjmp	.+348    	; 0x1074 <main+0x896>
     f18:	d2 c0       	rjmp	.+420    	; 0x10be <main+0x8e0>
				case MODE_EDIT_START_TIME_DAWN_HOURS: 
				  if(!twoHZ_status){
     f1a:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
     f1e:	81 11       	cpse	r24, r1
     f20:	11 c0       	rjmp	.+34     	; 0xf44 <main+0x766>
					   setCharIndicator(led_menu_dawn_hours/10, 1);
     f22:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     f26:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     f2a:	be 01       	movw	r22, r28
     f2c:	c5 d1       	rcall	.+906    	; 0x12b8 <__udivmodhi4>
     f2e:	86 2f       	mov	r24, r22
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	9e d9       	rcall	.-3268   	; 0x270 <setCharIndicator>
					   setCharIndicator(led_menu_dawn_hours%10, 2);
     f34:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     f38:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     f3c:	be 01       	movw	r22, r28
     f3e:	bc d1       	rcall	.+888    	; 0x12b8 <__udivmodhi4>
     f40:	62 e0       	ldi	r22, 0x02	; 2
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <main+0x770>
					   }else{
					   setCharIndicator(11, 1);
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	8b e0       	ldi	r24, 0x0B	; 11
     f48:	93 d9       	rcall	.-3290   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 2);
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	8b e0       	ldi	r24, 0x0B	; 11
     f4e:	90 d9       	rcall	.-3296   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(led_menu_dawn_mins/10, 3);
     f50:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     f54:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     f58:	be 01       	movw	r22, r28
     f5a:	ae d1       	rcall	.+860    	; 0x12b8 <__udivmodhi4>
     f5c:	86 2f       	mov	r24, r22
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	87 d9       	rcall	.-3314   	; 0x270 <setCharIndicator>
				   setCharIndicator(led_menu_dawn_mins%10, 4);				
     f62:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <led_menu_dawn_mins>
     f66:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <led_menu_dawn_mins+0x1>
     f6a:	80 c0       	rjmp	.+256    	; 0x106c <main+0x88e>
				break;

				case MODE_EDIT_START_TIME_DAWN_MINS: 
				  setCharIndicator(led_menu_dawn_hours/10, 1);
     f6c:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     f70:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     f74:	be 01       	movw	r22, r28
     f76:	a0 d1       	rcall	.+832    	; 0x12b8 <__udivmodhi4>
     f78:	86 2f       	mov	r24, r22
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	79 d9       	rcall	.-3342   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
     f7e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <led_menu_dawn_hours>
     f82:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <led_menu_dawn_hours+0x1>
     f86:	be 01       	movw	r22, r28
     f88:	97 d1       	rcall	.+814    	; 0x12b8 <__udivmodhi4>
     f8a:	62 e0       	ldi	r22, 0x02	; 2
     f8c:	71 d9       	rcall	.-3358   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     f8e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
     f92:	81 11       	cpse	r24, r1
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <main+0x7e6>
     f96:	dc cf       	rjmp	.-72     	; 0xf50 <main+0x772>
				  setCharIndicator(led_menu_sunset_mins%10, 4);				
				break;
			
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
     f98:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     f9c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     fa0:	be 01       	movw	r22, r28
     fa2:	8a d1       	rcall	.+788    	; 0x12b8 <__udivmodhi4>
     fa4:	86 2f       	mov	r24, r22
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	63 d9       	rcall	.-3386   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_sunset_hours%10, 2);
     faa:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
     fae:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
     fb2:	be 01       	movw	r22, r28
     fb4:	81 d1       	rcall	.+770    	; 0x12b8 <__udivmodhi4>
     fb6:	62 e0       	ldi	r22, 0x02	; 2
     fb8:	5b d9       	rcall	.-3402   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     fba:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <main+0x7e6>
     fc2:	47 c0       	rjmp	.+142    	; 0x1052 <main+0x874>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
				  if(!twoHZ_status){
					   setCharIndicator(led_menu_dawn_mins/10, 3);
					   setCharIndicator(led_menu_dawn_mins%10, 4);
				  }else{
					   setCharIndicator(11, 3);
     fc4:	63 e0       	ldi	r22, 0x03	; 3
     fc6:	8b e0       	ldi	r24, 0x0B	; 11
     fc8:	53 d9       	rcall	.-3418   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 4);
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	8b e0       	ldi	r24, 0x0B	; 11
     fce:	76 c0       	rjmp	.+236    	; 0x10bc <main+0x8de>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
     fd0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
     fd4:	81 11       	cpse	r24, r1
     fd6:	19 c0       	rjmp	.+50     	; 0x100a <main+0x82c>
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     fd8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     fdc:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     fe0:	b8 01       	movw	r22, r16
     fe2:	6a d1       	rcall	.+724    	; 0x12b8 <__udivmodhi4>
     fe4:	86 2f       	mov	r24, r22
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	43 d9       	rcall	.-3450   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_dawn_interval_mins%100)/10, 2);
     fea:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
     fee:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
     ff2:	b8 01       	movw	r22, r16
     ff4:	61 d1       	rcall	.+706    	; 0x12b8 <__udivmodhi4>
     ff6:	be 01       	movw	r22, r28
     ff8:	5f d1       	rcall	.+702    	; 0x12b8 <__udivmodhi4>
     ffa:	86 2f       	mov	r24, r22
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	38 d9       	rcall	.-3472   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_dawn_interval_mins%100%10, 3);
    1000:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <led_menu_dawn_interval_mins>
    1004:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <led_menu_dawn_interval_mins+0x1>
    1008:	51 c0       	rjmp	.+162    	; 0x10ac <main+0x8ce>
					  setCharIndicator(13, 4);
				  }else{
					  setCharIndicator(11, 1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	8b e0       	ldi	r24, 0x0B	; 11
    100e:	30 d9       	rcall	.-3488   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	8b e0       	ldi	r24, 0x0B	; 11
    1014:	2d d9       	rcall	.-3494   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 3);
    1016:	63 e0       	ldi	r22, 0x03	; 3
    1018:	8b e0       	ldi	r24, 0x0B	; 11
    101a:	4d c0       	rjmp	.+154    	; 0x10b6 <main+0x8d8>
				  }

				break;
			
				case MODE_EDIT_START_TIME_SUNSET_HOURS:
				  if(!twoHZ_status){
    101c:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
    1020:	81 11       	cpse	r24, r1
    1022:	11 c0       	rjmp	.+34     	; 0x1046 <main+0x868>
					  setCharIndicator(led_menu_sunset_hours/10, 1);
    1024:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
    1028:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
    102c:	be 01       	movw	r22, r28
    102e:	44 d1       	rcall	.+648    	; 0x12b8 <__udivmodhi4>
    1030:	86 2f       	mov	r24, r22
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	1d d9       	rcall	.-3526   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_hours%10, 2);
    1036:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <led_menu_sunset_hours>
    103a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <led_menu_sunset_hours+0x1>
    103e:	be 01       	movw	r22, r28
    1040:	3b d1       	rcall	.+630    	; 0x12b8 <__udivmodhi4>
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <main+0x872>
					  }else{
					  setCharIndicator(11, 1);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	8b e0       	ldi	r24, 0x0B	; 11
    104a:	12 d9       	rcall	.-3548   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	8b e0       	ldi	r24, 0x0B	; 11
    1050:	0f d9       	rcall	.-3554   	; 0x270 <setCharIndicator>
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
				  setCharIndicator(led_menu_sunset_hours%10, 2);
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_sunset_mins/10, 3);
    1052:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
    1056:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
    105a:	be 01       	movw	r22, r28
    105c:	2d d1       	rcall	.+602    	; 0x12b8 <__udivmodhi4>
    105e:	86 2f       	mov	r24, r22
    1060:	63 e0       	ldi	r22, 0x03	; 3
    1062:	06 d9       	rcall	.-3572   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_mins%10, 4);
    1064:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <led_menu_sunset_mins>
    1068:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <led_menu_sunset_mins+0x1>
    106c:	be 01       	movw	r22, r28
    106e:	24 d1       	rcall	.+584    	; 0x12b8 <__udivmodhi4>
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	24 c0       	rjmp	.+72     	; 0x10bc <main+0x8de>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_SUNSET: 		  
				  if(!twoHZ_status){
    1074:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
    1078:	81 11       	cpse	r24, r1
    107a:	c7 cf       	rjmp	.-114    	; 0x100a <main+0x82c>
					  setCharIndicator(led_menu_sunset_interval_mins/100, 1);
    107c:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
    1080:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
    1084:	b8 01       	movw	r22, r16
    1086:	18 d1       	rcall	.+560    	; 0x12b8 <__udivmodhi4>
    1088:	86 2f       	mov	r24, r22
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	f1 d8       	rcall	.-3614   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_sunset_interval_mins%100)/10, 2);
    108e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
    1092:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
    1096:	b8 01       	movw	r22, r16
    1098:	0f d1       	rcall	.+542    	; 0x12b8 <__udivmodhi4>
    109a:	be 01       	movw	r22, r28
    109c:	0d d1       	rcall	.+538    	; 0x12b8 <__udivmodhi4>
    109e:	86 2f       	mov	r24, r22
    10a0:	62 e0       	ldi	r22, 0x02	; 2
    10a2:	e6 d8       	rcall	.-3636   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_interval_mins%100%10, 3);
    10a4:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <led_menu_sunset_interval_mins>
    10a8:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <led_menu_sunset_interval_mins+0x1>
    10ac:	b8 01       	movw	r22, r16
    10ae:	04 d1       	rcall	.+520    	; 0x12b8 <__udivmodhi4>
    10b0:	be 01       	movw	r22, r28
    10b2:	02 d1       	rcall	.+516    	; 0x12b8 <__udivmodhi4>
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	dc d8       	rcall	.-3656   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
    10b8:	64 e0       	ldi	r22, 0x04	; 4
    10ba:	8d e0       	ldi	r24, 0x0D	; 13
    10bc:	d9 d8       	rcall	.-3662   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
				  }				break;
			
			}
		}
		if(now_mode){
    10be:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <now_mode>
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <main+0x8ea>
    10c6:	42 cc       	rjmp	.-1916   	; 0x94c <main+0x16e>
			//Меню настроки часов
			switch(now_mode){
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <main+0x8f4>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	f9 f0       	breq	.+62     	; 0x110e <main+0x930>
    10d0:	3d cc       	rjmp	.-1926   	; 0x94c <main+0x16e>
				case MODE_EDIT_HOURS: //часы
				   if(!twoHZ_status){
    10d2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
    10d6:	81 11       	cpse	r24, r1
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <main+0x91a>
				    setCharIndicator(hour/10, 1);
    10da:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
    10de:	3a e0       	ldi	r19, 0x0A	; 10
    10e0:	f3 2e       	mov	r15, r19
    10e2:	6f 2d       	mov	r22, r15
    10e4:	dd d0       	rcall	.+442    	; 0x12a0 <__udivmodqi4>
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	c3 d8       	rcall	.-3706   	; 0x270 <setCharIndicator>
				    setCharIndicator(hour%10, 2);
    10ea:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
    10ee:	6f 2d       	mov	r22, r15
    10f0:	d7 d0       	rcall	.+430    	; 0x12a0 <__udivmodqi4>
    10f2:	89 2f       	mov	r24, r25
    10f4:	62 e0       	ldi	r22, 0x02	; 2
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <main+0x924>
				   }else{
					setCharIndicator(11, 1);
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	8b e0       	ldi	r24, 0x0B	; 11
    10fc:	b9 d8       	rcall	.-3726   	; 0x270 <setCharIndicator>
					setCharIndicator(11, 2);				   
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	8b e0       	ldi	r24, 0x0B	; 11
    1102:	b6 d8       	rcall	.-3732   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(min/10, 3);
    1104:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
    1108:	2a e0       	ldi	r18, 0x0A	; 10
    110a:	f2 2e       	mov	r15, r18
    110c:	15 c0       	rjmp	.+42     	; 0x1138 <main+0x95a>
				   setCharIndicator(min%10, 4);
				break;

				case MODE_EDIT_MINUTES: // минуты
				   setCharIndicator(hour/10, 1);
    110e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
    1112:	9a e0       	ldi	r25, 0x0A	; 10
    1114:	f9 2e       	mov	r15, r25
    1116:	6f 2d       	mov	r22, r15
    1118:	c3 d0       	rcall	.+390    	; 0x12a0 <__udivmodqi4>
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	a9 d8       	rcall	.-3758   	; 0x270 <setCharIndicator>
				   setCharIndicator(hour%10, 2);
    111e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <hour>
    1122:	6f 2d       	mov	r22, r15
    1124:	bd d0       	rcall	.+378    	; 0x12a0 <__udivmodqi4>
    1126:	89 2f       	mov	r24, r25
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	a2 d8       	rcall	.-3772   	; 0x270 <setCharIndicator>
				   if(!twoHZ_status){
    112c:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <twoHZ_status>
    1130:	81 11       	cpse	r24, r1
    1132:	0d c0       	rjmp	.+26     	; 0x114e <main+0x970>
					  setCharIndicator(min/10, 3);
    1134:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
    1138:	6f 2d       	mov	r22, r15
    113a:	b2 d0       	rcall	.+356    	; 0x12a0 <__udivmodqi4>
    113c:	63 e0       	ldi	r22, 0x03	; 3
    113e:	98 d8       	rcall	.-3792   	; 0x270 <setCharIndicator>
					  setCharIndicator(min%10, 4);
    1140:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <min>
    1144:	6f 2d       	mov	r22, r15
    1146:	ac d0       	rcall	.+344    	; 0x12a0 <__udivmodqi4>
    1148:	89 2f       	mov	r24, r25
    114a:	64 e0       	ldi	r22, 0x04	; 4
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <main+0x97a>
				   }else{
					  setCharIndicator(11, 3);
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	8b e0       	ldi	r24, 0x0B	; 11
    1152:	8e d8       	rcall	.-3812   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 4);
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	8b d8       	rcall	.-3818   	; 0x270 <setCharIndicator>
    115a:	f8 cb       	rjmp	.-2064   	; 0x94c <main+0x16e>

0000115c <RTC_ConvertFromDec>:
﻿#include "RTC.h"

unsigned char RTC_ConvertFromDec(unsigned char c)
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c));
    115c:	98 2f       	mov	r25, r24
    115e:	92 95       	swap	r25
    1160:	9f 70       	andi	r25, 0x0F	; 15
    1162:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
    1164:	2a e0       	ldi	r18, 0x0A	; 10
    1166:	92 9f       	mul	r25, r18
    1168:	80 0d       	add	r24, r0
    116a:	11 24       	eor	r1, r1
    116c:	08 95       	ret

0000116e <RTC_ConvertFromBinDec>:

unsigned char RTC_ConvertFromBinDec(unsigned char c)
{
	unsigned char ch = ((c/10)<<4)|(c%10);
    116e:	6a e0       	ldi	r22, 0x0A	; 10
    1170:	97 d0       	rcall	.+302    	; 0x12a0 <__udivmodqi4>
    1172:	29 2f       	mov	r18, r25
    1174:	30 e1       	ldi	r19, 0x10	; 16
    1176:	83 9f       	mul	r24, r19
    1178:	c0 01       	movw	r24, r0
    117a:	11 24       	eor	r1, r1
	return ch;
    117c:	82 2b       	or	r24, r18
    117e:	08 95       	ret

00001180 <I2C_Init>:
	}                         \
}                             \

void I2C_Init (void)
{
	TWBR=0x20;//скорость передачи (при 8 мгц получается 100 кгц, что и необходимо для общения с ds1307)
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	80 b9       	out	0x00, r24	; 0
    1184:	08 95       	ret

00001186 <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1186:	84 ea       	ldi	r24, 0xA4	; 164
    1188:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//подождем пока установится TWIN
    118a:	8a e0       	ldi	r24, 0x0A	; 10
    118c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <i2c_error_counter>
    1190:	06 b6       	in	r0, 0x36	; 54
    1192:	07 fc       	sbrc	r0, 7
    1194:	10 c0       	rjmp	.+32     	; 0x11b6 <I2C_StartCondition+0x30>
    1196:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
    119a:	81 11       	cpse	r24, r1
    119c:	f9 cf       	rjmp	.-14     	; 0x1190 <I2C_StartCondition+0xa>
    119e:	28 e0       	ldi	r18, 0x08	; 8
    11a0:	88 e1       	ldi	r24, 0x18	; 24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	a8 95       	wdr
    11aa:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    11b4:	ff cf       	rjmp	.-2      	; 0x11b4 <I2C_StartCondition+0x2e>
}
    11b6:	08 95       	ret

000011b8 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    11b8:	84 e9       	ldi	r24, 0x94	; 148
    11ba:	86 bf       	out	0x36, r24	; 54
    11bc:	08 95       	ret

000011be <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
    11be:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
    11c0:	84 e8       	ldi	r24, 0x84	; 132
    11c2:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//подождем пока установится TWIN
    11c4:	8a e0       	ldi	r24, 0x0A	; 10
    11c6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <i2c_error_counter>
    11ca:	06 b6       	in	r0, 0x36	; 54
    11cc:	07 fc       	sbrc	r0, 7
    11ce:	10 c0       	rjmp	.+32     	; 0x11f0 <I2C_SendByte+0x32>
    11d0:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
    11d4:	81 11       	cpse	r24, r1
    11d6:	f9 cf       	rjmp	.-14     	; 0x11ca <I2C_SendByte+0xc>
    11d8:	28 e0       	ldi	r18, 0x08	; 8
    11da:	88 e1       	ldi	r24, 0x18	; 24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	a8 95       	wdr
    11e4:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <I2C_SendByte+0x30>
}
    11f0:	08 95       	ret

000011f2 <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	1f 92       	push	r1
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	18 2f       	mov	r17, r24
	I2C_StartCondition(); // Отправим условие START
    1200:	69 83       	std	Y+1, r22	; 0x01
    1202:	c1 df       	rcall	.-126    	; 0x1186 <I2C_StartCondition>
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	db df       	rcall	.-74     	; 0x11be <I2C_SendByte>
	I2C_SendByte(c);// Отправим байт данных
    1208:	81 2f       	mov	r24, r17
    120a:	d9 df       	rcall	.-78     	; 0x11be <I2C_SendByte>
	TWI_WHILE;//подождем пока установится TWIN
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    120c:	84 e9       	ldi	r24, 0x94	; 148
    120e:	86 bf       	out	0x36, r24	; 54
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	08 95       	ret

0000121a <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    121a:	84 ec       	ldi	r24, 0xC4	; 196
    121c:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//ожидание установки бита TWIN
    121e:	8a e0       	ldi	r24, 0x0A	; 10
    1220:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <i2c_error_counter>
    1224:	06 b6       	in	r0, 0x36	; 54
    1226:	07 fc       	sbrc	r0, 7
    1228:	10 c0       	rjmp	.+32     	; 0x124a <I2C_ReadByte+0x30>
    122a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
    122e:	81 11       	cpse	r24, r1
    1230:	f9 cf       	rjmp	.-14     	; 0x1224 <I2C_ReadByte+0xa>
    1232:	28 e0       	ldi	r18, 0x08	; 8
    1234:	88 e1       	ldi	r24, 0x18	; 24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	a8 95       	wdr
    123e:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    1248:	ff cf       	rjmp	.-2      	; 0x1248 <I2C_ReadByte+0x2e>
	return TWDR;//читаем регистр данных
    124a:	83 b1       	in	r24, 0x03	; 3
}
    124c:	08 95       	ret

0000124e <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    124e:	84 e8       	ldi	r24, 0x84	; 132
    1250:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//ожидание установки бита TWIN
    1252:	8a e0       	ldi	r24, 0x0A	; 10
    1254:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <i2c_error_counter>
    1258:	06 b6       	in	r0, 0x36	; 54
    125a:	07 fc       	sbrc	r0, 7
    125c:	10 c0       	rjmp	.+32     	; 0x127e <I2C_ReadLastByte+0x30>
    125e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <i2c_error_counter>
    1262:	81 11       	cpse	r24, r1
    1264:	f9 cf       	rjmp	.-14     	; 0x1258 <I2C_ReadLastByte+0xa>
    1266:	28 e0       	ldi	r18, 0x08	; 8
    1268:	88 e1       	ldi	r24, 0x18	; 24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	a8 95       	wdr
    1272:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
    127c:	ff cf       	rjmp	.-2      	; 0x127c <I2C_ReadLastByte+0x2e>
	return TWDR;//читаем регистр данных
    127e:	83 b1       	in	r24, 0x03	; 3
    1280:	08 95       	ret

00001282 <__mulsi3>:
    1282:	db 01       	movw	r26, r22
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	88 d0       	rcall	.+272    	; 0x139a <__muluhisi3>
    128a:	bf 91       	pop	r27
    128c:	af 91       	pop	r26
    128e:	a2 9f       	mul	r26, r18
    1290:	80 0d       	add	r24, r0
    1292:	91 1d       	adc	r25, r1
    1294:	a3 9f       	mul	r26, r19
    1296:	90 0d       	add	r25, r0
    1298:	b2 9f       	mul	r27, r18
    129a:	90 0d       	add	r25, r0
    129c:	11 24       	eor	r1, r1
    129e:	08 95       	ret

000012a0 <__udivmodqi4>:
    12a0:	99 1b       	sub	r25, r25
    12a2:	79 e0       	ldi	r23, 0x09	; 9
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <__udivmodqi4_ep>

000012a6 <__udivmodqi4_loop>:
    12a6:	99 1f       	adc	r25, r25
    12a8:	96 17       	cp	r25, r22
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__udivmodqi4_ep>
    12ac:	96 1b       	sub	r25, r22

000012ae <__udivmodqi4_ep>:
    12ae:	88 1f       	adc	r24, r24
    12b0:	7a 95       	dec	r23
    12b2:	c9 f7       	brne	.-14     	; 0x12a6 <__udivmodqi4_loop>
    12b4:	80 95       	com	r24
    12b6:	08 95       	ret

000012b8 <__udivmodhi4>:
    12b8:	aa 1b       	sub	r26, r26
    12ba:	bb 1b       	sub	r27, r27
    12bc:	51 e1       	ldi	r21, 0x11	; 17
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <__udivmodhi4_ep>

000012c0 <__udivmodhi4_loop>:
    12c0:	aa 1f       	adc	r26, r26
    12c2:	bb 1f       	adc	r27, r27
    12c4:	a6 17       	cp	r26, r22
    12c6:	b7 07       	cpc	r27, r23
    12c8:	10 f0       	brcs	.+4      	; 0x12ce <__udivmodhi4_ep>
    12ca:	a6 1b       	sub	r26, r22
    12cc:	b7 0b       	sbc	r27, r23

000012ce <__udivmodhi4_ep>:
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	5a 95       	dec	r21
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__udivmodhi4_loop>
    12d6:	80 95       	com	r24
    12d8:	90 95       	com	r25
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	08 95       	ret

000012e0 <__divmodhi4>:
    12e0:	97 fb       	bst	r25, 7
    12e2:	07 2e       	mov	r0, r23
    12e4:	16 f4       	brtc	.+4      	; 0x12ea <__divmodhi4+0xa>
    12e6:	00 94       	com	r0
    12e8:	06 d0       	rcall	.+12     	; 0x12f6 <__divmodhi4_neg1>
    12ea:	77 fd       	sbrc	r23, 7
    12ec:	08 d0       	rcall	.+16     	; 0x12fe <__divmodhi4_neg2>
    12ee:	e4 df       	rcall	.-56     	; 0x12b8 <__udivmodhi4>
    12f0:	07 fc       	sbrc	r0, 7
    12f2:	05 d0       	rcall	.+10     	; 0x12fe <__divmodhi4_neg2>
    12f4:	3e f4       	brtc	.+14     	; 0x1304 <__divmodhi4_exit>

000012f6 <__divmodhi4_neg1>:
    12f6:	90 95       	com	r25
    12f8:	81 95       	neg	r24
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	08 95       	ret

000012fe <__divmodhi4_neg2>:
    12fe:	70 95       	com	r23
    1300:	61 95       	neg	r22
    1302:	7f 4f       	sbci	r23, 0xFF	; 255

00001304 <__divmodhi4_exit>:
    1304:	08 95       	ret

00001306 <__udivmodsi4>:
    1306:	a1 e2       	ldi	r26, 0x21	; 33
    1308:	1a 2e       	mov	r1, r26
    130a:	aa 1b       	sub	r26, r26
    130c:	bb 1b       	sub	r27, r27
    130e:	fd 01       	movw	r30, r26
    1310:	0d c0       	rjmp	.+26     	; 0x132c <__udivmodsi4_ep>

00001312 <__udivmodsi4_loop>:
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	ee 1f       	adc	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	a2 17       	cp	r26, r18
    131c:	b3 07       	cpc	r27, r19
    131e:	e4 07       	cpc	r30, r20
    1320:	f5 07       	cpc	r31, r21
    1322:	20 f0       	brcs	.+8      	; 0x132c <__udivmodsi4_ep>
    1324:	a2 1b       	sub	r26, r18
    1326:	b3 0b       	sbc	r27, r19
    1328:	e4 0b       	sbc	r30, r20
    132a:	f5 0b       	sbc	r31, r21

0000132c <__udivmodsi4_ep>:
    132c:	66 1f       	adc	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	1a 94       	dec	r1
    1336:	69 f7       	brne	.-38     	; 0x1312 <__udivmodsi4_loop>
    1338:	60 95       	com	r22
    133a:	70 95       	com	r23
    133c:	80 95       	com	r24
    133e:	90 95       	com	r25
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	bd 01       	movw	r22, r26
    1346:	cf 01       	movw	r24, r30
    1348:	08 95       	ret

0000134a <__divmodsi4>:
    134a:	05 2e       	mov	r0, r21
    134c:	97 fb       	bst	r25, 7
    134e:	16 f4       	brtc	.+4      	; 0x1354 <__divmodsi4+0xa>
    1350:	00 94       	com	r0
    1352:	0f d0       	rcall	.+30     	; 0x1372 <__negsi2>
    1354:	57 fd       	sbrc	r21, 7
    1356:	05 d0       	rcall	.+10     	; 0x1362 <__divmodsi4_neg2>
    1358:	d6 df       	rcall	.-84     	; 0x1306 <__udivmodsi4>
    135a:	07 fc       	sbrc	r0, 7
    135c:	02 d0       	rcall	.+4      	; 0x1362 <__divmodsi4_neg2>
    135e:	46 f4       	brtc	.+16     	; 0x1370 <__divmodsi4_exit>
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <__negsi2>

00001362 <__divmodsi4_neg2>:
    1362:	50 95       	com	r21
    1364:	40 95       	com	r20
    1366:	30 95       	com	r19
    1368:	21 95       	neg	r18
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	4f 4f       	sbci	r20, 0xFF	; 255
    136e:	5f 4f       	sbci	r21, 0xFF	; 255

00001370 <__divmodsi4_exit>:
    1370:	08 95       	ret

00001372 <__negsi2>:
    1372:	90 95       	com	r25
    1374:	80 95       	com	r24
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	08 95       	ret

00001382 <__umulhisi3>:
    1382:	a2 9f       	mul	r26, r18
    1384:	b0 01       	movw	r22, r0
    1386:	b3 9f       	mul	r27, r19
    1388:	c0 01       	movw	r24, r0
    138a:	a3 9f       	mul	r26, r19
    138c:	01 d0       	rcall	.+2      	; 0x1390 <__umulhisi3+0xe>
    138e:	b2 9f       	mul	r27, r18
    1390:	70 0d       	add	r23, r0
    1392:	81 1d       	adc	r24, r1
    1394:	11 24       	eor	r1, r1
    1396:	91 1d       	adc	r25, r1
    1398:	08 95       	ret

0000139a <__muluhisi3>:
    139a:	f3 df       	rcall	.-26     	; 0x1382 <__umulhisi3>
    139c:	a5 9f       	mul	r26, r21
    139e:	90 0d       	add	r25, r0
    13a0:	b4 9f       	mul	r27, r20
    13a2:	90 0d       	add	r25, r0
    13a4:	a4 9f       	mul	r26, r20
    13a6:	80 0d       	add	r24, r0
    13a8:	91 1d       	adc	r25, r1
    13aa:	11 24       	eor	r1, r1
    13ac:	08 95       	ret

000013ae <eeprom_read_word>:
    13ae:	a8 e1       	ldi	r26, 0x18	; 24
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	42 e0       	ldi	r20, 0x02	; 2
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <eeprom_read_blraw>

000013b8 <eeprom_write_word>:
    13b8:	12 d0       	rcall	.+36     	; 0x13de <eeprom_write_byte>
    13ba:	27 2f       	mov	r18, r23
    13bc:	11 c0       	rjmp	.+34     	; 0x13e0 <eeprom_write_r18>

000013be <eeprom_read_block>:
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22

000013c2 <eeprom_read_blraw>:
    13c2:	fc 01       	movw	r30, r24
    13c4:	e1 99       	sbic	0x1c, 1	; 28
    13c6:	fe cf       	rjmp	.-4      	; 0x13c4 <eeprom_read_blraw+0x2>
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <eeprom_read_blraw+0x14>
    13ca:	ff bb       	out	0x1f, r31	; 31
    13cc:	ee bb       	out	0x1e, r30	; 30
    13ce:	e0 9a       	sbi	0x1c, 0	; 28
    13d0:	31 96       	adiw	r30, 0x01	; 1
    13d2:	0d b2       	in	r0, 0x1d	; 29
    13d4:	0d 92       	st	X+, r0
    13d6:	41 50       	subi	r20, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	b8 f7       	brcc	.-18     	; 0x13ca <eeprom_read_blraw+0x8>
    13dc:	08 95       	ret

000013de <eeprom_write_byte>:
    13de:	26 2f       	mov	r18, r22

000013e0 <eeprom_write_r18>:
    13e0:	e1 99       	sbic	0x1c, 1	; 28
    13e2:	fe cf       	rjmp	.-4      	; 0x13e0 <eeprom_write_r18>
    13e4:	9f bb       	out	0x1f, r25	; 31
    13e6:	8e bb       	out	0x1e, r24	; 30
    13e8:	2d bb       	out	0x1d, r18	; 29
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	e2 9a       	sbi	0x1c, 2	; 28
    13f0:	e1 9a       	sbi	0x1c, 1	; 28
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	08 95       	ret

000013f8 <_exit>:
    13f8:	f8 94       	cli

000013fa <__stop_program>:
    13fa:	ff cf       	rjmp	.-2      	; 0x13fa <__stop_program>
