
MyClock1307LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001322  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001322  000013d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  0080007c  0080007c  000013f2  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000013f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b7e  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000843  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  0000397f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000435c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00004744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e89  00000000  00000000  00004de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005c6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	b7 c1       	rjmp	.+878    	; 0x376 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	7c c1       	rjmp	.+760    	; 0x306 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	db c1       	rjmp	.+950    	; 0x3ca <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e2       	ldi	r30, 0x22	; 34
      3a:	f3 e1       	ldi	r31, 0x13	; 19
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 37       	cpi	r26, 0x7C	; 124
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ac e7       	ldi	r26, 0x7C	; 124
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3e       	cpi	r26, 0xE8	; 232
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	ca d3       	rcall	.+1940   	; 0x7ee <main>
      5a:	61 c9       	rjmp	.-3390   	; 0xfffff31e <__eeprom_end+0xff7ef312>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
      5e:	20 91 7c 00 	lds	r18, 0x007C
      62:	28 30       	cpi	r18, 0x08	; 8
      64:	78 f4       	brcc	.+30     	; 0x84 <PutBut+0x26>
     buf[head] = but;
      66:	90 91 7e 00 	lds	r25, 0x007E
      6a:	e9 2f       	mov	r30, r25
      6c:	f0 e0       	ldi	r31, 0x00	; 0
      6e:	e1 58       	subi	r30, 0x81	; 129
      70:	ff 4f       	sbci	r31, 0xFF	; 255
      72:	80 83       	st	Z, r24
     count++;
      74:	2f 5f       	subi	r18, 0xFF	; 255
      76:	20 93 7c 00 	sts	0x007C, r18
     head++;
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	89 0f       	add	r24, r25
     head &= (BUT_SIZE_BUF - 1);    
      7e:	87 70       	andi	r24, 0x07	; 7
      80:	80 93 7e 00 	sts	0x007E, r24
      84:	08 95       	ret

00000086 <BUT_Check.constprop.0>:
  return but;
}

/************************************************/

static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
      86:	ef 92       	push	r14
      88:	ff 92       	push	r15
      8a:	0f 93       	push	r16
      8c:	1f 93       	push	r17
      8e:	cf 93       	push	r28
      90:	df 93       	push	r29
      92:	00 d0       	rcall	.+0      	; 0x94 <BUT_Check.constprop.0+0xe>
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
      98:	2f ef       	ldi	r18, 0xFF	; 255
      9a:	26 0f       	add	r18, r22
   
  stateTmp = stateBut[i];
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	a9 01       	movw	r20, r18
      a0:	49 57       	subi	r20, 0x79	; 121
      a2:	5f 4f       	sbci	r21, 0xFF	; 255
      a4:	7a 01       	movw	r14, r20
      a6:	fa 01       	movw	r30, r20
      a8:	40 81       	ld	r20, Z
  event = 0;

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
      aa:	f9 01       	movw	r30, r18
      ac:	e4 57       	subi	r30, 0x74	; 116
      ae:	ff 4f       	sbci	r31, 0xFF	; 255
      b0:	90 81       	ld	r25, Z
      b2:	90 93 8b 00 	sts	0x008B, r25
#endif

 countDebTmp = countDeb[i];
      b6:	89 01       	movw	r16, r18
      b8:	00 0f       	add	r16, r16
      ba:	11 1f       	adc	r17, r17
      bc:	d8 01       	movw	r26, r16
      be:	ae 56       	subi	r26, 0x6E	; 110
      c0:	bf 4f       	sbci	r27, 0xFF	; 255
      c2:	2d 91       	ld	r18, X+
      c4:	3c 91       	ld	r19, X
      c6:	30 93 91 00 	sts	0x0091, r19
      ca:	20 93 90 00 	sts	0x0090, r18
  
 if (state){
      ce:	88 23       	and	r24, r24
      d0:	e1 f0       	breq	.+56     	; 0x10a <BUT_Check.constprop.0+0x84>
    if (countDebTmp < BUT_COUNT_MAX){
      d2:	25 3f       	cpi	r18, 0xF5	; 245
      d4:	51 e0       	ldi	r21, 0x01	; 1
      d6:	35 07       	cpc	r19, r21
      d8:	c8 f5       	brcc	.+114    	; 0x14c <BUT_Check.constprop.0+0xc6>
       countDebTmp++;
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	30 93 91 00 	sts	0x0091, r19
      e2:	20 93 90 00 	sts	0x0090, r18

       if (countDebTmp > BUT_COUNT_THR){
      e6:	2b 30       	cpi	r18, 0x0B	; 11
      e8:	31 05       	cpc	r19, r1
      ea:	80 f1       	brcs	.+96     	; 0x14c <BUT_Check.constprop.0+0xc6>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
      ec:	40 fd       	sbrc	r20, 0
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <BUT_Check.constprop.0+0x70>
             stateTmp |= FLAG_BUT_PRESSED;
      f0:	41 60       	ori	r20, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <BUT_Check.constprop.0+0x72>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
      f6:	90 e0       	ldi	r25, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
      f8:	25 3f       	cpi	r18, 0xF5	; 245
      fa:	31 40       	sbci	r19, 0x01	; 1
      fc:	41 f5       	brne	.+80     	; 0x14e <BUT_Check.constprop.0+0xc8>
         if (!(stateTmp & FLAG_BUT_HOLD)){
      fe:	41 fd       	sbrc	r20, 1
     100:	26 c0       	rjmp	.+76     	; 0x14e <BUT_Check.constprop.0+0xc8>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     102:	4b 7f       	andi	r20, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     104:	42 60       	ori	r20, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     106:	92 e0       	ldi	r25, 0x02	; 2
     108:	22 c0       	rjmp	.+68     	; 0x14e <BUT_Check.constprop.0+0xc8>
    }    
  }
  else{

#if (BUT_DOUBLE_CLICK_EN == 1)     
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     10a:	40 ff       	sbrs	r20, 0
     10c:	0a c0       	rjmp	.+20     	; 0x122 <BUT_Check.constprop.0+0x9c>
     10e:	41 fd       	sbrc	r20, 1
     110:	08 c0       	rjmp	.+16     	; 0x122 <BUT_Check.constprop.0+0x9c>

       if (stateTmp & FLAG_BUT_RELEASED){
     112:	42 ff       	sbrs	r20, 2
     114:	03 c0       	rjmp	.+6      	; 0x11c <BUT_Check.constprop.0+0x96>
          stateTmp &= ~FLAG_BUT_RELEASED;
     116:	4b 7f       	andi	r20, 0xFB	; 251
          SaveEvent_m(settings, BUT_EV_DOUBLE_CLICK, BUT_DOUBLE_CLICK_CODE, event);
     118:	95 e0       	ldi	r25, 0x05	; 5
     11a:	04 c0       	rjmp	.+8      	; 0x124 <BUT_Check.constprop.0+0x9e>
       }
       else{
          countHoldTmp = 0;
     11c:	10 92 8b 00 	sts	0x008B, r1
          stateTmp |= FLAG_BUT_RELEASED;
     120:	44 60       	ori	r20, 0x04	; 4
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     122:	90 e0       	ldi	r25, 0x00	; 0
          countHoldTmp = 0;
          stateTmp |= FLAG_BUT_RELEASED;
       }    
     }       
 
     if (stateTmp & FLAG_BUT_RELEASED){   
     124:	42 ff       	sbrs	r20, 2
     126:	08 c0       	rjmp	.+16     	; 0x138 <BUT_Check.constprop.0+0xb2>
        if (countHoldTmp > BUT_COUNT_THR_2){
     128:	80 91 8b 00 	lds	r24, 0x008B
     12c:	85 36       	cpi	r24, 0x65	; 101
     12e:	20 f0       	brcs	.+8      	; 0x138 <BUT_Check.constprop.0+0xb2>
           countHoldTmp = 0;
     130:	10 92 8b 00 	sts	0x008B, r1
           stateTmp &= ~FLAG_BUT_RELEASED;
     134:	4b 7f       	andi	r20, 0xFB	; 251
  #if (BUT_RELEASED_EN == 1)   
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     136:	93 e0       	ldi	r25, 0x03	; 3
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
     138:	40 ff       	sbrs	r20, 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <BUT_Check.constprop.0+0xba>
     13c:	41 fd       	sbrc	r20, 1
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     13e:	94 e0       	ldi	r25, 0x04	; 4
     }
#endif     

     countDebTmp = 0;
     140:	10 92 91 00 	sts	0x0091, r1
     144:	10 92 90 00 	sts	0x0090, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     148:	4c 7f       	andi	r20, 0xFC	; 252
     14a:	01 c0       	rjmp	.+2      	; 0x14e <BUT_Check.constprop.0+0xc8>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     14c:	90 e0       	ldi	r25, 0x00	; 0
  }

 

#if (BUT_DOUBLE_CLICK_EN == 1)  
  if (stateTmp & FLAG_BUT_RELEASED){
     14e:	42 ff       	sbrs	r20, 2
     150:	07 c0       	rjmp	.+14     	; 0x160 <BUT_Check.constprop.0+0xda>
     if (countHoldTmp < BUT_COUNT_THR_2_MAX){
     152:	80 91 8b 00 	lds	r24, 0x008B
     156:	85 36       	cpi	r24, 0x65	; 101
     158:	18 f4       	brcc	.+6      	; 0x160 <BUT_Check.constprop.0+0xda>
        countHoldTmp++;
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 8b 00 	sts	0x008B, r24
     }
  }
 
  countHold[i] = countHoldTmp;
     160:	80 91 8b 00 	lds	r24, 0x008B
     164:	80 83       	st	Z, r24
#endif       
  
  if (event){
     166:	99 23       	and	r25, r25
     168:	41 f0       	breq	.+16     	; 0x17a <BUT_Check.constprop.0+0xf4>
     PutBut(i+1);
     16a:	86 2f       	mov	r24, r22
     16c:	4a 83       	std	Y+2, r20	; 0x02
     16e:	99 83       	std	Y+1, r25	; 0x01
     170:	76 df       	rcall	.-276    	; 0x5e <PutBut>
     PutBut(event);
     172:	99 81       	ldd	r25, Y+1	; 0x01
     174:	89 2f       	mov	r24, r25
     176:	73 df       	rcall	.-282    	; 0x5e <PutBut>
     178:	4a 81       	ldd	r20, Y+2	; 0x02
  }
  
  countDeb[i] = countDebTmp;
     17a:	f8 01       	movw	r30, r16
     17c:	ee 56       	subi	r30, 0x6E	; 110
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 91 90 00 	lds	r24, 0x0090
     184:	90 91 91 00 	lds	r25, 0x0091
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     18c:	f7 01       	movw	r30, r14
     18e:	40 83       	st	Z, r20
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	08 95       	ret

000001a2 <BUT_GetBut>:

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    
  if (count){
     1a2:	20 91 7c 00 	lds	r18, 0x007C
     1a6:	22 23       	and	r18, r18
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <BUT_GetBut+0x26>
     but = buf[tail];
     1aa:	90 91 7d 00 	lds	r25, 0x007D
     1ae:	e9 2f       	mov	r30, r25
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e1 58       	subi	r30, 0x81	; 129
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	80 81       	ld	r24, Z
     count--;
     1b8:	21 50       	subi	r18, 0x01	; 1
     1ba:	20 93 7c 00 	sts	0x007C, r18
     tail++;
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     1c0:	97 70       	andi	r25, 0x07	; 7
     1c2:	90 93 7d 00 	sts	0x007D, r25
     1c6:	08 95       	ret
  }
}

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     1ca:	08 95       	ret

000001cc <BUT_Init>:
}

/******************************************************/

void BUT_Init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	e2 e9       	ldi	r30, 0x92	; 146
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	c7 e8       	ldi	r28, 0x87	; 135
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	ac e8       	ldi	r26, 0x8C	; 140
     1da:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     1dc:	11 92       	st	Z+, r1
     1de:	11 92       	st	Z+, r1
     stateBut[i] = 0;
     1e0:	19 92       	st	Y+, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
     1e2:	1d 92       	st	X+, r1

void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	ea 39       	cpi	r30, 0x9A	; 154
     1e8:	f8 07       	cpc	r31, r24
     1ea:	c1 f7       	brne	.-16     	; 0x1dc <BUT_Init+0x10>
     1ec:	ef e7       	ldi	r30, 0x7F	; 127
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     1f0:	11 92       	st	Z+, r1
     countHold[i] = 0;
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	e7 38       	cpi	r30, 0x87	; 135
     1f6:	f8 07       	cpc	r31, r24
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <BUT_Init+0x24>
     buf[i] = 0;    
  }
  
  head = 0;
     1fa:	10 92 7e 00 	sts	0x007E, r1
  tail = 0;  
     1fe:	10 92 7d 00 	sts	0x007D, r1
  count = 0;
     202:	10 92 7c 00 	sts	0x007C, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     206:	89 98       	cbi	0x11, 1	; 17
     208:	91 98       	cbi	0x12, 1	; 18
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     20a:	8a 98       	cbi	0x11, 2	; 17
     20c:	92 98       	cbi	0x12, 2	; 18
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     20e:	8b 98       	cbi	0x11, 3	; 17
     210:	93 98       	cbi	0x12, 3	; 18
#endif  

#ifdef BUT_4_ID  
  ButtonInit_m(BUT_4_DDRX, BUT_4_PORTX, BUT_4_PIN, BUT_4_PULL);
     212:	88 98       	cbi	0x11, 0	; 17
     214:	90 98       	cbi	0x12, 0	; 18
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <BUT_Poll>:

/**********************************************/

void BUT_Poll(void)
{
     21c:	cf 93       	push	r28
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     21e:	80 b3       	in	r24, 0x10	; 16
     220:	c1 e0       	ldi	r28, 0x01	; 1
     222:	86 95       	lsr	r24
     224:	81 70       	andi	r24, 0x01	; 1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	8c 27       	eor	r24, r28
     22a:	2d df       	rcall	.-422    	; 0x86 <BUT_Check.constprop.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     22c:	80 b3       	in	r24, 0x10	; 16
     22e:	82 fb       	bst	r24, 2
     230:	88 27       	eor	r24, r24
     232:	80 f9       	bld	r24, 0
     234:	62 e0       	ldi	r22, 0x02	; 2
     236:	8c 27       	eor	r24, r28
     238:	26 df       	rcall	.-436    	; 0x86 <BUT_Check.constprop.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     23a:	80 b3       	in	r24, 0x10	; 16
     23c:	83 fb       	bst	r24, 3
     23e:	88 27       	eor	r24, r24
     240:	80 f9       	bld	r24, 0
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	8c 27       	eor	r24, r28
     246:	1f df       	rcall	.-450    	; 0x86 <BUT_Check.constprop.0>
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     248:	80 b3       	in	r24, 0x10	; 16
     24a:	81 70       	andi	r24, 0x01	; 1
     24c:	64 e0       	ldi	r22, 0x04	; 4
     24e:	8c 27       	eor	r24, r28
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
     250:	cf 91       	pop	r28
#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     252:	19 cf       	rjmp	.-462    	; 0x86 <BUT_Check.constprop.0>

00000254 <timer1_led_init>:
	0b00010111, //SUNSET
};

void timer1_led_init(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     254:	8e b5       	in	r24, 0x2e	; 46
     256:	88 60       	ori	r24, 0x08	; 8
     258:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	80 61       	ori	r24, 0x10	; 16
     25e:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000101; //записываем в регистр число для сравнения
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11011100;
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
     268:	8e b5       	in	r24, 0x2e	; 46
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	8e bd       	out	0x2e, r24	; 46
     26e:	08 95       	ret

00000270 <setCharIndicator>:
}
//Установка символа
void setCharIndicator(unsigned char number,  unsigned char i){
	indicators[i] = number;
     270:	e6 2f       	mov	r30, r22
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ec 58       	subi	r30, 0x8C	; 140
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	80 83       	st	Z, r24
     27a:	08 95       	ret

0000027c <setDotIndicator>:
}
//Установка точки
void setDotIndicator(unsigned char i, unsigned char state){
	indicators_dots[i] = state;
     27c:	e8 2f       	mov	r30, r24
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e5 56       	subi	r30, 0x65	; 101
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 83       	st	Z, r22
     286:	08 95       	ret

00000288 <ClearALLDotsIndicator>:
}
//Очистка точек
void ClearALLDotsIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators_dots[i] = 0;
     288:	10 92 9b 00 	sts	0x009B, r1
     28c:	10 92 9c 00 	sts	0x009C, r1
     290:	10 92 9d 00 	sts	0x009D, r1
     294:	10 92 9e 00 	sts	0x009E, r1
     298:	10 92 9f 00 	sts	0x009F, r1
     29c:	10 92 a0 00 	sts	0x00A0, r1
     2a0:	08 95       	ret

000002a2 <ClearALLCharIndicator>:
}
//Очистка  всех индикаторов
void ClearALLCharIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators[i] = 11;
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	80 93 74 00 	sts	0x0074, r24
     2a8:	80 93 75 00 	sts	0x0075, r24
     2ac:	80 93 76 00 	sts	0x0076, r24
     2b0:	80 93 77 00 	sts	0x0077, r24
     2b4:	80 93 78 00 	sts	0x0078, r24
     2b8:	80 93 79 00 	sts	0x0079, r24
     2bc:	08 95       	ret

000002be <DisplayLED>:
	}
}
void DisplayLED(unsigned char number){
	    unsigned char char_temp = 0;
	    SPDR = ~(0b00000001 << number);
     2be:	48 2f       	mov	r20, r24
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	08 2e       	mov	r0, r24
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DisplayLED+0xe>
     2ca:	22 0f       	add	r18, r18
     2cc:	0a 94       	dec	r0
     2ce:	ea f7       	brpl	.-6      	; 0x2ca <DisplayLED+0xc>
     2d0:	20 95       	com	r18
     2d2:	2f b9       	out	0x0f, r18	; 15
        
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2d4:	77 9b       	sbis	0x0e, 7	; 14
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <DisplayLED+0x16>
		   //Разрешение вложенных прерываний 
	    };
	 //Запрет вложенных прерываний
		
		char_temp = segments[indicators[number]];
     2d8:	fa 01       	movw	r30, r20
     2da:	ec 58       	subi	r30, 0x8C	; 140
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	e0 81       	ld	r30, Z
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e0 5a       	subi	r30, 0xA0	; 160
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	80 81       	ld	r24, Z
		
		//Установка точки
	    if(indicators_dots[number]){ char_temp = char_temp | segments[12];}
     2e8:	fa 01       	movw	r30, r20
     2ea:	e5 56       	subi	r30, 0x65	; 101
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	90 81       	ld	r25, Z
     2f0:	99 23       	and	r25, r25
     2f2:	19 f0       	breq	.+6      	; 0x2fa <DisplayLED+0x3c>
     2f4:	90 91 6c 00 	lds	r25, 0x006C
     2f8:	89 2b       	or	r24, r25
	    	
	    SPDR = char_temp;
     2fa:	8f b9       	out	0x0f, r24	; 15
		
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <DisplayLED+0x3e>
		   
	    };
		
        //Строб защелки
	    PORTB |= (1 << 2);
     300:	c2 9a       	sbi	0x18, 2	; 24
	    PORTB &= ~(1 << 2);
     302:	c2 98       	cbi	0x18, 2	; 24
     304:	08 95       	ret

00000306 <__vector_6>:
	}
*/
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
    DisplayLED(dissplay);
     328:	80 91 9a 00 	lds	r24, 0x009A
     32c:	c8 df       	rcall	.-112    	; 0x2be <DisplayLED>
    dissplay++;
     32e:	80 91 9a 00 	lds	r24, 0x009A
     332:	8f 5f       	subi	r24, 0xFF	; 255
    if (dissplay > 5 ){ 
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	18 f4       	brcc	.+6      	; 0x33e <__vector_6+0x38>
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
    DisplayLED(dissplay);
    dissplay++;
     338:	80 93 9a 00 	sts	0x009A, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_6+0x3c>
    if (dissplay > 5 ){ 
		dissplay = 0;
     33e:	10 92 9a 00 	sts	0x009A, r1
	}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <PWM_set.part.0>:
    }else if(channel == B){
	  blue = val;
    }else if(channel == W){
      white = val;
    }else if(channel == RGBW){
      red = val;
     364:	80 93 e5 00 	sts	0x00E5, r24
	  green = val;
     368:	80 93 ac 00 	sts	0x00AC, r24
	  blue = val;
     36c:	80 93 ab 00 	sts	0x00AB, r24
	  white = val;
     370:	80 93 aa 00 	sts	0x00AA, r24
     374:	08 95       	ret

00000376 <__vector_3>:
volatile char twoHZ_status = 0;
unsigned int adcMaxPWM = 0;
volatile unsigned char i2c_error_counter = 0;
//Прерывание моргалки
ISR(TIMER2_COMP_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	 twoHZ--;
     384:	80 91 7a 00 	lds	r24, 0x007A
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 7a 00 	sts	0x007A, r24
	 if(!twoHZ){
     38e:	80 91 7a 00 	lds	r24, 0x007A
     392:	81 11       	cpse	r24, r1
     394:	13 c0       	rjmp	.+38     	; 0x3bc <__vector_3+0x46>
	    twoHZ_status = !twoHZ_status;
     396:	90 91 a4 00 	lds	r25, 0x00A4
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	91 11       	cpse	r25, r1
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	80 93 a4 00 	sts	0x00A4, r24
		twoHZ = 255;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	80 93 7a 00 	sts	0x007A, r24
		if(i2c_error_counter){
     3aa:	80 91 a1 00 	lds	r24, 0x00A1
     3ae:	88 23       	and	r24, r24
     3b0:	29 f0       	breq	.+10     	; 0x3bc <__vector_3+0x46>
			i2c_error_counter--;
     3b2:	80 91 a1 00 	lds	r24, 0x00A1
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	80 93 a1 00 	sts	0x00A1, r24
		}
	}
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_9>:

//Прерывание ШИМ
ISR (TIMER0_OVF_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
	count++;
     3d8:	80 91 a5 00 	lds	r24, 0x00A5
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 a5 00 	sts	0x00A5, r24
	if (count == 0){//Переполнение
     3e2:	81 11       	cpse	r24, r1
     3e4:	1e c0       	rjmp	.+60     	; 0x422 <__vector_9+0x58>
		
		//Сохранием значения в буфер
		red_b   = red; 
     3e6:	80 91 e5 00 	lds	r24, 0x00E5
     3ea:	80 93 a9 00 	sts	0x00A9, r24
		green_b = green;
     3ee:	90 91 ac 00 	lds	r25, 0x00AC
     3f2:	90 93 a8 00 	sts	0x00A8, r25
		blue_b  = blue;
     3f6:	90 91 ab 00 	lds	r25, 0x00AB
     3fa:	90 93 a7 00 	sts	0x00A7, r25
		white_b  = white;
     3fe:	90 91 aa 00 	lds	r25, 0x00AA
     402:	90 93 a6 00 	sts	0x00A6, r25
		
       //Высокий уровень, если не 0х00 что-бы не было засветки
	   if(red){
     406:	81 11       	cpse	r24, r1
	     PORT_R |= (1<<R);
     408:	95 9a       	sbi	0x12, 5	; 18
	   }
	   if(green){
     40a:	80 91 ac 00 	lds	r24, 0x00AC
     40e:	81 11       	cpse	r24, r1
	     PORT_G |= (1<<G);
     410:	96 9a       	sbi	0x12, 6	; 18
	   }
	   if(blue){
     412:	80 91 ab 00 	lds	r24, 0x00AB
     416:	81 11       	cpse	r24, r1
	     PORT_B |= (1<<B);
     418:	97 9a       	sbi	0x12, 7	; 18
	   }
	   if(white){
     41a:	80 91 aa 00 	lds	r24, 0x00AA
     41e:	81 11       	cpse	r24, r1
	     PORT_W |= (1<<W);
     420:	c0 9a       	sbi	0x18, 0	; 24
	   }
		
	}
	
	//Если достигли ширины импульса, низкий уровень
	if (red_b   == count) { PORT_R &=~ (1<<R);}
     422:	90 91 a9 00 	lds	r25, 0x00A9
     426:	80 91 a5 00 	lds	r24, 0x00A5
     42a:	98 13       	cpse	r25, r24
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__vector_9+0x66>
     42e:	95 98       	cbi	0x12, 5	; 18
	if (green_b == count) { PORT_G &=~ (1<<G);}
     430:	90 91 a8 00 	lds	r25, 0x00A8
     434:	80 91 a5 00 	lds	r24, 0x00A5
     438:	98 13       	cpse	r25, r24
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__vector_9+0x74>
     43c:	96 98       	cbi	0x12, 6	; 18
	if (blue_b  == count) {  PORT_B &=~ (1<<B);}
     43e:	90 91 a7 00 	lds	r25, 0x00A7
     442:	80 91 a5 00 	lds	r24, 0x00A5
     446:	98 13       	cpse	r25, r24
     448:	01 c0       	rjmp	.+2      	; 0x44c <__vector_9+0x82>
     44a:	97 98       	cbi	0x12, 7	; 18
	if (white_b  == count) { 	PORT_W &= ~(1<<W);}
     44c:	90 91 a6 00 	lds	r25, 0x00A6
     450:	80 91 a5 00 	lds	r24, 0x00A5
     454:	98 13       	cpse	r25, r24
     456:	01 c0       	rjmp	.+2      	; 0x45a <__vector_9+0x90>
     458:	c0 98       	cbi	0x18, 0	; 24
}
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <read_adc>:

unsigned int read_adc(unsigned char adc_input)
{
	uint32_t adc_ = 0;
	ADMUX= adc_input | ADC_VREF_TYPE;
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	8a e1       	ldi	r24, 0x1A	; 26
     46e:	8a 95       	dec	r24
     470:	f1 f7       	brne	.-4      	; 0x46e <read_adc+0x6>
     472:	00 c0       	rjmp	.+0      	; 0x474 <read_adc+0xc>
     474:	45 e0       	ldi	r20, 0x05	; 5
	if (white_b  == count) { 	PORT_W &= ~(1<<W);}
}

unsigned int read_adc(unsigned char adc_input)
{
	uint32_t adc_ = 0;
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	cb 01       	movw	r24, r22
	ADMUX= adc_input | ADC_VREF_TYPE;
	_delay_us(10);
	for (char i = 0; i < ADC_READ_NUM; i++)
	{
		ADCSRA|=(1<<ADSC);
     47c:	36 9a       	sbi	0x06, 6	; 6
		while ((ADCSRA & (1<<ADIF))==0);
     47e:	34 9b       	sbis	0x06, 4	; 6
     480:	fe cf       	rjmp	.-4      	; 0x47e <read_adc+0x16>
		ADCSRA|=(1<<ADIF);
     482:	34 9a       	sbi	0x06, 4	; 6
		adc_ += ADCW;
     484:	24 b1       	in	r18, 0x04	; 4
     486:	35 b1       	in	r19, 0x05	; 5
     488:	62 0f       	add	r22, r18
     48a:	73 1f       	adc	r23, r19
     48c:	81 1d       	adc	r24, r1
     48e:	91 1d       	adc	r25, r1
     490:	41 50       	subi	r20, 0x01	; 1
unsigned int read_adc(unsigned char adc_input)
{
	uint32_t adc_ = 0;
	ADMUX= adc_input | ADC_VREF_TYPE;
	_delay_us(10);
	for (char i = 0; i < ADC_READ_NUM; i++)
     492:	a1 f7       	brne	.-24     	; 0x47c <read_adc+0x14>
		ADCSRA|=(1<<ADSC);
		while ((ADCSRA & (1<<ADIF))==0);
		ADCSRA|=(1<<ADIF);
		adc_ += ADCW;
	}
	return adc_/ADC_READ_NUM;
     494:	25 e0       	ldi	r18, 0x05	; 5
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	c7 d6       	rcall	.+3470   	; 0x122c <__udivmodsi4>
}
     49e:	c9 01       	movw	r24, r18
     4a0:	08 95       	ret

000004a2 <led_strob>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

//Строб светодиода кнопки
void led_strob(){
	BUTTON_SPROB_LED_PORT |= (1 << BUTTON_SPROB_LED_PIN);
     4a2:	c6 9a       	sbi	0x18, 6	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	80 e7       	ldi	r24, 0x70	; 112
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	90 40       	sbci	r25, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <led_strob+0x8>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <led_strob+0x12>
     4b4:	00 00       	nop
	_delay_ms(100);
	BUTTON_SPROB_LED_PORT &= ~(1 << BUTTON_SPROB_LED_PIN);
     4b6:	c6 98       	cbi	0x18, 6	; 24
     4b8:	08 95       	ret

000004ba <SPI_init>:
}

//SPI инициализация 
void SPI_init(void)
{
	SHIFT_REG_DDR |= ((1<<DATA)|(1<<SCL));
     4ba:	87 b3       	in	r24, 0x17	; 23
     4bc:	88 62       	ori	r24, 0x28	; 40
     4be:	87 bb       	out	0x17, r24	; 23
	SHIFT_REG_PORT &= ~((1<<DATA)|(1<<SCL));
     4c0:	88 b3       	in	r24, 0x18	; 24
     4c2:	87 7d       	andi	r24, 0xD7	; 215
     4c4:	88 bb       	out	0x18, r24	; 24
	SHIFT_REG_DDR |= (1<<LATCH) ;
     4c6:	ba 9a       	sbi	0x17, 2	; 23
	SHIFT_REG_PORT &=~ (1 << LATCH);
     4c8:	c2 98       	cbi	0x18, 2	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//Включение, режим MASTER
     4ca:	80 e5       	ldi	r24, 0x50	; 80
     4cc:	8d b9       	out	0x0d, r24	; 13
     4ce:	08 95       	ret

000004d0 <PWM_init>:
}

//PWM инициализация 
void PWM_init(){
	DDR_R |= (1<<R);
     4d0:	8d 9a       	sbi	0x11, 5	; 17
	DDR_G |= (1<<G);
     4d2:	8e 9a       	sbi	0x11, 6	; 17
	DDR_B |= (1<<B);
     4d4:	8f 9a       	sbi	0x11, 7	; 17
	DDR_W |= (1<<W);
     4d6:	b8 9a       	sbi	0x17, 0	; 23
	
	PORT_R &= ~(1<<R);
     4d8:	95 98       	cbi	0x12, 5	; 18
	PORT_G &= ~(1<<G);
     4da:	96 98       	cbi	0x12, 6	; 18
	PORT_B &= ~(1<<B);
     4dc:	97 98       	cbi	0x12, 7	; 18
	PORT_W &= ~(1<<W);
     4de:	c0 98       	cbi	0x18, 0	; 24

	DDRB &= ~(1<<PB7);
     4e0:	bf 98       	cbi	0x17, 7	; 23
    TCCR0 |= (1 << CS10);
     4e2:	83 b7       	in	r24, 0x33	; 51
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00;
     4e8:	12 be       	out	0x32, r1	; 50
    TIMSK |= (1 << TOIE0);
     4ea:	89 b7       	in	r24, 0x39	; 57
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	89 bf       	out	0x39, r24	; 57
     4f0:	08 95       	ret

000004f2 <ModifyRTC>:
}

//Настройки времени
void ModifyRTC(void)
{
	I2C_StartCondition();
     4f2:	dc d5       	rcall	.+3000   	; 0x10ac <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     4f4:	80 ed       	ldi	r24, 0xD0	; 208
     4f6:	f6 d5       	rcall	.+3052   	; 0x10e4 <I2C_SendByte>
	switch(now_mode){
     4f8:	80 91 c2 00 	lds	r24, 0x00C2
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	19 f0       	breq	.+6      	; 0x506 <ModifyRTC+0x14>
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	61 f1       	breq	.+88     	; 0x55c <ModifyRTC+0x6a>
     504:	55 c0       	rjmp	.+170    	; 0x5b0 <ModifyRTC+0xbe>
		case MODE_EDIT_HOURS: //часы
			I2C_SendByte(2);//Переходим на 0x02 - байт часов
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	ed d5       	rcall	.+3034   	; 0x10e4 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     50a:	80 91 c1 00 	lds	r24, 0x00C1
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	89 f4       	brne	.+34     	; 0x534 <ModifyRTC+0x42>
			  if(hour<23){ 
     512:	80 91 db 00 	lds	r24, 0x00DB
     516:	87 31       	cpi	r24, 0x17	; 23
     518:	38 f4       	brcc	.+14     	; 0x528 <ModifyRTC+0x36>
				  I2C_SendByte(RTC_ConvertFromBinDec(hour+1));
     51a:	8f 5f       	subi	r24, 0xFF	; 255
     51c:	bb d5       	rcall	.+2934   	; 0x1094 <RTC_ConvertFromBinDec>
     51e:	e2 d5       	rcall	.+3012   	; 0x10e4 <I2C_SendByte>
				  hour++;
     520:	80 91 db 00 	lds	r24, 0x00DB
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	12 c0       	rjmp	.+36     	; 0x54c <ModifyRTC+0x5a>
			  }else{ 
				  I2C_SendByte(RTC_ConvertFromBinDec(0));
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	b4 d5       	rcall	.+2920   	; 0x1094 <RTC_ConvertFromBinDec>
     52c:	db d5       	rcall	.+2998   	; 0x10e4 <I2C_SendByte>
				  hour = 0;
     52e:	10 92 db 00 	sts	0x00DB, r1
     532:	3e c0       	rjmp	.+124    	; 0x5b0 <ModifyRTC+0xbe>
			  }
			}else if(increment_mode == MODE_DISINC){
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	e1 f5       	brne	.+120    	; 0x5b0 <ModifyRTC+0xbe>
			  if(hour>0){
     538:	80 91 db 00 	lds	r24, 0x00DB
     53c:	88 23       	and	r24, r24
     53e:	49 f0       	breq	.+18     	; 0x552 <ModifyRTC+0x60>
			    I2C_SendByte(RTC_ConvertFromBinDec(hour-1));
     540:	81 50       	subi	r24, 0x01	; 1
     542:	a8 d5       	rcall	.+2896   	; 0x1094 <RTC_ConvertFromBinDec>
     544:	cf d5       	rcall	.+2974   	; 0x10e4 <I2C_SendByte>
				hour--;
     546:	80 91 db 00 	lds	r24, 0x00DB
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 db 00 	sts	0x00DB, r24
     550:	2f c0       	rjmp	.+94     	; 0x5b0 <ModifyRTC+0xbe>
			  }else{ 
				I2C_SendByte(RTC_ConvertFromBinDec(23));
     552:	87 e1       	ldi	r24, 0x17	; 23
     554:	9f d5       	rcall	.+2878   	; 0x1094 <RTC_ConvertFromBinDec>
     556:	c6 d5       	rcall	.+2956   	; 0x10e4 <I2C_SendByte>
				hour = 23;
     558:	87 e1       	ldi	r24, 0x17	; 23
     55a:	f8 cf       	rjmp	.-16     	; 0x54c <ModifyRTC+0x5a>
			}
			
		break;
		
		case MODE_EDIT_MINUTES: // минуты
			I2C_SendByte(1);//Переходим на 0x01 - байт минут
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	c2 d5       	rcall	.+2948   	; 0x10e4 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     560:	80 91 c1 00 	lds	r24, 0x00C1
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	89 f4       	brne	.+34     	; 0x58a <ModifyRTC+0x98>
             if(min<59){ 
     568:	80 91 dc 00 	lds	r24, 0x00DC
     56c:	8b 33       	cpi	r24, 0x3B	; 59
     56e:	38 f4       	brcc	.+14     	; 0x57e <ModifyRTC+0x8c>
				 I2C_SendByte(RTC_ConvertFromBinDec(min+1));
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	90 d5       	rcall	.+2848   	; 0x1094 <RTC_ConvertFromBinDec>
     574:	b7 d5       	rcall	.+2926   	; 0x10e4 <I2C_SendByte>
				 min++;
     576:	80 91 dc 00 	lds	r24, 0x00DC
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <ModifyRTC+0xba>
             }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(0));
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	89 d5       	rcall	.+2834   	; 0x1094 <RTC_ConvertFromBinDec>
     582:	b0 d5       	rcall	.+2912   	; 0x10e4 <I2C_SendByte>
				 min = 0;
     584:	10 92 dc 00 	sts	0x00DC, r1
     588:	13 c0       	rjmp	.+38     	; 0x5b0 <ModifyRTC+0xbe>
			 }
		    }else if(increment_mode == MODE_DISINC){
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	89 f4       	brne	.+34     	; 0x5b0 <ModifyRTC+0xbe>
				if(min>0){ 
     58e:	80 91 dc 00 	lds	r24, 0x00DC
     592:	88 23       	and	r24, r24
     594:	39 f0       	breq	.+14     	; 0x5a4 <ModifyRTC+0xb2>
					I2C_SendByte(RTC_ConvertFromBinDec(min-1));
     596:	81 50       	subi	r24, 0x01	; 1
     598:	7d d5       	rcall	.+2810   	; 0x1094 <RTC_ConvertFromBinDec>
     59a:	a4 d5       	rcall	.+2888   	; 0x10e4 <I2C_SendByte>
					min--;
     59c:	80 91 dc 00 	lds	r24, 0x00DC
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <ModifyRTC+0xba>
				}else{ 
					I2C_SendByte(RTC_ConvertFromBinDec(59));
     5a4:	8b e3       	ldi	r24, 0x3B	; 59
     5a6:	76 d5       	rcall	.+2796   	; 0x1094 <RTC_ConvertFromBinDec>
     5a8:	9d d5       	rcall	.+2874   	; 0x10e4 <I2C_SendByte>
					min = 59;
     5aa:	8b e3       	ldi	r24, 0x3B	; 59
     5ac:	80 93 dc 00 	sts	0x00DC, r24
				}
			}
	    break;
*/
	}
	I2C_StopCondition();
     5b0:	96 c5       	rjmp	.+2860   	; 0x10de <I2C_StopCondition>

000005b2 <ModifyLEDMenu>:
}

//Настройка рассвета/заката
void ModifyLEDMenu(void)
{
	switch(now_mode_led_menu){
     5b2:	80 91 bf 00 	lds	r24, 0x00BF
     5b6:	90 91 c0 00 	lds	r25, 0x00C0
     5ba:	89 30       	cpi	r24, 0x09	; 9
     5bc:	91 05       	cpc	r25, r1
     5be:	09 f4       	brne	.+2      	; 0x5c2 <ModifyLEDMenu+0x10>
     5c0:	5e c0       	rjmp	.+188    	; 0x67e <ModifyLEDMenu+0xcc>
     5c2:	30 f4       	brcc	.+12     	; 0x5d0 <ModifyLEDMenu+0x1e>
     5c4:	87 30       	cpi	r24, 0x07	; 7
     5c6:	91 05       	cpc	r25, r1
     5c8:	69 f0       	breq	.+26     	; 0x5e4 <ModifyLEDMenu+0x32>
     5ca:	08 97       	sbiw	r24, 0x08	; 8
     5cc:	89 f1       	breq	.+98     	; 0x630 <ModifyLEDMenu+0x7e>
     5ce:	08 95       	ret
     5d0:	8b 30       	cpi	r24, 0x0B	; 11
     5d2:	91 05       	cpc	r25, r1
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <ModifyLEDMenu+0x26>
     5d6:	9f c0       	rjmp	.+318    	; 0x716 <ModifyLEDMenu+0x164>
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <ModifyLEDMenu+0x2a>
     5da:	77 c0       	rjmp	.+238    	; 0x6ca <ModifyLEDMenu+0x118>
     5dc:	0c 97       	sbiw	r24, 0x0c	; 12
     5de:	09 f4       	brne	.+2      	; 0x5e2 <ModifyLEDMenu+0x30>
     5e0:	c0 c0       	rjmp	.+384    	; 0x762 <ModifyLEDMenu+0x1b0>
     5e2:	08 95       	ret
		    case MODE_EDIT_START_TIME_DAWN_HOURS: // день недели
			    if(increment_mode_led_menu == MODE_INC){
     5e4:	80 91 bd 00 	lds	r24, 0x00BD
     5e8:	90 91 be 00 	lds	r25, 0x00BE
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	91 05       	cpc	r25, r1
     5f0:	81 f4       	brne	.+32     	; 0x612 <ModifyLEDMenu+0x60>
					if(led_menu_dawn_hours<10) led_menu_dawn_hours++;
     5f2:	80 91 cd 00 	lds	r24, 0x00CD
     5f6:	90 91 ce 00 	lds	r25, 0x00CE
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	91 05       	cpc	r25, r1
     5fe:	10 f4       	brcc	.+4      	; 0x604 <ModifyLEDMenu+0x52>
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	02 c0       	rjmp	.+4      	; 0x608 <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 3;
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 ce 00 	sts	0x00CE, r25
     60c:	80 93 cd 00 	sts	0x00CD, r24
     610:	08 95       	ret
				}else if(increment_mode_led_menu == MODE_DISINC){
     612:	02 97       	sbiw	r24, 0x02	; 2
     614:	09 f0       	breq	.+2      	; 0x618 <ModifyLEDMenu+0x66>
     616:	c9 c0       	rjmp	.+402    	; 0x7aa <ModifyLEDMenu+0x1f8>
					if(led_menu_dawn_hours>4) led_menu_dawn_hours--;
     618:	80 91 cd 00 	lds	r24, 0x00CD
     61c:	90 91 ce 00 	lds	r25, 0x00CE
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	91 05       	cpc	r25, r1
     624:	10 f0       	brcs	.+4      	; 0x62a <ModifyLEDMenu+0x78>
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	ef cf       	rjmp	.-34     	; 0x608 <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 10;
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	ec cf       	rjmp	.-40     	; 0x608 <ModifyLEDMenu+0x56>
			    }
			break;
			
		    case MODE_EDIT_START_TIME_DAWN_MINS: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     630:	80 91 bd 00 	lds	r24, 0x00BD
     634:	90 91 be 00 	lds	r25, 0x00BE
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	91 05       	cpc	r25, r1
     63c:	71 f4       	brne	.+28     	; 0x65a <ModifyLEDMenu+0xa8>
					 if(led_menu_dawn_mins<59) led_menu_dawn_mins++;
     63e:	80 91 cb 00 	lds	r24, 0x00CB
     642:	90 91 cc 00 	lds	r25, 0x00CC
     646:	8b 33       	cpi	r24, 0x3B	; 59
     648:	91 05       	cpc	r25, r1
     64a:	10 f4       	brcc	.+4      	; 0x650 <ModifyLEDMenu+0x9e>
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	0f c0       	rjmp	.+30     	; 0x66e <ModifyLEDMenu+0xbc>
					 else led_menu_dawn_mins = 0;
     650:	10 92 cc 00 	sts	0x00CC, r1
     654:	10 92 cb 00 	sts	0x00CB, r1
     658:	08 95       	ret
				 }else if(increment_mode_led_menu == MODE_DISINC){
     65a:	02 97       	sbiw	r24, 0x02	; 2
     65c:	09 f0       	breq	.+2      	; 0x660 <ModifyLEDMenu+0xae>
     65e:	a5 c0       	rjmp	.+330    	; 0x7aa <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_mins>0) led_menu_dawn_mins--;
     660:	80 91 cb 00 	lds	r24, 0x00CB
     664:	90 91 cc 00 	lds	r25, 0x00CC
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	31 f0       	breq	.+12     	; 0x678 <ModifyLEDMenu+0xc6>
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	90 93 cc 00 	sts	0x00CC, r25
     672:	80 93 cb 00 	sts	0x00CB, r24
     676:	08 95       	ret
					 else led_menu_dawn_mins = 59;
     678:	8b e3       	ldi	r24, 0x3B	; 59
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	f8 cf       	rjmp	.-16     	; 0x66e <ModifyLEDMenu+0xbc>
				 }
		    break;
			
			case MODE_EDIT_INTERVAL_DAWN: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     67e:	80 91 bd 00 	lds	r24, 0x00BD
     682:	90 91 be 00 	lds	r25, 0x00BE
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	61 f4       	brne	.+24     	; 0x6a4 <ModifyLEDMenu+0xf2>
					 if(led_menu_dawn_interval_mins<120) led_menu_dawn_interval_mins += 15;
     68c:	80 91 c9 00 	lds	r24, 0x00C9
     690:	90 91 ca 00 	lds	r25, 0x00CA
     694:	88 37       	cpi	r24, 0x78	; 120
     696:	91 05       	cpc	r25, r1
     698:	10 f4       	brcc	.+4      	; 0x69e <ModifyLEDMenu+0xec>
     69a:	0f 96       	adiw	r24, 0x0f	; 15
     69c:	11 c0       	rjmp	.+34     	; 0x6c0 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 15;
     69e:	8f e0       	ldi	r24, 0x0F	; 15
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <ModifyLEDMenu+0x10e>
					 }else if(increment_mode_led_menu == MODE_DISINC){
     6a4:	02 97       	sbiw	r24, 0x02	; 2
     6a6:	09 f0       	breq	.+2      	; 0x6aa <ModifyLEDMenu+0xf8>
     6a8:	80 c0       	rjmp	.+256    	; 0x7aa <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_interval_mins>15) led_menu_dawn_interval_mins -= 15;
     6aa:	80 91 c9 00 	lds	r24, 0x00C9
     6ae:	90 91 ca 00 	lds	r25, 0x00CA
     6b2:	80 31       	cpi	r24, 0x10	; 16
     6b4:	91 05       	cpc	r25, r1
     6b6:	10 f0       	brcs	.+4      	; 0x6bc <ModifyLEDMenu+0x10a>
     6b8:	0f 97       	sbiw	r24, 0x0f	; 15
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 120;
     6bc:	88 e7       	ldi	r24, 0x78	; 120
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 ca 00 	sts	0x00CA, r25
     6c4:	80 93 c9 00 	sts	0x00C9, r24
     6c8:	08 95       	ret
				 }
		    break;
			
		    case MODE_EDIT_START_TIME_SUNSET_HOURS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     6ca:	80 91 bd 00 	lds	r24, 0x00BD
     6ce:	90 91 be 00 	lds	r25, 0x00BE
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	61 f4       	brne	.+24     	; 0x6f0 <ModifyLEDMenu+0x13e>
			    if(led_menu_sunset_hours<21) led_menu_sunset_hours++;
     6d8:	80 91 c7 00 	lds	r24, 0x00C7
     6dc:	90 91 c8 00 	lds	r25, 0x00C8
     6e0:	85 31       	cpi	r24, 0x15	; 21
     6e2:	91 05       	cpc	r25, r1
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <ModifyLEDMenu+0x138>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	11 c0       	rjmp	.+34     	; 0x70c <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 13;
     6ea:	8d e0       	ldi	r24, 0x0D	; 13
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e c0       	rjmp	.+28     	; 0x70c <ModifyLEDMenu+0x15a>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     6f0:	02 97       	sbiw	r24, 0x02	; 2
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <ModifyLEDMenu+0x144>
     6f4:	5a c0       	rjmp	.+180    	; 0x7aa <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_hours>13) led_menu_sunset_hours--;
     6f6:	80 91 c7 00 	lds	r24, 0x00C7
     6fa:	90 91 c8 00 	lds	r25, 0x00C8
     6fe:	8e 30       	cpi	r24, 0x0E	; 14
     700:	91 05       	cpc	r25, r1
     702:	10 f0       	brcs	.+4      	; 0x708 <ModifyLEDMenu+0x156>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	02 c0       	rjmp	.+4      	; 0x70c <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 21;
     708:	85 e1       	ldi	r24, 0x15	; 21
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 c8 00 	sts	0x00C8, r25
     710:	80 93 c7 00 	sts	0x00C7, r24
     714:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_START_TIME_SUNSET_MINS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     716:	80 91 bd 00 	lds	r24, 0x00BD
     71a:	90 91 be 00 	lds	r25, 0x00BE
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	71 f4       	brne	.+28     	; 0x740 <ModifyLEDMenu+0x18e>
			    if(led_menu_sunset_mins<59) led_menu_sunset_mins++;
     724:	80 91 c5 00 	lds	r24, 0x00C5
     728:	90 91 c6 00 	lds	r25, 0x00C6
     72c:	8b 33       	cpi	r24, 0x3B	; 59
     72e:	91 05       	cpc	r25, r1
     730:	10 f4       	brcc	.+4      	; 0x736 <ModifyLEDMenu+0x184>
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	11 c0       	rjmp	.+34     	; 0x758 <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 0;
     736:	10 92 c6 00 	sts	0x00C6, r1
     73a:	10 92 c5 00 	sts	0x00C5, r1
     73e:	08 95       	ret
			    }else if(increment_mode_led_menu == MODE_DISINC){
     740:	02 97       	sbiw	r24, 0x02	; 2
     742:	99 f5       	brne	.+102    	; 0x7aa <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_mins>0) led_menu_sunset_mins--;
     744:	80 91 c5 00 	lds	r24, 0x00C5
     748:	90 91 c6 00 	lds	r25, 0x00C6
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	11 f0       	breq	.+4      	; 0x754 <ModifyLEDMenu+0x1a2>
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	02 c0       	rjmp	.+4      	; 0x758 <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 59;
     754:	8b e3       	ldi	r24, 0x3B	; 59
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 c6 00 	sts	0x00C6, r25
     75c:	80 93 c5 00 	sts	0x00C5, r24
     760:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_INTERVAL_SUNSET: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     762:	80 91 bd 00 	lds	r24, 0x00BD
     766:	90 91 be 00 	lds	r25, 0x00BE
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	91 05       	cpc	r25, r1
     76e:	61 f4       	brne	.+24     	; 0x788 <ModifyLEDMenu+0x1d6>
			    if(led_menu_sunset_interval_mins<120) led_menu_sunset_interval_mins += 15;
     770:	80 91 c3 00 	lds	r24, 0x00C3
     774:	90 91 c4 00 	lds	r25, 0x00C4
     778:	88 37       	cpi	r24, 0x78	; 120
     77a:	91 05       	cpc	r25, r1
     77c:	10 f4       	brcc	.+4      	; 0x782 <ModifyLEDMenu+0x1d0>
     77e:	0f 96       	adiw	r24, 0x0f	; 15
     780:	10 c0       	rjmp	.+32     	; 0x7a2 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 15;
     782:	8f e0       	ldi	r24, 0x0F	; 15
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <ModifyLEDMenu+0x1f0>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     788:	02 97       	sbiw	r24, 0x02	; 2
     78a:	79 f4       	brne	.+30     	; 0x7aa <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_interval_mins>15) led_menu_sunset_interval_mins -= 15;
     78c:	80 91 c3 00 	lds	r24, 0x00C3
     790:	90 91 c4 00 	lds	r25, 0x00C4
     794:	80 31       	cpi	r24, 0x10	; 16
     796:	91 05       	cpc	r25, r1
     798:	10 f0       	brcs	.+4      	; 0x79e <ModifyLEDMenu+0x1ec>
     79a:	0f 97       	sbiw	r24, 0x0f	; 15
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 120;
     79e:	88 e7       	ldi	r24, 0x78	; 120
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 c4 00 	sts	0x00C4, r25
     7a6:	80 93 c3 00 	sts	0x00C3, r24
     7aa:	08 95       	ret

000007ac <ShowTime>:
		    break;
	}

}

void ShowTime(unsigned char hour, unsigned char min){
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	1f 92       	push	r1
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	06 2f       	mov	r16, r22
	setCharIndicator(hour/10, 1);
     7bc:	1a e0       	ldi	r17, 0x0A	; 10
     7be:	61 2f       	mov	r22, r17
     7c0:	02 d5       	rcall	.+2564   	; 0x11c6 <__udivmodqi4>
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	99 83       	std	Y+1, r25	; 0x01
     7c6:	54 dd       	rcall	.-1368   	; 0x270 <setCharIndicator>
	setCharIndicator(hour%10, 2);
     7c8:	62 e0       	ldi	r22, 0x02	; 2
     7ca:	99 81       	ldd	r25, Y+1	; 0x01
     7cc:	89 2f       	mov	r24, r25
     7ce:	50 dd       	rcall	.-1376   	; 0x270 <setCharIndicator>
	
	setCharIndicator(min/10, 3);
     7d0:	80 2f       	mov	r24, r16
     7d2:	61 2f       	mov	r22, r17
     7d4:	f8 d4       	rcall	.+2544   	; 0x11c6 <__udivmodqi4>
     7d6:	63 e0       	ldi	r22, 0x03	; 3
     7d8:	99 83       	std	Y+1, r25	; 0x01
     7da:	4a dd       	rcall	.-1388   	; 0x270 <setCharIndicator>
	setCharIndicator(min%10, 4);
     7dc:	64 e0       	ldi	r22, 0x04	; 4
     7de:	99 81       	ldd	r25, Y+1	; 0x01
     7e0:	89 2f       	mov	r24, r25
}
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
void ShowTime(unsigned char hour, unsigned char min){
	setCharIndicator(hour/10, 1);
	setCharIndicator(hour%10, 2);
	
	setCharIndicator(min/10, 3);
	setCharIndicator(min%10, 4);
     7ec:	41 cd       	rjmp	.-1406   	; 0x270 <setCharIndicator>

000007ee <main>:
	setCharIndicator(year/10, 4);
	setCharIndicator(year%10, 5);
}

int main(void)
{
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	1f 92       	push	r1
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
	//Инициализация перефирии
	I2C_Init();
     7f8:	56 d4       	rcall	.+2220   	; 0x10a6 <I2C_Init>
	PWM_init();
     7fa:	6a de       	rcall	.-812    	; 0x4d0 <PWM_init>
	BUT_Init();
     7fc:	e7 dc       	rcall	.-1586   	; 0x1cc <BUT_Init>
	BUTTON_SPROB_LED_DDR |= (1 << BUTTON_SPROB_LED_PIN);
     7fe:	be 9a       	sbi	0x17, 6	; 23
	
   //ADC Init
   ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
     800:	85 e8       	ldi	r24, 0x85	; 133
     802:	86 b9       	out	0x06, r24	; 6
	
	SPI_init();
     804:	5a de       	rcall	.-844    	; 0x4ba <SPI_init>
	timer1_led_init();
     806:	26 dd       	rcall	.-1460   	; 0x254 <timer1_led_init>
	
	//на случай если зависнет мк, то при подаче питания свет будет включен
	PORT_R |= (1<<R);
     808:	95 9a       	sbi	0x12, 5	; 18
	PORT_G |= (1<<G);
     80a:	96 9a       	sbi	0x12, 6	; 18
	PORT_B |= (1<<B);
     80c:	97 9a       	sbi	0x12, 7	; 18
	PORT_W |= (1<<W);
     80e:	c0 9a       	sbi	0x18, 0	; 24
	
    OCR2 = 255;
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	83 bd       	out	0x23, r24	; 35

    TCCR2 |= (1 << WGM21);
     814:	85 b5       	in	r24, 0x25	; 37
     816:	88 60       	ori	r24, 0x08	; 8
     818:	85 bd       	out	0x25, r24	; 37
    // Set to CTC Mode

    TIMSK |= (1 << OCIE2);
     81a:	89 b7       	in	r24, 0x39	; 57
     81c:	80 68       	ori	r24, 0x80	; 128
     81e:	89 bf       	out	0x39, r24	; 57
    //Set interrupt on compare match

    TCCR2 |= ((1 << CS21) | (1 << CS20) | (1 << CS20));
     820:	85 b5       	in	r24, 0x25	; 37
     822:	83 60       	ori	r24, 0x03	; 3
     824:	85 bd       	out	0x25, r24	; 37
    // set prescaler to 64 and starts PWM	
    sei(); 
     826:	78 94       	sei
	
	//1Hz generator
	DDRC &= ~(1 << PC3);
     828:	a3 98       	cbi	0x14, 3	; 20
	I2C_StartCondition();
     82a:	40 d4       	rcall	.+2176   	; 0x10ac <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     82c:	80 ed       	ldi	r24, 0xD0	; 208
     82e:	5a d4       	rcall	.+2228   	; 0x10e4 <I2C_SendByte>
	I2C_SendByte(7);//Переходим на 0x07
     830:	87 e0       	ldi	r24, 0x07	; 7
     832:	58 d4       	rcall	.+2224   	; 0x10e4 <I2C_SendByte>
	I2C_SendByte(0b00010000); //включим SQWE
     834:	80 e1       	ldi	r24, 0x10	; 16
     836:	56 d4       	rcall	.+2220   	; 0x10e4 <I2C_SendByte>
	I2C_StopCondition();
     838:	52 d4       	rcall	.+2212   	; 0x10de <I2C_StopCondition>
	
	
	//Восстанавливаем значения из EEPOM
	led_menu_dawn_hours = eeprom_read_word(&ee_led_menu_dawn_hours);
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	4a d5       	rcall	.+2708   	; 0x12d4 <__eerd_word_m8a>
     840:	90 93 ce 00 	sts	0x00CE, r25
     844:	80 93 cd 00 	sts	0x00CD, r24
	led_menu_dawn_mins = eeprom_read_word(&ee_led_menu_dawn_mins);
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	43 d5       	rcall	.+2694   	; 0x12d4 <__eerd_word_m8a>
     84e:	90 93 cc 00 	sts	0x00CC, r25
     852:	80 93 cb 00 	sts	0x00CB, r24
	led_menu_dawn_interval_mins = eeprom_read_word(&ee_led_menu_dawn_interval_mins);
     856:	86 e0       	ldi	r24, 0x06	; 6
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	3c d5       	rcall	.+2680   	; 0x12d4 <__eerd_word_m8a>
     85c:	90 93 ca 00 	sts	0x00CA, r25
     860:	80 93 c9 00 	sts	0x00C9, r24
	led_menu_sunset_hours = eeprom_read_word(&ee_led_menu_sunset_hours);
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	35 d5       	rcall	.+2666   	; 0x12d4 <__eerd_word_m8a>
     86a:	90 93 c8 00 	sts	0x00C8, r25
     86e:	80 93 c7 00 	sts	0x00C7, r24
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2e d5       	rcall	.+2652   	; 0x12d4 <__eerd_word_m8a>
     878:	90 93 c6 00 	sts	0x00C6, r25
     87c:	80 93 c5 00 	sts	0x00C5, r24
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	27 d5       	rcall	.+2638   	; 0x12d4 <__eerd_word_m8a>
     886:	90 93 c4 00 	sts	0x00C4, r25
     88a:	80 93 c3 00 	sts	0x00C3, r24
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
										now_mode_light = LIGHT_DAWM;
     88e:	22 24       	eor	r2, r2
     890:	23 94       	inc	r2
     892:	31 2c       	mov	r3, r1
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     894:	04 e6       	ldi	r16, 0x64	; 100
     896:	10 e0       	ldi	r17, 0x00	; 0
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
	
	while(1)
	{ 
				adcMaxPWM = read_adc(0)/4;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	e6 dd       	rcall	.-1076   	; 0x468 <read_adc>
     89c:	fc 01       	movw	r30, r24
     89e:	f6 95       	lsr	r31
     8a0:	e7 95       	ror	r30
     8a2:	f6 95       	lsr	r31
     8a4:	e7 95       	ror	r30
     8a6:	f0 93 a3 00 	sts	0x00A3, r31
     8aa:	e0 93 a2 00 	sts	0x00A2, r30
		  	    //Принудительное включение 
				if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     8ae:	80 91 bf 00 	lds	r24, 0x00BF
     8b2:	90 91 c0 00 	lds	r25, 0x00C0
     8b6:	89 2b       	or	r24, r25
     8b8:	09 f0       	breq	.+2      	; 0x8bc <main+0xce>
     8ba:	51 c1       	rjmp	.+674    	; 0xb5e <main+0x370>
     8bc:	80 91 c2 00 	lds	r24, 0x00C2
     8c0:	81 11       	cpse	r24, r1
     8c2:	4d c1       	rjmp	.+666    	; 0xb5e <main+0x370>
				if((PINB & (1 << PB7))){	
     8c4:	b7 9b       	sbis	0x16, 7	; 22
     8c6:	05 c1       	rjmp	.+522    	; 0xad2 <main+0x2e4>
								//Супер дупер крутой рассвет и закат
								
								all_time_in_sec = (((long)hour * 60) + (long)min)*60 + (long)sec;
     8c8:	20 91 db 00 	lds	r18, 0x00DB
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	ac e3       	ldi	r26, 0x3C	; 60
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ea d4       	rcall	.+2516   	; 0x12a8 <__umulhisi3>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	80 91 dc 00 	lds	r24, 0x00DC
     8dc:	28 0f       	add	r18, r24
     8de:	31 1d       	adc	r19, r1
     8e0:	41 1d       	adc	r20, r1
     8e2:	51 1d       	adc	r21, r1
     8e4:	ed d4       	rcall	.+2522   	; 0x12c0 <__muluhisi3>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
     8ea:	80 91 dd 00 	lds	r24, 0x00DD
     8ee:	c8 0e       	add	r12, r24
     8f0:	d1 1c       	adc	r13, r1
     8f2:	e1 1c       	adc	r14, r1
     8f4:	f1 1c       	adc	r15, r1
     8f6:	c0 92 b5 00 	sts	0x00B5, r12
     8fa:	d0 92 b6 00 	sts	0x00B6, r13
     8fe:	e0 92 b7 00 	sts	0x00B7, r14
     902:	f0 92 b8 00 	sts	0x00B8, r15
								all_time_in_sec_dawn = ((long)led_menu_dawn_hours * 60 * 60) + ((long)led_menu_dawn_mins * 60);
     906:	20 91 cd 00 	lds	r18, 0x00CD
     90a:	30 91 ce 00 	lds	r19, 0x00CE
     90e:	40 91 cb 00 	lds	r20, 0x00CB
     912:	50 91 cc 00 	lds	r21, 0x00CC
     916:	a0 e1       	ldi	r26, 0x10	; 16
     918:	be e0       	ldi	r27, 0x0E	; 14
     91a:	c6 d4       	rcall	.+2444   	; 0x12a8 <__umulhisi3>
     91c:	4b 01       	movw	r8, r22
     91e:	5c 01       	movw	r10, r24
     920:	9a 01       	movw	r18, r20
     922:	ac e3       	ldi	r26, 0x3C	; 60
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	c0 d4       	rcall	.+2432   	; 0x12a8 <__umulhisi3>
     928:	86 0e       	add	r8, r22
     92a:	97 1e       	adc	r9, r23
     92c:	a8 1e       	adc	r10, r24
     92e:	b9 1e       	adc	r11, r25
     930:	80 92 ad 00 	sts	0x00AD, r8
     934:	90 92 ae 00 	sts	0x00AE, r9
     938:	a0 92 af 00 	sts	0x00AF, r10
     93c:	b0 92 b0 00 	sts	0x00B0, r11
								
								if(all_time_in_sec_dawn < all_time_in_sec){
     940:	8c 14       	cp	r8, r12
     942:	9d 04       	cpc	r9, r13
     944:	ae 04       	cpc	r10, r14
     946:	bf 04       	cpc	r11, r15
     948:	08 f0       	brcs	.+2      	; 0x94c <main+0x15e>
     94a:	a3 c0       	rjmp	.+326    	; 0xa92 <main+0x2a4>
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
     94c:	26 01       	movw	r4, r12
     94e:	37 01       	movw	r6, r14
     950:	48 18       	sub	r4, r8
     952:	59 08       	sbc	r5, r9
     954:	6a 08       	sbc	r6, r10
     956:	7b 08       	sbc	r7, r11
     958:	40 92 d3 00 	sts	0x00D3, r4
     95c:	50 92 d4 00 	sts	0x00D4, r5
     960:	60 92 d5 00 	sts	0x00D5, r6
     964:	70 92 d6 00 	sts	0x00D6, r7
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
     968:	a0 90 c9 00 	lds	r10, 0x00C9
     96c:	b0 90 ca 00 	lds	r11, 0x00CA
     970:	c2 01       	movw	r24, r4
     972:	6c e3       	ldi	r22, 0x3C	; 60
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	47 d4       	rcall	.+2190   	; 0x1206 <__divmodhi4>
     978:	6a 15       	cp	r22, r10
     97a:	7b 05       	cpc	r23, r11
     97c:	18 f5       	brcc	.+70     	; 0x9c4 <main+0x1d6>
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     97e:	a3 01       	movw	r20, r6
     980:	92 01       	movw	r18, r4
     982:	21 50       	subi	r18, 0x01	; 1
     984:	31 09       	sbc	r19, r1
     986:	41 09       	sbc	r20, r1
     988:	51 09       	sbc	r21, r1
								
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
     98a:	bf 01       	movw	r22, r30
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     990:	6a 50       	subi	r22, 0x0A	; 10
     992:	71 09       	sbc	r23, r1
     994:	81 09       	sbc	r24, r1
     996:	91 09       	sbc	r25, r1
     998:	07 d4       	rcall	.+2062   	; 0x11a8 <__mulsi3>
								
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
     99a:	4c e3       	ldi	r20, 0x3C	; 60
     99c:	4a 9d       	mul	r20, r10
     99e:	90 01       	movw	r18, r0
     9a0:	4b 9d       	mul	r20, r11
     9a2:	30 0d       	add	r19, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	31 09       	sbc	r19, r1
     9ae:	41 09       	sbc	r20, r1
     9b0:	51 09       	sbc	r21, r1
     9b2:	5e d4       	rcall	.+2236   	; 0x1270 <__divmodsi4>
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	82 0f       	add	r24, r18
     9b8:	d5 dc       	rcall	.-1622   	; 0x364 <PWM_set.part.0>
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, adcMaxPWM));
										now_mode_light = LIGHT_DAWM;
     9ba:	30 92 bc 00 	sts	0x00BC, r3
     9be:	20 92 bb 00 	sts	0x00BB, r2
     9c2:	6f c0       	rjmp	.+222    	; 0xaa2 <main+0x2b4>
									}else{
										all_time_in_sec_sunset = ((long)led_menu_sunset_hours * 60 * 60) + ((long)led_menu_sunset_mins * 60);
     9c4:	20 91 c7 00 	lds	r18, 0x00C7
     9c8:	30 91 c8 00 	lds	r19, 0x00C8
     9cc:	40 91 c5 00 	lds	r20, 0x00C5
     9d0:	50 91 c6 00 	lds	r21, 0x00C6
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	be e0       	ldi	r27, 0x0E	; 14
     9d8:	67 d4       	rcall	.+2254   	; 0x12a8 <__umulhisi3>
     9da:	4b 01       	movw	r8, r22
     9dc:	5c 01       	movw	r10, r24
     9de:	9a 01       	movw	r18, r20
     9e0:	ac e3       	ldi	r26, 0x3C	; 60
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	61 d4       	rcall	.+2242   	; 0x12a8 <__umulhisi3>
     9e6:	86 0e       	add	r8, r22
     9e8:	97 1e       	adc	r9, r23
     9ea:	a8 1e       	adc	r10, r24
     9ec:	b9 1e       	adc	r11, r25
     9ee:	80 92 b1 00 	sts	0x00B1, r8
     9f2:	90 92 b2 00 	sts	0x00B2, r9
     9f6:	a0 92 b3 00 	sts	0x00B3, r10
     9fa:	b0 92 b4 00 	sts	0x00B4, r11
																				
										if(all_time_in_sec_sunset  < all_time_in_sec){
     9fe:	8c 14       	cp	r8, r12
     a00:	9d 04       	cpc	r9, r13
     a02:	ae 04       	cpc	r10, r14
     a04:	bf 04       	cpc	r11, r15
     a06:	e0 f5       	brcc	.+120    	; 0xa80 <main+0x292>
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
     a08:	c8 18       	sub	r12, r8
     a0a:	d9 08       	sbc	r13, r9
     a0c:	ea 08       	sbc	r14, r10
     a0e:	fb 08       	sbc	r15, r11
     a10:	c0 92 cf 00 	sts	0x00CF, r12
     a14:	d0 92 d0 00 	sts	0x00D0, r13
     a18:	e0 92 d1 00 	sts	0x00D1, r14
     a1c:	f0 92 d2 00 	sts	0x00D2, r15
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
     a20:	a0 90 c3 00 	lds	r10, 0x00C3
     a24:	b0 90 c4 00 	lds	r11, 0x00C4
     a28:	c6 01       	movw	r24, r12
     a2a:	6c e3       	ldi	r22, 0x3C	; 60
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	eb d3       	rcall	.+2006   	; 0x1206 <__divmodhi4>
     a30:	6a 15       	cp	r22, r10
     a32:	7b 05       	cpc	r23, r11
     a34:	70 f5       	brcc	.+92     	; 0xa92 <main+0x2a4>
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, adcMaxPWM, 10));
     a36:	2f 01       	movw	r4, r30
     a38:	61 2c       	mov	r6, r1
     a3a:	71 2c       	mov	r7, r1
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     a3c:	a7 01       	movw	r20, r14
     a3e:	96 01       	movw	r18, r12
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	31 09       	sbc	r19, r1
     a44:	41 09       	sbc	r20, r1
     a46:	51 09       	sbc	r21, r1
     a48:	6a e0       	ldi	r22, 0x0A	; 10
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	64 19       	sub	r22, r4
     a52:	75 09       	sbc	r23, r5
     a54:	86 09       	sbc	r24, r6
     a56:	97 09       	sbc	r25, r7
     a58:	a7 d3       	rcall	.+1870   	; 0x11a8 <__mulsi3>
																				
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, adcMaxPWM, 10));
     a5a:	4c e3       	ldi	r20, 0x3C	; 60
     a5c:	4a 9d       	mul	r20, r10
     a5e:	90 01       	movw	r18, r0
     a60:	4b 9d       	mul	r20, r11
     a62:	30 0d       	add	r19, r0
     a64:	11 24       	eor	r1, r1
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     a6a:	21 50       	subi	r18, 0x01	; 1
     a6c:	31 09       	sbc	r19, r1
     a6e:	41 09       	sbc	r20, r1
     a70:	51 09       	sbc	r21, r1
     a72:	fe d3       	rcall	.+2044   	; 0x1270 <__divmodsi4>
     a74:	82 2f       	mov	r24, r18
     a76:	84 0d       	add	r24, r4
     a78:	75 dc       	rcall	.-1814   	; 0x364 <PWM_set.part.0>
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, adcMaxPWM, 10));
												now_mode_light = LIGHT_SUNSET;
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <main+0x29a>
     a80:	8e 2f       	mov	r24, r30
     a82:	70 dc       	rcall	.-1824   	; 0x364 <PWM_set.part.0>
												PWM_set(RGBW, 0x00); 
												now_mode_light = LIGHT_OFF;
											}
										}else{ 
											PWM_set(RGBW, adcMaxPWM); 
											now_mode_light = LIGHT_FULL;
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 bc 00 	sts	0x00BC, r25
     a8c:	80 93 bb 00 	sts	0x00BB, r24
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <main+0x2b4>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	67 dc       	rcall	.-1842   	; 0x364 <PWM_set.part.0>
										}
									 }
								}else{  
									PWM_set(RGBW, 0x00); 
									now_mode_light = LIGHT_OFF;
     a96:	e4 e0       	ldi	r30, 0x04	; 4
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	f0 93 bc 00 	sts	0x00BC, r31
     a9e:	e0 93 bb 00 	sts	0x00BB, r30
								}			
					
								if(prev_now_mode_light != now_mode_light ){
     aa2:	20 91 b9 00 	lds	r18, 0x00B9
     aa6:	30 91 ba 00 	lds	r19, 0x00BA
     aaa:	80 91 bb 00 	lds	r24, 0x00BB
     aae:	90 91 bc 00 	lds	r25, 0x00BC
     ab2:	28 17       	cp	r18, r24
     ab4:	39 07       	cpc	r19, r25
     ab6:	09 f0       	breq	.+2      	; 0xaba <main+0x2cc>
									ClearALLCharIndicator();
     ab8:	f4 db       	rcall	.-2072   	; 0x2a2 <ClearALLCharIndicator>
								}
					
								prev_now_mode_light = now_mode_light;
     aba:	80 91 bb 00 	lds	r24, 0x00BB
     abe:	90 91 bc 00 	lds	r25, 0x00BC
     ac2:	90 93 ba 00 	sts	0x00BA, r25
     ac6:	80 93 b9 00 	sts	0x00B9, r24
								TIMSK |= (1 << TOIE0);
     aca:	89 b7       	in	r24, 0x39	; 57
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	89 bf       	out	0x39, r24	; 57
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <main+0x2e8>
     ad2:	8e 2f       	mov	r24, r30
     ad4:	47 dc       	rcall	.-1906   	; 0x364 <PWM_set.part.0>
						PWM_set(RGBW, adcMaxPWM); 
					}
					
					//Читаем время
						
					I2C_SendByteByADDR(0,0b11010000);	//Установка адреса в 0
     ad6:	60 ed       	ldi	r22, 0xD0	; 208
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	1e d3       	rcall	.+1596   	; 0x1118 <I2C_SendByteByADDR>
					I2C_StartCondition(); //Отправим условие START
     adc:	e7 d2       	rcall	.+1486   	; 0x10ac <I2C_StartCondition>
					I2C_SendByte(0b11010001); //Бит на чтение
     ade:	81 ed       	ldi	r24, 0xD1	; 209
     ae0:	01 d3       	rcall	.+1538   	; 0x10e4 <I2C_SendByte>
					sec_ = I2C_ReadByte();
     ae2:	2e d3       	rcall	.+1628   	; 0x1140 <I2C_ReadByte>
     ae4:	80 93 e6 00 	sts	0x00E6, r24
					min_ = I2C_ReadByte();
     ae8:	2b d3       	rcall	.+1622   	; 0x1140 <I2C_ReadByte>
     aea:	80 93 e0 00 	sts	0x00E0, r24
					hour_ = I2C_ReadByte();
     aee:	28 d3       	rcall	.+1616   	; 0x1140 <I2C_ReadByte>
     af0:	80 93 e4 00 	sts	0x00E4, r24
					day_ = I2C_ReadByte();
     af4:	25 d3       	rcall	.+1610   	; 0x1140 <I2C_ReadByte>
     af6:	80 93 e2 00 	sts	0x00E2, r24
					date_ = I2C_ReadByte();
     afa:	22 d3       	rcall	.+1604   	; 0x1140 <I2C_ReadByte>
     afc:	80 93 de 00 	sts	0x00DE, r24
					month_ = I2C_ReadByte();
     b00:	1f d3       	rcall	.+1598   	; 0x1140 <I2C_ReadByte>
     b02:	80 93 e7 00 	sts	0x00E7, r24
					year_ = I2C_ReadLastByte();
     b06:	36 d3       	rcall	.+1644   	; 0x1174 <I2C_ReadLastByte>
     b08:	80 93 df 00 	sts	0x00DF, r24
					I2C_StopCondition(); //Отправим условие STOP
     b0c:	e8 d2       	rcall	.+1488   	; 0x10de <I2C_StopCondition>
					sec = RTC_ConvertFromDec(sec_); //Преобразуем в десятичный формат
     b0e:	80 91 e6 00 	lds	r24, 0x00E6
     b12:	b7 d2       	rcall	.+1390   	; 0x1082 <RTC_ConvertFromDec>
     b14:	80 93 dd 00 	sts	0x00DD, r24
					min = RTC_ConvertFromDec(min_); //Преобразуем в десятичный формат
     b18:	80 91 e0 00 	lds	r24, 0x00E0
     b1c:	b2 d2       	rcall	.+1380   	; 0x1082 <RTC_ConvertFromDec>
     b1e:	80 93 dc 00 	sts	0x00DC, r24
					hour = RTC_ConvertFromDec(hour_); //Преобразуем в десятичный формат
     b22:	80 91 e4 00 	lds	r24, 0x00E4
     b26:	ad d2       	rcall	.+1370   	; 0x1082 <RTC_ConvertFromDec>
     b28:	80 93 db 00 	sts	0x00DB, r24
					day = RTC_ConvertFromDec(day_); //Преобразуем в десятичный формат
     b2c:	80 91 e2 00 	lds	r24, 0x00E2
     b30:	a8 d2       	rcall	.+1360   	; 0x1082 <RTC_ConvertFromDec>
     b32:	80 93 da 00 	sts	0x00DA, r24
					year = RTC_ConvertFromDec(year_); //Преобразуем в десятичный формат
     b36:	80 91 df 00 	lds	r24, 0x00DF
     b3a:	a3 d2       	rcall	.+1350   	; 0x1082 <RTC_ConvertFromDec>
     b3c:	80 93 d7 00 	sts	0x00D7, r24
					month = RTC_ConvertFromDec(month_); //Преобразуем в десятичный формат
     b40:	80 91 e7 00 	lds	r24, 0x00E7
     b44:	9e d2       	rcall	.+1340   	; 0x1082 <RTC_ConvertFromDec>
     b46:	80 93 d8 00 	sts	0x00D8, r24
					date = RTC_ConvertFromDec(date_); //Преобразуем в десятичный формат
     b4a:	80 91 de 00 	lds	r24, 0x00DE
     b4e:	99 d2       	rcall	.+1330   	; 0x1082 <RTC_ConvertFromDec>
     b50:	80 93 d9 00 	sts	0x00D9, r24
					if((PINB & (1 << PB7))){
     b54:	b7 9b       	sbis	0x16, 7	; 22
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <main+0x37e>
					  TIMSK |= (1 << TOIE0);
     b58:	89 b7       	in	r24, 0x39	; 57
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <main+0x37c>
					}
		}else{
		    PORT_R &= ~(1<<R);
     b5e:	95 98       	cbi	0x12, 5	; 18
			PORT_G &= ~(1<<G);
     b60:	96 98       	cbi	0x12, 6	; 18
			PORT_B &= ~(1<<B);
     b62:	97 98       	cbi	0x12, 7	; 18
			PORT_W &= ~(1<<W);
     b64:	c0 98       	cbi	0x18, 0	; 24
			TIMSK &=~ (1 << TOIE0);
     b66:	89 b7       	in	r24, 0x39	; 57
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	89 bf       	out	0x39, r24	; 57
		}
		
		//Модификация данных если выключены настроки и изменяется значение
	    if((now_mode != MODE_NONE) && ((increment_mode == MODE_INC) || (increment_mode == MODE_DISINC)))
     b6c:	80 91 c2 00 	lds	r24, 0x00C2
     b70:	88 23       	and	r24, r24
     b72:	41 f0       	breq	.+16     	; 0xb84 <main+0x396>
     b74:	80 91 c1 00 	lds	r24, 0x00C1
     b78:	81 50       	subi	r24, 0x01	; 1
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	18 f4       	brcc	.+6      	; 0xb84 <main+0x396>
		{
				ModifyRTC();
     b7e:	b9 dc       	rcall	.-1678   	; 0x4f2 <ModifyRTC>
				increment_mode = MODE_NONE_INC;
     b80:	10 92 c1 00 	sts	0x00C1, r1
	    }
		
	    if((now_mode_led_menu != MODE_NONE) && ((increment_mode_led_menu == MODE_INC) || (increment_mode_led_menu == MODE_DISINC)))
     b84:	80 91 bf 00 	lds	r24, 0x00BF
     b88:	90 91 c0 00 	lds	r25, 0x00C0
     b8c:	89 2b       	or	r24, r25
     b8e:	61 f0       	breq	.+24     	; 0xba8 <main+0x3ba>
     b90:	80 91 bd 00 	lds	r24, 0x00BD
     b94:	90 91 be 00 	lds	r25, 0x00BE
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	02 97       	sbiw	r24, 0x02	; 2
     b9c:	28 f4       	brcc	.+10     	; 0xba8 <main+0x3ba>
	    {
				    ModifyLEDMenu();
     b9e:	09 dd       	rcall	.-1518   	; 0x5b2 <ModifyLEDMenu>
				    increment_mode_led_menu = MODE_NONE_INC;
     ba0:	10 92 be 00 	sts	0x00BE, r1
     ba4:	10 92 bd 00 	sts	0x00BD, r1
	    }
				
		//Опрашиваем кнопки				
		BUT_Poll();
     ba8:	39 db       	rcall	.-2446   	; 0x21c <BUT_Poll>
		button = BUT_GetBut(); 
     baa:	fb da       	rcall	.-2570   	; 0x1a2 <BUT_GetBut>
     bac:	80 93 e3 00 	sts	0x00E3, r24
		if(button){
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <main+0x3c8>
     bb4:	f3 c0       	rjmp	.+486    	; 0xd9c <main+0x5ae>
		    button_code = BUT_GetBut();  
     bb6:	f5 da       	rcall	.-2582   	; 0x1a2 <BUT_GetBut>
     bb8:	80 93 e1 00 	sts	0x00E1, r24
			switch(button){
     bbc:	90 91 e3 00 	lds	r25, 0x00E3
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	39 f1       	breq	.+78     	; 0xc12 <main+0x424>
     bc4:	18 f4       	brcc	.+6      	; 0xbcc <main+0x3de>
     bc6:	91 30       	cpi	r25, 0x01	; 1
     bc8:	59 f0       	breq	.+22     	; 0xbe0 <main+0x3f2>
     bca:	e8 c0       	rjmp	.+464    	; 0xd9c <main+0x5ae>
     bcc:	20 91 bf 00 	lds	r18, 0x00BF
     bd0:	30 91 c0 00 	lds	r19, 0x00C0
     bd4:	93 30       	cpi	r25, 0x03	; 3
     bd6:	c1 f1       	breq	.+112    	; 0xc48 <main+0x45a>
     bd8:	94 30       	cpi	r25, 0x04	; 4
     bda:	09 f4       	brne	.+2      	; 0xbde <main+0x3f0>
     bdc:	66 c0       	rjmp	.+204    	; 0xcaa <main+0x4bc>
     bde:	de c0       	rjmp	.+444    	; 0xd9c <main+0x5ae>
				//Plus
				case 1:   
				 if(button_code == BUT_RELEASED_EN){
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <main+0x3f8>
     be4:	db c0       	rjmp	.+438    	; 0xd9c <main+0x5ae>
				  led_strob();
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	5c dc       	rcall	.-1864   	; 0x4a2 <led_strob>
				  if(now_mode != MODE_NONE){
     bea:	90 91 c2 00 	lds	r25, 0x00C2
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	99 23       	and	r25, r25
     bf2:	19 f0       	breq	.+6      	; 0xbfa <main+0x40c>
				   increment_mode = MODE_INC; 
     bf4:	80 93 c1 00 	sts	0x00C1, r24
     bf8:	d1 c0       	rjmp	.+418    	; 0xd9c <main+0x5ae>
				  }else if(now_mode_led_menu != MODE_NONE){
     bfa:	80 91 bf 00 	lds	r24, 0x00BF
     bfe:	90 91 c0 00 	lds	r25, 0x00C0
     c02:	89 2b       	or	r24, r25
     c04:	09 f4       	brne	.+2      	; 0xc08 <main+0x41a>
     c06:	ca c0       	rjmp	.+404    	; 0xd9c <main+0x5ae>
				   increment_mode_led_menu = MODE_INC;
     c08:	30 92 be 00 	sts	0x00BE, r3
     c0c:	20 92 bd 00 	sts	0x00BD, r2
     c10:	c5 c0       	rjmp	.+394    	; 0xd9c <main+0x5ae>
				 }
				break;
			
				//Minus
				case 2: 
				 if(button_code == BUT_RELEASED_EN){
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	09 f0       	breq	.+2      	; 0xc18 <main+0x42a>
     c16:	c2 c0       	rjmp	.+388    	; 0xd9c <main+0x5ae>
				  led_strob();
     c18:	99 83       	std	Y+1, r25	; 0x01
     c1a:	43 dc       	rcall	.-1914   	; 0x4a2 <led_strob>
				  if(now_mode != MODE_NONE){
     c1c:	80 91 c2 00 	lds	r24, 0x00C2
     c20:	99 81       	ldd	r25, Y+1	; 0x01
     c22:	88 23       	and	r24, r24
     c24:	19 f0       	breq	.+6      	; 0xc2c <main+0x43e>
				   increment_mode = MODE_DISINC;
     c26:	90 93 c1 00 	sts	0x00C1, r25
     c2a:	b8 c0       	rjmp	.+368    	; 0xd9c <main+0x5ae>
				  }else if(now_mode_led_menu != MODE_NONE){
     c2c:	80 91 bf 00 	lds	r24, 0x00BF
     c30:	90 91 c0 00 	lds	r25, 0x00C0
     c34:	89 2b       	or	r24, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <main+0x44c>
     c38:	b1 c0       	rjmp	.+354    	; 0xd9c <main+0x5ae>
				   increment_mode_led_menu = MODE_DISINC;
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 be 00 	sts	0x00BE, r25
     c42:	80 93 bd 00 	sts	0x00BD, r24
     c46:	aa c0       	rjmp	.+340    	; 0xd9c <main+0x5ae>
				 }
				break;
			
				//Okey
				case 3: 
				  if(now_mode_led_menu == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode == MODE_NONE) || (now_mode != MODE_NONE && button_code == BUT_RELEASED_EN))){ 
     c48:	23 2b       	or	r18, r19
     c4a:	09 f0       	breq	.+2      	; 0xc4e <main+0x460>
     c4c:	a7 c0       	rjmp	.+334    	; 0xd9c <main+0x5ae>
     c4e:	90 91 c2 00 	lds	r25, 0x00C2
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	11 f4       	brne	.+4      	; 0xc5a <main+0x46c>
     c56:	99 23       	and	r25, r25
     c58:	31 f0       	breq	.+12     	; 0xc66 <main+0x478>
     c5a:	99 23       	and	r25, r25
     c5c:	09 f4       	brne	.+2      	; 0xc60 <main+0x472>
     c5e:	9e c0       	rjmp	.+316    	; 0xd9c <main+0x5ae>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <main+0x478>
     c64:	9b c0       	rjmp	.+310    	; 0xd9c <main+0x5ae>
				   led_strob();
     c66:	1d dc       	rcall	.-1990   	; 0x4a2 <led_strob>
				   if(now_mode == MODE_NONE){
     c68:	80 91 c2 00 	lds	r24, 0x00C2
     c6c:	81 11       	cpse	r24, r1
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <main+0x48e>
					//Редактируем часы
					now_mode = MODE_EDIT_HOURS;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 c2 00 	sts	0x00C2, r24
                    ClearALLCharIndicator();
     c76:	15 db       	rcall	.-2518   	; 0x2a2 <ClearALLCharIndicator>
                    ClearALLDotsIndicator();
     c78:	07 db       	rcall	.-2546   	; 0x288 <ClearALLDotsIndicator>
     c7a:	90 c0       	rjmp	.+288    	; 0xd9c <main+0x5ae>
				   }else if(now_mode == MODE_EDIT_HOURS){
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	21 f4       	brne	.+8      	; 0xc88 <main+0x49a>
					//Минуты
					now_mode = MODE_EDIT_MINUTES; 
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	80 93 c2 00 	sts	0x00C2, r24
     c86:	8a c0       	rjmp	.+276    	; 0xd9c <main+0x5ae>
				   }else if(now_mode == MODE_EDIT_MINUTES){
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	09 f0       	breq	.+2      	; 0xc8e <main+0x4a0>
     c8c:	87 c0       	rjmp	.+270    	; 0xd9c <main+0x5ae>
					I2C_StartCondition();
     c8e:	0e d2       	rcall	.+1052   	; 0x10ac <I2C_StartCondition>
					I2C_SendByte(0b11010000);
     c90:	80 ed       	ldi	r24, 0xD0	; 208
     c92:	28 d2       	rcall	.+1104   	; 0x10e4 <I2C_SendByte>
					I2C_SendByte(0);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	26 d2       	rcall	.+1100   	; 0x10e4 <I2C_SendByte>
					I2C_SendByte(0);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	24 d2       	rcall	.+1096   	; 0x10e4 <I2C_SendByte>
					I2C_StopCondition();
     c9c:	20 d2       	rcall	.+1088   	; 0x10de <I2C_StopCondition>
					ClearALLCharIndicator();
     c9e:	01 db       	rcall	.-2558   	; 0x2a2 <ClearALLCharIndicator>
					now_mode = MODE_NONE;
     ca0:	10 92 c2 00 	sts	0x00C2, r1
					increment_mode = MODE_NONE_INC;
     ca4:	10 92 c1 00 	sts	0x00C1, r1
     ca8:	79 c0       	rjmp	.+242    	; 0xd9c <main+0x5ae>
				   }*/
				  }
				break;
			
				case 4: 
				  if(now_mode == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode_led_menu == MODE_NONE) || (now_mode_led_menu != MODE_NONE && button_code == BUT_RELEASED_EN))){
     caa:	90 91 c2 00 	lds	r25, 0x00C2
     cae:	91 11       	cpse	r25, r1
     cb0:	75 c0       	rjmp	.+234    	; 0xd9c <main+0x5ae>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	19 f4       	brne	.+6      	; 0xcbc <main+0x4ce>
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	31 f0       	breq	.+12     	; 0xcc8 <main+0x4da>
     cbc:	23 2b       	or	r18, r19
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <main+0x4d4>
     cc0:	6d c0       	rjmp	.+218    	; 0xd9c <main+0x5ae>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <main+0x4da>
     cc6:	6a c0       	rjmp	.+212    	; 0xd9c <main+0x5ae>
						  led_strob();
     cc8:	ec db       	rcall	.-2088   	; 0x4a2 <led_strob>
						  if(now_mode_led_menu == MODE_NONE){
     cca:	80 91 bf 00 	lds	r24, 0x00BF
     cce:	90 91 c0 00 	lds	r25, 0x00C0
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	29 f4       	brne	.+10     	; 0xce0 <main+0x4f2>
							//Часы начала рассвета
							ClearALLCharIndicator();
     cd6:	e5 da       	rcall	.-2614   	; 0x2a2 <ClearALLCharIndicator>
							ClearALLDotsIndicator();
     cd8:	d7 da       	rcall	.-2642   	; 0x288 <ClearALLDotsIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
     cda:	e7 e0       	ldi	r30, 0x07	; 7
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	35 c0       	rjmp	.+106    	; 0xd4a <main+0x55c>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_HOURS){
     ce0:	87 30       	cpi	r24, 0x07	; 7
     ce2:	91 05       	cpc	r25, r1
     ce4:	51 f4       	brne	.+20     	; 0xcfa <main+0x50c>
							eeprom_write_word(&ee_led_menu_dawn_hours , led_menu_dawn_hours);
     ce6:	60 91 cd 00 	lds	r22, 0x00CD
     cea:	70 91 ce 00 	lds	r23, 0x00CE
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	f5 d2       	rcall	.+1514   	; 0x12de <__eewr_word_m8a>
							//Минуты начала рассвета
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_MINS;
     cf4:	88 e0       	ldi	r24, 0x08	; 8
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	3a c0       	rjmp	.+116    	; 0xd6e <main+0x580>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_MINS){
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	91 05       	cpc	r25, r1
     cfe:	59 f4       	brne	.+22     	; 0xd16 <main+0x528>
							eeprom_write_word(&ee_led_menu_dawn_mins, led_menu_dawn_mins);
     d00:	60 91 cb 00 	lds	r22, 0x00CB
     d04:	70 91 cc 00 	lds	r23, 0x00CC
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	e8 d2       	rcall	.+1488   	; 0x12de <__eewr_word_m8a>
							//Длительность рассвета
							ClearALLCharIndicator();
     d0e:	c9 da       	rcall	.-2670   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_INTERVAL_DAWN;
     d10:	e9 e0       	ldi	r30, 0x09	; 9
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	1a c0       	rjmp	.+52     	; 0xd4a <main+0x55c>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_DAWN){
     d16:	89 30       	cpi	r24, 0x09	; 9
     d18:	91 05       	cpc	r25, r1
     d1a:	59 f4       	brne	.+22     	; 0xd32 <main+0x544>
							  eeprom_write_word(&ee_led_menu_dawn_interval_mins, led_menu_dawn_interval_mins);
     d1c:	60 91 c9 00 	lds	r22, 0x00C9
     d20:	70 91 ca 00 	lds	r23, 0x00CA
     d24:	86 e0       	ldi	r24, 0x06	; 6
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	da d2       	rcall	.+1460   	; 0x12de <__eewr_word_m8a>
							//Часы начала заката
							ClearALLCharIndicator();
     d2a:	bb da       	rcall	.-2698   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_HOURS;
     d2c:	8a e0       	ldi	r24, 0x0A	; 10
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	1e c0       	rjmp	.+60     	; 0xd6e <main+0x580>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_HOURS){
     d32:	8a 30       	cpi	r24, 0x0A	; 10
     d34:	91 05       	cpc	r25, r1
     d36:	71 f4       	brne	.+28     	; 0xd54 <main+0x566>
							 eeprom_write_word(&ee_led_menu_sunset_hours, led_menu_sunset_hours);
     d38:	60 91 c7 00 	lds	r22, 0x00C7
     d3c:	70 91 c8 00 	lds	r23, 0x00C8
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	cc d2       	rcall	.+1432   	; 0x12de <__eewr_word_m8a>
							 //Минуты начала заката
							 now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_MINS;
     d46:	eb e0       	ldi	r30, 0x0B	; 11
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	f0 93 c0 00 	sts	0x00C0, r31
     d4e:	e0 93 bf 00 	sts	0x00BF, r30
     d52:	24 c0       	rjmp	.+72     	; 0xd9c <main+0x5ae>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_MINS){
     d54:	8b 30       	cpi	r24, 0x0B	; 11
     d56:	91 05       	cpc	r25, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <main+0x58a>
							 eeprom_write_word(&ee_led_menu_sunset_mins, led_menu_sunset_mins);
     d5a:	60 91 c5 00 	lds	r22, 0x00C5
     d5e:	70 91 c6 00 	lds	r23, 0x00C6
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	bb d2       	rcall	.+1398   	; 0x12de <__eewr_word_m8a>
							 //Длительность заката
							 ClearALLCharIndicator();
     d68:	9c da       	rcall	.-2760   	; 0x2a2 <ClearALLCharIndicator>
							 now_mode_led_menu = MODE_EDIT_INTERVAL_SUNSET;
     d6a:	8c e0       	ldi	r24, 0x0C	; 12
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 c0 00 	sts	0x00C0, r25
     d72:	80 93 bf 00 	sts	0x00BF, r24
     d76:	12 c0       	rjmp	.+36     	; 0xd9c <main+0x5ae>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_SUNSET){
     d78:	0c 97       	sbiw	r24, 0x0c	; 12
     d7a:	81 f4       	brne	.+32     	; 0xd9c <main+0x5ae>
							eeprom_write_word(&ee_led_menu_sunset_interval_mins, led_menu_sunset_interval_mins);
     d7c:	60 91 c3 00 	lds	r22, 0x00C3
     d80:	70 91 c4 00 	lds	r23, 0x00C4
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	aa d2       	rcall	.+1364   	; 0x12de <__eewr_word_m8a>
							ClearALLCharIndicator();
     d8a:	8b da       	rcall	.-2794   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_NONE;
     d8c:	10 92 c0 00 	sts	0x00C0, r1
     d90:	10 92 bf 00 	sts	0x00BF, r1
							increment_mode_led_menu = MODE_NONE_INC;
     d94:	10 92 be 00 	sts	0x00BE, r1
     d98:	10 92 bd 00 	sts	0x00BD, r1
			}
		}

        //Вывод текущего режима, если мы не в меню
		
        if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     d9c:	80 91 bf 00 	lds	r24, 0x00BF
     da0:	90 91 c0 00 	lds	r25, 0x00C0
     da4:	89 2b       	or	r24, r25
     da6:	11 f5       	brne	.+68     	; 0xdec <main+0x5fe>
     da8:	80 91 c2 00 	lds	r24, 0x00C2
     dac:	81 11       	cpse	r24, r1
     dae:	1e c0       	rjmp	.+60     	; 0xdec <main+0x5fe>
			ShowTime(hour, min);
     db0:	60 91 dc 00 	lds	r22, 0x00DC
     db4:	80 91 db 00 	lds	r24, 0x00DB
     db8:	f9 dc       	rcall	.-1550   	; 0x7ac <ShowTime>
			setDotIndicator(2, (PINC & (1 << PC3)));
     dba:	63 b3       	in	r22, 0x13	; 19
     dbc:	68 70       	andi	r22, 0x08	; 8
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	5d da       	rcall	.-2886   	; 0x27c <setDotIndicator>
			if(now_mode_light == LIGHT_DAWM){
     dc2:	80 91 bb 00 	lds	r24, 0x00BB
     dc6:	90 91 bc 00 	lds	r25, 0x00BC
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	31 f4       	brne	.+12     	; 0xddc <main+0x5ee>
				setCharIndicator(18, 0);
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	82 e1       	ldi	r24, 0x12	; 18
     dd4:	4d da       	rcall	.-2918   	; 0x270 <setCharIndicator>
				setCharIndicator(18, 5);
     dd6:	65 e0       	ldi	r22, 0x05	; 5
     dd8:	82 e1       	ldi	r24, 0x12	; 18
     dda:	07 c0       	rjmp	.+14     	; 0xdea <main+0x5fc>
			}else if(now_mode_light == LIGHT_SUNSET){
     ddc:	02 97       	sbiw	r24, 0x02	; 2
     dde:	31 f4       	brne	.+12     	; 0xdec <main+0x5fe>
				setCharIndicator(19, 0);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	83 e1       	ldi	r24, 0x13	; 19
     de4:	45 da       	rcall	.-2934   	; 0x270 <setCharIndicator>
				setCharIndicator(19, 5);
     de6:	65 e0       	ldi	r22, 0x05	; 5
     de8:	83 e1       	ldi	r24, 0x13	; 19
     dea:	42 da       	rcall	.-2940   	; 0x270 <setCharIndicator>
			   setCharIndicator(19, 5);
           }
		   */
        }
		
		if(now_mode_led_menu){
     dec:	80 91 bf 00 	lds	r24, 0x00BF
     df0:	90 91 c0 00 	lds	r25, 0x00C0
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	09 f4       	brne	.+2      	; 0xdfa <main+0x60c>
     df8:	f5 c0       	rjmp	.+490    	; 0xfe4 <main+0x7f6>
			//Меню настроки заката/рассвета
			switch(now_mode_led_menu){
     dfa:	89 30       	cpi	r24, 0x09	; 9
     dfc:	91 05       	cpc	r25, r1
     dfe:	09 f4       	brne	.+2      	; 0xe02 <main+0x614>
     e00:	73 c0       	rjmp	.+230    	; 0xee8 <main+0x6fa>
     e02:	30 f4       	brcc	.+12     	; 0xe10 <main+0x622>
     e04:	87 30       	cpi	r24, 0x07	; 7
     e06:	91 05       	cpc	r25, r1
     e08:	69 f0       	breq	.+26     	; 0xe24 <main+0x636>
     e0a:	08 97       	sbiw	r24, 0x08	; 8
     e0c:	b9 f1       	breq	.+110    	; 0xe7c <main+0x68e>
     e0e:	ea c0       	rjmp	.+468    	; 0xfe4 <main+0x7f6>
     e10:	8b 30       	cpi	r24, 0x0B	; 11
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <main+0x62a>
     e16:	4a c0       	rjmp	.+148    	; 0xeac <main+0x6be>
     e18:	08 f4       	brcc	.+2      	; 0xe1c <main+0x62e>
     e1a:	8d c0       	rjmp	.+282    	; 0xf36 <main+0x748>
     e1c:	0c 97       	sbiw	r24, 0x0c	; 12
     e1e:	09 f4       	brne	.+2      	; 0xe22 <main+0x634>
     e20:	ba c0       	rjmp	.+372    	; 0xf96 <main+0x7a8>
     e22:	e0 c0       	rjmp	.+448    	; 0xfe4 <main+0x7f6>
				case MODE_EDIT_START_TIME_DAWN_HOURS: 
				  if(!twoHZ_status){
     e24:	80 91 a4 00 	lds	r24, 0x00A4
     e28:	81 11       	cpse	r24, r1
     e2a:	13 c0       	rjmp	.+38     	; 0xe52 <main+0x664>
					   setCharIndicator(led_menu_dawn_hours/10, 1);
     e2c:	80 91 cd 00 	lds	r24, 0x00CD
     e30:	90 91 ce 00 	lds	r25, 0x00CE
     e34:	6a e0       	ldi	r22, 0x0A	; 10
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	d2 d1       	rcall	.+932    	; 0x11de <__udivmodhi4>
     e3a:	86 2f       	mov	r24, r22
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	18 da       	rcall	.-3024   	; 0x270 <setCharIndicator>
					   setCharIndicator(led_menu_dawn_hours%10, 2);
     e40:	80 91 cd 00 	lds	r24, 0x00CD
     e44:	90 91 ce 00 	lds	r25, 0x00CE
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	c8 d1       	rcall	.+912    	; 0x11de <__udivmodhi4>
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <main+0x66e>
					   }else{
					   setCharIndicator(11, 1);
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	8b e0       	ldi	r24, 0x0B	; 11
     e56:	0c da       	rcall	.-3048   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 2);
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	8b e0       	ldi	r24, 0x0B	; 11
     e5c:	09 da       	rcall	.-3054   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(led_menu_dawn_mins/10, 3);
     e5e:	80 91 cb 00 	lds	r24, 0x00CB
     e62:	90 91 cc 00 	lds	r25, 0x00CC
     e66:	6a e0       	ldi	r22, 0x0A	; 10
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	b9 d1       	rcall	.+882    	; 0x11de <__udivmodhi4>
     e6c:	86 2f       	mov	r24, r22
     e6e:	63 e0       	ldi	r22, 0x03	; 3
     e70:	ff d9       	rcall	.-3074   	; 0x270 <setCharIndicator>
				   setCharIndicator(led_menu_dawn_mins%10, 4);				
     e72:	80 91 cb 00 	lds	r24, 0x00CB
     e76:	90 91 cc 00 	lds	r25, 0x00CC
     e7a:	88 c0       	rjmp	.+272    	; 0xf8c <main+0x79e>
				break;

				case MODE_EDIT_START_TIME_DAWN_MINS: 
				  setCharIndicator(led_menu_dawn_hours/10, 1);
     e7c:	80 91 cd 00 	lds	r24, 0x00CD
     e80:	90 91 ce 00 	lds	r25, 0x00CE
     e84:	6a e0       	ldi	r22, 0x0A	; 10
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	aa d1       	rcall	.+852    	; 0x11de <__udivmodhi4>
     e8a:	86 2f       	mov	r24, r22
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	f0 d9       	rcall	.-3104   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
     e90:	80 91 cd 00 	lds	r24, 0x00CD
     e94:	90 91 ce 00 	lds	r25, 0x00CE
     e98:	6a e0       	ldi	r22, 0x0A	; 10
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	a0 d1       	rcall	.+832    	; 0x11de <__udivmodhi4>
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	e7 d9       	rcall	.-3122   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     ea2:	80 91 a4 00 	lds	r24, 0x00A4
     ea6:	81 11       	cpse	r24, r1
     ea8:	19 c0       	rjmp	.+50     	; 0xedc <main+0x6ee>
     eaa:	d9 cf       	rjmp	.-78     	; 0xe5e <main+0x670>
				  setCharIndicator(led_menu_sunset_mins%10, 4);				
				break;
			
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
     eac:	80 91 c7 00 	lds	r24, 0x00C7
     eb0:	90 91 c8 00 	lds	r25, 0x00C8
     eb4:	6a e0       	ldi	r22, 0x0A	; 10
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	92 d1       	rcall	.+804    	; 0x11de <__udivmodhi4>
     eba:	86 2f       	mov	r24, r22
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	d8 d9       	rcall	.-3152   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_sunset_hours%10, 2);
     ec0:	80 91 c7 00 	lds	r24, 0x00C7
     ec4:	90 91 c8 00 	lds	r25, 0x00C8
     ec8:	6a e0       	ldi	r22, 0x0A	; 10
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	88 d1       	rcall	.+784    	; 0x11de <__udivmodhi4>
     ece:	62 e0       	ldi	r22, 0x02	; 2
     ed0:	cf d9       	rcall	.-3170   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     ed2:	80 91 a4 00 	lds	r24, 0x00A4
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <main+0x6ee>
     eda:	4a c0       	rjmp	.+148    	; 0xf70 <main+0x782>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
				  if(!twoHZ_status){
					   setCharIndicator(led_menu_dawn_mins/10, 3);
					   setCharIndicator(led_menu_dawn_mins%10, 4);
				  }else{
					   setCharIndicator(11, 3);
     edc:	63 e0       	ldi	r22, 0x03	; 3
     ede:	8b e0       	ldi	r24, 0x0B	; 11
     ee0:	c7 d9       	rcall	.-3186   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 4);
     ee2:	64 e0       	ldi	r22, 0x04	; 4
     ee4:	8b e0       	ldi	r24, 0x0B	; 11
     ee6:	7d c0       	rjmp	.+250    	; 0xfe2 <main+0x7f4>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
     ee8:	80 91 a4 00 	lds	r24, 0x00A4
     eec:	81 11       	cpse	r24, r1
     eee:	1a c0       	rjmp	.+52     	; 0xf24 <main+0x736>
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     ef0:	80 91 c9 00 	lds	r24, 0x00C9
     ef4:	90 91 ca 00 	lds	r25, 0x00CA
     ef8:	b8 01       	movw	r22, r16
     efa:	71 d1       	rcall	.+738    	; 0x11de <__udivmodhi4>
     efc:	86 2f       	mov	r24, r22
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	b7 d9       	rcall	.-3218   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_dawn_interval_mins%100)/10, 2);
     f02:	80 91 c9 00 	lds	r24, 0x00C9
     f06:	90 91 ca 00 	lds	r25, 0x00CA
     f0a:	b8 01       	movw	r22, r16
     f0c:	68 d1       	rcall	.+720    	; 0x11de <__udivmodhi4>
     f0e:	6a e0       	ldi	r22, 0x0A	; 10
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	65 d1       	rcall	.+714    	; 0x11de <__udivmodhi4>
     f14:	86 2f       	mov	r24, r22
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	ab d9       	rcall	.-3242   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_dawn_interval_mins%100%10, 3);
     f1a:	80 91 c9 00 	lds	r24, 0x00C9
     f1e:	90 91 ca 00 	lds	r25, 0x00CA
     f22:	56 c0       	rjmp	.+172    	; 0xfd0 <main+0x7e2>
					  setCharIndicator(13, 4);
				  }else{
					  setCharIndicator(11, 1);
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	8b e0       	ldi	r24, 0x0B	; 11
     f28:	a3 d9       	rcall	.-3258   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	8b e0       	ldi	r24, 0x0B	; 11
     f2e:	a0 d9       	rcall	.-3264   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 3);
     f30:	63 e0       	ldi	r22, 0x03	; 3
     f32:	8b e0       	ldi	r24, 0x0B	; 11
     f34:	53 c0       	rjmp	.+166    	; 0xfdc <main+0x7ee>
				  }

				break;
			
				case MODE_EDIT_START_TIME_SUNSET_HOURS:
				  if(!twoHZ_status){
     f36:	80 91 a4 00 	lds	r24, 0x00A4
     f3a:	81 11       	cpse	r24, r1
     f3c:	13 c0       	rjmp	.+38     	; 0xf64 <main+0x776>
					  setCharIndicator(led_menu_sunset_hours/10, 1);
     f3e:	80 91 c7 00 	lds	r24, 0x00C7
     f42:	90 91 c8 00 	lds	r25, 0x00C8
     f46:	6a e0       	ldi	r22, 0x0A	; 10
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	49 d1       	rcall	.+658    	; 0x11de <__udivmodhi4>
     f4c:	86 2f       	mov	r24, r22
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	8f d9       	rcall	.-3298   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_hours%10, 2);
     f52:	80 91 c7 00 	lds	r24, 0x00C7
     f56:	90 91 c8 00 	lds	r25, 0x00C8
     f5a:	6a e0       	ldi	r22, 0x0A	; 10
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	3f d1       	rcall	.+638    	; 0x11de <__udivmodhi4>
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <main+0x780>
					  }else{
					  setCharIndicator(11, 1);
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	8b e0       	ldi	r24, 0x0B	; 11
     f68:	83 d9       	rcall	.-3322   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	8b e0       	ldi	r24, 0x0B	; 11
     f6e:	80 d9       	rcall	.-3328   	; 0x270 <setCharIndicator>
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
				  setCharIndicator(led_menu_sunset_hours%10, 2);
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_sunset_mins/10, 3);
     f70:	80 91 c5 00 	lds	r24, 0x00C5
     f74:	90 91 c6 00 	lds	r25, 0x00C6
     f78:	6a e0       	ldi	r22, 0x0A	; 10
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	30 d1       	rcall	.+608    	; 0x11de <__udivmodhi4>
     f7e:	86 2f       	mov	r24, r22
     f80:	63 e0       	ldi	r22, 0x03	; 3
     f82:	76 d9       	rcall	.-3348   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_mins%10, 4);
     f84:	80 91 c5 00 	lds	r24, 0x00C5
     f88:	90 91 c6 00 	lds	r25, 0x00C6
     f8c:	6a e0       	ldi	r22, 0x0A	; 10
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	26 d1       	rcall	.+588    	; 0x11de <__udivmodhi4>
     f92:	64 e0       	ldi	r22, 0x04	; 4
     f94:	26 c0       	rjmp	.+76     	; 0xfe2 <main+0x7f4>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_SUNSET: 		  
				  if(!twoHZ_status){
     f96:	80 91 a4 00 	lds	r24, 0x00A4
     f9a:	81 11       	cpse	r24, r1
     f9c:	c3 cf       	rjmp	.-122    	; 0xf24 <main+0x736>
					  setCharIndicator(led_menu_sunset_interval_mins/100, 1);
     f9e:	80 91 c3 00 	lds	r24, 0x00C3
     fa2:	90 91 c4 00 	lds	r25, 0x00C4
     fa6:	b8 01       	movw	r22, r16
     fa8:	1a d1       	rcall	.+564    	; 0x11de <__udivmodhi4>
     faa:	86 2f       	mov	r24, r22
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	60 d9       	rcall	.-3392   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_sunset_interval_mins%100)/10, 2);
     fb0:	80 91 c3 00 	lds	r24, 0x00C3
     fb4:	90 91 c4 00 	lds	r25, 0x00C4
     fb8:	b8 01       	movw	r22, r16
     fba:	11 d1       	rcall	.+546    	; 0x11de <__udivmodhi4>
     fbc:	6a e0       	ldi	r22, 0x0A	; 10
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	0e d1       	rcall	.+540    	; 0x11de <__udivmodhi4>
     fc2:	86 2f       	mov	r24, r22
     fc4:	62 e0       	ldi	r22, 0x02	; 2
     fc6:	54 d9       	rcall	.-3416   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_interval_mins%100%10, 3);
     fc8:	80 91 c3 00 	lds	r24, 0x00C3
     fcc:	90 91 c4 00 	lds	r25, 0x00C4
     fd0:	b8 01       	movw	r22, r16
     fd2:	05 d1       	rcall	.+522    	; 0x11de <__udivmodhi4>
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	02 d1       	rcall	.+516    	; 0x11de <__udivmodhi4>
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	49 d9       	rcall	.-3438   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
     fde:	64 e0       	ldi	r22, 0x04	; 4
     fe0:	8d e0       	ldi	r24, 0x0D	; 13
     fe2:	46 d9       	rcall	.-3444   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
				  }				break;
			
			}
		}
		if(now_mode){
     fe4:	80 91 c2 00 	lds	r24, 0x00C2
     fe8:	88 23       	and	r24, r24
     fea:	09 f4       	brne	.+2      	; 0xfee <main+0x800>
     fec:	55 cc       	rjmp	.-1878   	; 0x898 <main+0xaa>
			//Меню настроки часов
			switch(now_mode){
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	19 f0       	breq	.+6      	; 0xff8 <main+0x80a>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	f9 f0       	breq	.+62     	; 0x1034 <main+0x846>
     ff6:	50 cc       	rjmp	.-1888   	; 0x898 <main+0xaa>
				case MODE_EDIT_HOURS: //часы
				   if(!twoHZ_status){
     ff8:	80 91 a4 00 	lds	r24, 0x00A4
     ffc:	81 11       	cpse	r24, r1
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <main+0x830>
				    setCharIndicator(hour/10, 1);
    1000:	80 91 db 00 	lds	r24, 0x00DB
    1004:	3a e0       	ldi	r19, 0x0A	; 10
    1006:	f3 2e       	mov	r15, r19
    1008:	6f 2d       	mov	r22, r15
    100a:	dd d0       	rcall	.+442    	; 0x11c6 <__udivmodqi4>
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	30 d9       	rcall	.-3488   	; 0x270 <setCharIndicator>
				    setCharIndicator(hour%10, 2);
    1010:	80 91 db 00 	lds	r24, 0x00DB
    1014:	6f 2d       	mov	r22, r15
    1016:	d7 d0       	rcall	.+430    	; 0x11c6 <__udivmodqi4>
    1018:	89 2f       	mov	r24, r25
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <main+0x83a>
				   }else{
					setCharIndicator(11, 1);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	8b e0       	ldi	r24, 0x0B	; 11
    1022:	26 d9       	rcall	.-3508   	; 0x270 <setCharIndicator>
					setCharIndicator(11, 2);				   
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	8b e0       	ldi	r24, 0x0B	; 11
    1028:	23 d9       	rcall	.-3514   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(min/10, 3);
    102a:	80 91 dc 00 	lds	r24, 0x00DC
    102e:	2a e0       	ldi	r18, 0x0A	; 10
    1030:	f2 2e       	mov	r15, r18
    1032:	15 c0       	rjmp	.+42     	; 0x105e <main+0x870>
				   setCharIndicator(min%10, 4);
				break;

				case MODE_EDIT_MINUTES: // минуты
				   setCharIndicator(hour/10, 1);
    1034:	80 91 db 00 	lds	r24, 0x00DB
    1038:	9a e0       	ldi	r25, 0x0A	; 10
    103a:	f9 2e       	mov	r15, r25
    103c:	6f 2d       	mov	r22, r15
    103e:	c3 d0       	rcall	.+390    	; 0x11c6 <__udivmodqi4>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	16 d9       	rcall	.-3540   	; 0x270 <setCharIndicator>
				   setCharIndicator(hour%10, 2);
    1044:	80 91 db 00 	lds	r24, 0x00DB
    1048:	6f 2d       	mov	r22, r15
    104a:	bd d0       	rcall	.+378    	; 0x11c6 <__udivmodqi4>
    104c:	89 2f       	mov	r24, r25
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	0f d9       	rcall	.-3554   	; 0x270 <setCharIndicator>
				   if(!twoHZ_status){
    1052:	80 91 a4 00 	lds	r24, 0x00A4
    1056:	81 11       	cpse	r24, r1
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <main+0x886>
					  setCharIndicator(min/10, 3);
    105a:	80 91 dc 00 	lds	r24, 0x00DC
    105e:	6f 2d       	mov	r22, r15
    1060:	b2 d0       	rcall	.+356    	; 0x11c6 <__udivmodqi4>
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	05 d9       	rcall	.-3574   	; 0x270 <setCharIndicator>
					  setCharIndicator(min%10, 4);
    1066:	80 91 dc 00 	lds	r24, 0x00DC
    106a:	6f 2d       	mov	r22, r15
    106c:	ac d0       	rcall	.+344    	; 0x11c6 <__udivmodqi4>
    106e:	89 2f       	mov	r24, r25
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	05 c0       	rjmp	.+10     	; 0x107e <main+0x890>
				   }else{
					  setCharIndicator(11, 3);
    1074:	63 e0       	ldi	r22, 0x03	; 3
    1076:	8b e0       	ldi	r24, 0x0B	; 11
    1078:	fb d8       	rcall	.-3594   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 4);
    107a:	64 e0       	ldi	r22, 0x04	; 4
    107c:	8b e0       	ldi	r24, 0x0B	; 11
    107e:	f8 d8       	rcall	.-3600   	; 0x270 <setCharIndicator>
    1080:	0b cc       	rjmp	.-2026   	; 0x898 <main+0xaa>

00001082 <RTC_ConvertFromDec>:
﻿#include "RTC.h"

unsigned char RTC_ConvertFromDec(unsigned char c)
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c));
    1082:	98 2f       	mov	r25, r24
    1084:	92 95       	swap	r25
    1086:	9f 70       	andi	r25, 0x0F	; 15
    1088:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	92 9f       	mul	r25, r18
    108e:	80 0d       	add	r24, r0
    1090:	11 24       	eor	r1, r1
    1092:	08 95       	ret

00001094 <RTC_ConvertFromBinDec>:

unsigned char RTC_ConvertFromBinDec(unsigned char c)
{
	unsigned char ch = ((c/10)<<4)|(c%10);
    1094:	6a e0       	ldi	r22, 0x0A	; 10
    1096:	97 d0       	rcall	.+302    	; 0x11c6 <__udivmodqi4>
    1098:	29 2f       	mov	r18, r25
    109a:	30 e1       	ldi	r19, 0x10	; 16
    109c:	83 9f       	mul	r24, r19
    109e:	c0 01       	movw	r24, r0
    10a0:	11 24       	eor	r1, r1
	return ch;
    10a2:	82 2b       	or	r24, r18
    10a4:	08 95       	ret

000010a6 <I2C_Init>:
	}                         \
}                             \

void I2C_Init (void)
{
	TWBR=0x20;//скорость передачи (при 8 мгц получается 100 кгц, что и необходимо для общения с ds1307)
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	80 b9       	out	0x00, r24	; 0
    10aa:	08 95       	ret

000010ac <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    10ac:	84 ea       	ldi	r24, 0xA4	; 164
    10ae:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//подождем пока установится TWIN
    10b0:	8a e0       	ldi	r24, 0x0A	; 10
    10b2:	80 93 a1 00 	sts	0x00A1, r24
    10b6:	06 b6       	in	r0, 0x36	; 54
    10b8:	07 fc       	sbrc	r0, 7
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <I2C_StartCondition+0x30>
    10bc:	80 91 a1 00 	lds	r24, 0x00A1
    10c0:	81 11       	cpse	r24, r1
    10c2:	f9 cf       	rjmp	.-14     	; 0x10b6 <I2C_StartCondition+0xa>
    10c4:	28 e0       	ldi	r18, 0x08	; 8
    10c6:	88 e1       	ldi	r24, 0x18	; 24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	a8 95       	wdr
    10d0:	80 93 41 00 	sts	0x0041, r24
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	20 93 41 00 	sts	0x0041, r18
    10da:	ff cf       	rjmp	.-2      	; 0x10da <I2C_StartCondition+0x2e>
}
    10dc:	08 95       	ret

000010de <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    10de:	84 e9       	ldi	r24, 0x94	; 148
    10e0:	86 bf       	out	0x36, r24	; 54
    10e2:	08 95       	ret

000010e4 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
    10e4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
    10e6:	84 e8       	ldi	r24, 0x84	; 132
    10e8:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//подождем пока установится TWIN
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	80 93 a1 00 	sts	0x00A1, r24
    10f0:	06 b6       	in	r0, 0x36	; 54
    10f2:	07 fc       	sbrc	r0, 7
    10f4:	10 c0       	rjmp	.+32     	; 0x1116 <I2C_SendByte+0x32>
    10f6:	80 91 a1 00 	lds	r24, 0x00A1
    10fa:	81 11       	cpse	r24, r1
    10fc:	f9 cf       	rjmp	.-14     	; 0x10f0 <I2C_SendByte+0xc>
    10fe:	28 e0       	ldi	r18, 0x08	; 8
    1100:	88 e1       	ldi	r24, 0x18	; 24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	a8 95       	wdr
    110a:	80 93 41 00 	sts	0x0041, r24
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	20 93 41 00 	sts	0x0041, r18
    1114:	ff cf       	rjmp	.-2      	; 0x1114 <I2C_SendByte+0x30>
}
    1116:	08 95       	ret

00001118 <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	1f 92       	push	r1
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	18 2f       	mov	r17, r24
	I2C_StartCondition(); // Отправим условие START
    1126:	69 83       	std	Y+1, r22	; 0x01
    1128:	c1 df       	rcall	.-126    	; 0x10ac <I2C_StartCondition>
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	db df       	rcall	.-74     	; 0x10e4 <I2C_SendByte>
	I2C_SendByte(c);// Отправим байт данных
    112e:	81 2f       	mov	r24, r17
    1130:	d9 df       	rcall	.-78     	; 0x10e4 <I2C_SendByte>
	TWI_WHILE;//подождем пока установится TWIN
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1132:	84 e9       	ldi	r24, 0x94	; 148
    1134:	86 bf       	out	0x36, r24	; 54
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	08 95       	ret

00001140 <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1140:	84 ec       	ldi	r24, 0xC4	; 196
    1142:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//ожидание установки бита TWIN
    1144:	8a e0       	ldi	r24, 0x0A	; 10
    1146:	80 93 a1 00 	sts	0x00A1, r24
    114a:	06 b6       	in	r0, 0x36	; 54
    114c:	07 fc       	sbrc	r0, 7
    114e:	10 c0       	rjmp	.+32     	; 0x1170 <I2C_ReadByte+0x30>
    1150:	80 91 a1 00 	lds	r24, 0x00A1
    1154:	81 11       	cpse	r24, r1
    1156:	f9 cf       	rjmp	.-14     	; 0x114a <I2C_ReadByte+0xa>
    1158:	28 e0       	ldi	r18, 0x08	; 8
    115a:	88 e1       	ldi	r24, 0x18	; 24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	a8 95       	wdr
    1164:	80 93 41 00 	sts	0x0041, r24
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	20 93 41 00 	sts	0x0041, r18
    116e:	ff cf       	rjmp	.-2      	; 0x116e <I2C_ReadByte+0x2e>
	return TWDR;//читаем регистр данных
    1170:	83 b1       	in	r24, 0x03	; 3
}
    1172:	08 95       	ret

00001174 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    1174:	84 e8       	ldi	r24, 0x84	; 132
    1176:	86 bf       	out	0x36, r24	; 54
	TWI_WHILE;//ожидание установки бита TWIN
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	80 93 a1 00 	sts	0x00A1, r24
    117e:	06 b6       	in	r0, 0x36	; 54
    1180:	07 fc       	sbrc	r0, 7
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <I2C_ReadLastByte+0x30>
    1184:	80 91 a1 00 	lds	r24, 0x00A1
    1188:	81 11       	cpse	r24, r1
    118a:	f9 cf       	rjmp	.-14     	; 0x117e <I2C_ReadLastByte+0xa>
    118c:	28 e0       	ldi	r18, 0x08	; 8
    118e:	88 e1       	ldi	r24, 0x18	; 24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	a8 95       	wdr
    1198:	80 93 41 00 	sts	0x0041, r24
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	20 93 41 00 	sts	0x0041, r18
    11a2:	ff cf       	rjmp	.-2      	; 0x11a2 <I2C_ReadLastByte+0x2e>
	return TWDR;//читаем регистр данных
    11a4:	83 b1       	in	r24, 0x03	; 3
    11a6:	08 95       	ret

000011a8 <__mulsi3>:
    11a8:	db 01       	movw	r26, r22
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	88 d0       	rcall	.+272    	; 0x12c0 <__muluhisi3>
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	a2 9f       	mul	r26, r18
    11b6:	80 0d       	add	r24, r0
    11b8:	91 1d       	adc	r25, r1
    11ba:	a3 9f       	mul	r26, r19
    11bc:	90 0d       	add	r25, r0
    11be:	b2 9f       	mul	r27, r18
    11c0:	90 0d       	add	r25, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	08 95       	ret

000011c6 <__udivmodqi4>:
    11c6:	99 1b       	sub	r25, r25
    11c8:	79 e0       	ldi	r23, 0x09	; 9
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <__udivmodqi4_ep>

000011cc <__udivmodqi4_loop>:
    11cc:	99 1f       	adc	r25, r25
    11ce:	96 17       	cp	r25, r22
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <__udivmodqi4_ep>
    11d2:	96 1b       	sub	r25, r22

000011d4 <__udivmodqi4_ep>:
    11d4:	88 1f       	adc	r24, r24
    11d6:	7a 95       	dec	r23
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__udivmodqi4_loop>
    11da:	80 95       	com	r24
    11dc:	08 95       	ret

000011de <__udivmodhi4>:
    11de:	aa 1b       	sub	r26, r26
    11e0:	bb 1b       	sub	r27, r27
    11e2:	51 e1       	ldi	r21, 0x11	; 17
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <__udivmodhi4_ep>

000011e6 <__udivmodhi4_loop>:
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	a6 17       	cp	r26, r22
    11ec:	b7 07       	cpc	r27, r23
    11ee:	10 f0       	brcs	.+4      	; 0x11f4 <__udivmodhi4_ep>
    11f0:	a6 1b       	sub	r26, r22
    11f2:	b7 0b       	sbc	r27, r23

000011f4 <__udivmodhi4_ep>:
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	5a 95       	dec	r21
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__udivmodhi4_loop>
    11fc:	80 95       	com	r24
    11fe:	90 95       	com	r25
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	08 95       	ret

00001206 <__divmodhi4>:
    1206:	97 fb       	bst	r25, 7
    1208:	07 2e       	mov	r0, r23
    120a:	16 f4       	brtc	.+4      	; 0x1210 <__divmodhi4+0xa>
    120c:	00 94       	com	r0
    120e:	06 d0       	rcall	.+12     	; 0x121c <__divmodhi4_neg1>
    1210:	77 fd       	sbrc	r23, 7
    1212:	08 d0       	rcall	.+16     	; 0x1224 <__divmodhi4_neg2>
    1214:	e4 df       	rcall	.-56     	; 0x11de <__udivmodhi4>
    1216:	07 fc       	sbrc	r0, 7
    1218:	05 d0       	rcall	.+10     	; 0x1224 <__divmodhi4_neg2>
    121a:	3e f4       	brtc	.+14     	; 0x122a <__divmodhi4_exit>

0000121c <__divmodhi4_neg1>:
    121c:	90 95       	com	r25
    121e:	81 95       	neg	r24
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__divmodhi4_neg2>:
    1224:	70 95       	com	r23
    1226:	61 95       	neg	r22
    1228:	7f 4f       	sbci	r23, 0xFF	; 255

0000122a <__divmodhi4_exit>:
    122a:	08 95       	ret

0000122c <__udivmodsi4>:
    122c:	a1 e2       	ldi	r26, 0x21	; 33
    122e:	1a 2e       	mov	r1, r26
    1230:	aa 1b       	sub	r26, r26
    1232:	bb 1b       	sub	r27, r27
    1234:	fd 01       	movw	r30, r26
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <__udivmodsi4_ep>

00001238 <__udivmodsi4_loop>:
    1238:	aa 1f       	adc	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	ee 1f       	adc	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	a2 17       	cp	r26, r18
    1242:	b3 07       	cpc	r27, r19
    1244:	e4 07       	cpc	r30, r20
    1246:	f5 07       	cpc	r31, r21
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__udivmodsi4_ep>
    124a:	a2 1b       	sub	r26, r18
    124c:	b3 0b       	sbc	r27, r19
    124e:	e4 0b       	sbc	r30, r20
    1250:	f5 0b       	sbc	r31, r21

00001252 <__udivmodsi4_ep>:
    1252:	66 1f       	adc	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	1a 94       	dec	r1
    125c:	69 f7       	brne	.-38     	; 0x1238 <__udivmodsi4_loop>
    125e:	60 95       	com	r22
    1260:	70 95       	com	r23
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	bd 01       	movw	r22, r26
    126c:	cf 01       	movw	r24, r30
    126e:	08 95       	ret

00001270 <__divmodsi4>:
    1270:	05 2e       	mov	r0, r21
    1272:	97 fb       	bst	r25, 7
    1274:	16 f4       	brtc	.+4      	; 0x127a <__divmodsi4+0xa>
    1276:	00 94       	com	r0
    1278:	0f d0       	rcall	.+30     	; 0x1298 <__negsi2>
    127a:	57 fd       	sbrc	r21, 7
    127c:	05 d0       	rcall	.+10     	; 0x1288 <__divmodsi4_neg2>
    127e:	d6 df       	rcall	.-84     	; 0x122c <__udivmodsi4>
    1280:	07 fc       	sbrc	r0, 7
    1282:	02 d0       	rcall	.+4      	; 0x1288 <__divmodsi4_neg2>
    1284:	46 f4       	brtc	.+16     	; 0x1296 <__divmodsi4_exit>
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <__negsi2>

00001288 <__divmodsi4_neg2>:
    1288:	50 95       	com	r21
    128a:	40 95       	com	r20
    128c:	30 95       	com	r19
    128e:	21 95       	neg	r18
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	4f 4f       	sbci	r20, 0xFF	; 255
    1294:	5f 4f       	sbci	r21, 0xFF	; 255

00001296 <__divmodsi4_exit>:
    1296:	08 95       	ret

00001298 <__negsi2>:
    1298:	90 95       	com	r25
    129a:	80 95       	com	r24
    129c:	70 95       	com	r23
    129e:	61 95       	neg	r22
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	08 95       	ret

000012a8 <__umulhisi3>:
    12a8:	a2 9f       	mul	r26, r18
    12aa:	b0 01       	movw	r22, r0
    12ac:	b3 9f       	mul	r27, r19
    12ae:	c0 01       	movw	r24, r0
    12b0:	a3 9f       	mul	r26, r19
    12b2:	01 d0       	rcall	.+2      	; 0x12b6 <__umulhisi3+0xe>
    12b4:	b2 9f       	mul	r27, r18
    12b6:	70 0d       	add	r23, r0
    12b8:	81 1d       	adc	r24, r1
    12ba:	11 24       	eor	r1, r1
    12bc:	91 1d       	adc	r25, r1
    12be:	08 95       	ret

000012c0 <__muluhisi3>:
    12c0:	f3 df       	rcall	.-26     	; 0x12a8 <__umulhisi3>
    12c2:	a5 9f       	mul	r26, r21
    12c4:	90 0d       	add	r25, r0
    12c6:	b4 9f       	mul	r27, r20
    12c8:	90 0d       	add	r25, r0
    12ca:	a4 9f       	mul	r26, r20
    12cc:	80 0d       	add	r24, r0
    12ce:	91 1d       	adc	r25, r1
    12d0:	11 24       	eor	r1, r1
    12d2:	08 95       	ret

000012d4 <__eerd_word_m8a>:
    12d4:	a8 e1       	ldi	r26, 0x18	; 24
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	42 e0       	ldi	r20, 0x02	; 2
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <__eerd_blraw_m8a>

000012de <__eewr_word_m8a>:
    12de:	12 d0       	rcall	.+36     	; 0x1304 <__eewr_byte_m8a>
    12e0:	27 2f       	mov	r18, r23
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <__eewr_r18_m8a>

000012e4 <__eerd_block_m8a>:
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22

000012e8 <__eerd_blraw_m8a>:
    12e8:	fc 01       	movw	r30, r24
    12ea:	e1 99       	sbic	0x1c, 1	; 28
    12ec:	fe cf       	rjmp	.-4      	; 0x12ea <__eerd_blraw_m8a+0x2>
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <__eerd_blraw_m8a+0x14>
    12f0:	ff bb       	out	0x1f, r31	; 31
    12f2:	ee bb       	out	0x1e, r30	; 30
    12f4:	e0 9a       	sbi	0x1c, 0	; 28
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	0d b2       	in	r0, 0x1d	; 29
    12fa:	0d 92       	st	X+, r0
    12fc:	41 50       	subi	r20, 0x01	; 1
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	b8 f7       	brcc	.-18     	; 0x12f0 <__eerd_blraw_m8a+0x8>
    1302:	08 95       	ret

00001304 <__eewr_byte_m8a>:
    1304:	26 2f       	mov	r18, r22

00001306 <__eewr_r18_m8a>:
    1306:	e1 99       	sbic	0x1c, 1	; 28
    1308:	fe cf       	rjmp	.-4      	; 0x1306 <__eewr_r18_m8a>
    130a:	9f bb       	out	0x1f, r25	; 31
    130c:	8e bb       	out	0x1e, r24	; 30
    130e:	2d bb       	out	0x1d, r18	; 29
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	e2 9a       	sbi	0x1c, 2	; 28
    1316:	e1 9a       	sbi	0x1c, 1	; 28
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	08 95       	ret

0000131e <_exit>:
    131e:	f8 94       	cli

00001320 <__stop_program>:
    1320:	ff cf       	rjmp	.-2      	; 0x1320 <__stop_program>
