
MyClock1307LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001514  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001514  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  0080007c  0080007c  000015e4  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb0  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1f  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc6  00000000  00000000  0000504e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	b7 c1       	rjmp	.+878    	; 0x376 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	7c c1       	rjmp	.+760    	; 0x306 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	d2 c1       	rjmp	.+932    	; 0x3b8 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e1       	ldi	r30, 0x14	; 20
      3a:	f5 e1       	ldi	r31, 0x15	; 21
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 37       	cpi	r26, 0x7C	; 124
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ac e7       	ldi	r26, 0x7C	; 124
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a9 3d       	cpi	r26, 0xD9	; 217
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	d1 d4       	rcall	.+2466   	; 0x9fc <main>
      5a:	5a ca       	rjmp	.-2892   	; 0xfffff510 <__eeprom_end+0xff7ef504>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
      5e:	20 91 7c 00 	lds	r18, 0x007C
      62:	28 30       	cpi	r18, 0x08	; 8
      64:	78 f4       	brcc	.+30     	; 0x84 <PutBut+0x26>
     buf[head] = but;
      66:	90 91 7e 00 	lds	r25, 0x007E
      6a:	e9 2f       	mov	r30, r25
      6c:	f0 e0       	ldi	r31, 0x00	; 0
      6e:	e1 58       	subi	r30, 0x81	; 129
      70:	ff 4f       	sbci	r31, 0xFF	; 255
      72:	80 83       	st	Z, r24
     count++;
      74:	2f 5f       	subi	r18, 0xFF	; 255
      76:	20 93 7c 00 	sts	0x007C, r18
     head++;
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	89 0f       	add	r24, r25
     head &= (BUT_SIZE_BUF - 1);    
      7e:	87 70       	andi	r24, 0x07	; 7
      80:	80 93 7e 00 	sts	0x007E, r24
      84:	08 95       	ret

00000086 <BUT_Check.constprop.0>:
  return but;
}

/************************************************/

static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
      86:	ef 92       	push	r14
      88:	ff 92       	push	r15
      8a:	0f 93       	push	r16
      8c:	1f 93       	push	r17
      8e:	cf 93       	push	r28
      90:	df 93       	push	r29
      92:	00 d0       	rcall	.+0      	; 0x94 <BUT_Check.constprop.0+0xe>
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
      98:	2f ef       	ldi	r18, 0xFF	; 255
      9a:	26 0f       	add	r18, r22
   
  stateTmp = stateBut[i];
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	a9 01       	movw	r20, r18
      a0:	49 57       	subi	r20, 0x79	; 121
      a2:	5f 4f       	sbci	r21, 0xFF	; 255
      a4:	7a 01       	movw	r14, r20
      a6:	fa 01       	movw	r30, r20
      a8:	40 81       	ld	r20, Z
  event = 0;

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
      aa:	f9 01       	movw	r30, r18
      ac:	e4 57       	subi	r30, 0x74	; 116
      ae:	ff 4f       	sbci	r31, 0xFF	; 255
      b0:	90 81       	ld	r25, Z
      b2:	90 93 8b 00 	sts	0x008B, r25
#endif

 countDebTmp = countDeb[i];
      b6:	89 01       	movw	r16, r18
      b8:	00 0f       	add	r16, r16
      ba:	11 1f       	adc	r17, r17
      bc:	d8 01       	movw	r26, r16
      be:	ae 56       	subi	r26, 0x6E	; 110
      c0:	bf 4f       	sbci	r27, 0xFF	; 255
      c2:	2d 91       	ld	r18, X+
      c4:	3c 91       	ld	r19, X
      c6:	30 93 91 00 	sts	0x0091, r19
      ca:	20 93 90 00 	sts	0x0090, r18
  
 if (state){
      ce:	88 23       	and	r24, r24
      d0:	e1 f0       	breq	.+56     	; 0x10a <BUT_Check.constprop.0+0x84>
    if (countDebTmp < BUT_COUNT_MAX){
      d2:	25 3f       	cpi	r18, 0xF5	; 245
      d4:	51 e0       	ldi	r21, 0x01	; 1
      d6:	35 07       	cpc	r19, r21
      d8:	c8 f5       	brcc	.+114    	; 0x14c <BUT_Check.constprop.0+0xc6>
       countDebTmp++;
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	30 93 91 00 	sts	0x0091, r19
      e2:	20 93 90 00 	sts	0x0090, r18

       if (countDebTmp > BUT_COUNT_THR){
      e6:	2b 30       	cpi	r18, 0x0B	; 11
      e8:	31 05       	cpc	r19, r1
      ea:	80 f1       	brcs	.+96     	; 0x14c <BUT_Check.constprop.0+0xc6>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
      ec:	40 fd       	sbrc	r20, 0
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <BUT_Check.constprop.0+0x70>
             stateTmp |= FLAG_BUT_PRESSED;
      f0:	41 60       	ori	r20, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <BUT_Check.constprop.0+0x72>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
      f6:	90 e0       	ldi	r25, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
      f8:	25 3f       	cpi	r18, 0xF5	; 245
      fa:	31 40       	sbci	r19, 0x01	; 1
      fc:	41 f5       	brne	.+80     	; 0x14e <BUT_Check.constprop.0+0xc8>
         if (!(stateTmp & FLAG_BUT_HOLD)){
      fe:	41 fd       	sbrc	r20, 1
     100:	26 c0       	rjmp	.+76     	; 0x14e <BUT_Check.constprop.0+0xc8>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     102:	4b 7f       	andi	r20, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     104:	42 60       	ori	r20, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     106:	92 e0       	ldi	r25, 0x02	; 2
     108:	22 c0       	rjmp	.+68     	; 0x14e <BUT_Check.constprop.0+0xc8>
    }    
  }
  else{

#if (BUT_DOUBLE_CLICK_EN == 1)     
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     10a:	40 ff       	sbrs	r20, 0
     10c:	0a c0       	rjmp	.+20     	; 0x122 <BUT_Check.constprop.0+0x9c>
     10e:	41 fd       	sbrc	r20, 1
     110:	08 c0       	rjmp	.+16     	; 0x122 <BUT_Check.constprop.0+0x9c>

       if (stateTmp & FLAG_BUT_RELEASED){
     112:	42 ff       	sbrs	r20, 2
     114:	03 c0       	rjmp	.+6      	; 0x11c <BUT_Check.constprop.0+0x96>
          stateTmp &= ~FLAG_BUT_RELEASED;
     116:	4b 7f       	andi	r20, 0xFB	; 251
          SaveEvent_m(settings, BUT_EV_DOUBLE_CLICK, BUT_DOUBLE_CLICK_CODE, event);
     118:	95 e0       	ldi	r25, 0x05	; 5
     11a:	04 c0       	rjmp	.+8      	; 0x124 <BUT_Check.constprop.0+0x9e>
       }
       else{
          countHoldTmp = 0;
     11c:	10 92 8b 00 	sts	0x008B, r1
          stateTmp |= FLAG_BUT_RELEASED;
     120:	44 60       	ori	r20, 0x04	; 4
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     122:	90 e0       	ldi	r25, 0x00	; 0
          countHoldTmp = 0;
          stateTmp |= FLAG_BUT_RELEASED;
       }    
     }       
 
     if (stateTmp & FLAG_BUT_RELEASED){   
     124:	42 ff       	sbrs	r20, 2
     126:	08 c0       	rjmp	.+16     	; 0x138 <BUT_Check.constprop.0+0xb2>
        if (countHoldTmp > BUT_COUNT_THR_2){
     128:	80 91 8b 00 	lds	r24, 0x008B
     12c:	85 36       	cpi	r24, 0x65	; 101
     12e:	20 f0       	brcs	.+8      	; 0x138 <BUT_Check.constprop.0+0xb2>
           countHoldTmp = 0;
     130:	10 92 8b 00 	sts	0x008B, r1
           stateTmp &= ~FLAG_BUT_RELEASED;
     134:	4b 7f       	andi	r20, 0xFB	; 251
  #if (BUT_RELEASED_EN == 1)   
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     136:	93 e0       	ldi	r25, 0x03	; 3
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
     138:	40 ff       	sbrs	r20, 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <BUT_Check.constprop.0+0xba>
     13c:	41 fd       	sbrc	r20, 1
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     13e:	94 e0       	ldi	r25, 0x04	; 4
     }
#endif     

     countDebTmp = 0;
     140:	10 92 91 00 	sts	0x0091, r1
     144:	10 92 90 00 	sts	0x0090, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     148:	4c 7f       	andi	r20, 0xFC	; 252
     14a:	01 c0       	rjmp	.+2      	; 0x14e <BUT_Check.constprop.0+0xc8>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     14c:	90 e0       	ldi	r25, 0x00	; 0
  }

 

#if (BUT_DOUBLE_CLICK_EN == 1)  
  if (stateTmp & FLAG_BUT_RELEASED){
     14e:	42 ff       	sbrs	r20, 2
     150:	07 c0       	rjmp	.+14     	; 0x160 <BUT_Check.constprop.0+0xda>
     if (countHoldTmp < BUT_COUNT_THR_2_MAX){
     152:	80 91 8b 00 	lds	r24, 0x008B
     156:	85 36       	cpi	r24, 0x65	; 101
     158:	18 f4       	brcc	.+6      	; 0x160 <BUT_Check.constprop.0+0xda>
        countHoldTmp++;
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 8b 00 	sts	0x008B, r24
     }
  }
 
  countHold[i] = countHoldTmp;
     160:	80 91 8b 00 	lds	r24, 0x008B
     164:	80 83       	st	Z, r24
#endif       
  
  if (event){
     166:	99 23       	and	r25, r25
     168:	41 f0       	breq	.+16     	; 0x17a <BUT_Check.constprop.0+0xf4>
     PutBut(i+1);
     16a:	86 2f       	mov	r24, r22
     16c:	4a 83       	std	Y+2, r20	; 0x02
     16e:	99 83       	std	Y+1, r25	; 0x01
     170:	76 df       	rcall	.-276    	; 0x5e <PutBut>
     PutBut(event);
     172:	99 81       	ldd	r25, Y+1	; 0x01
     174:	89 2f       	mov	r24, r25
     176:	73 df       	rcall	.-282    	; 0x5e <PutBut>
     178:	4a 81       	ldd	r20, Y+2	; 0x02
  }
  
  countDeb[i] = countDebTmp;
     17a:	f8 01       	movw	r30, r16
     17c:	ee 56       	subi	r30, 0x6E	; 110
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 91 90 00 	lds	r24, 0x0090
     184:	90 91 91 00 	lds	r25, 0x0091
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     18c:	f7 01       	movw	r30, r14
     18e:	40 83       	st	Z, r20
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	08 95       	ret

000001a2 <BUT_GetBut>:

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    
  if (count){
     1a2:	20 91 7c 00 	lds	r18, 0x007C
     1a6:	22 23       	and	r18, r18
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <BUT_GetBut+0x26>
     but = buf[tail];
     1aa:	90 91 7d 00 	lds	r25, 0x007D
     1ae:	e9 2f       	mov	r30, r25
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e1 58       	subi	r30, 0x81	; 129
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	80 81       	ld	r24, Z
     count--;
     1b8:	21 50       	subi	r18, 0x01	; 1
     1ba:	20 93 7c 00 	sts	0x007C, r18
     tail++;
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     1c0:	97 70       	andi	r25, 0x07	; 7
     1c2:	90 93 7d 00 	sts	0x007D, r25
     1c6:	08 95       	ret
  }
}

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     1ca:	08 95       	ret

000001cc <BUT_Init>:
}

/******************************************************/

void BUT_Init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	e2 e9       	ldi	r30, 0x92	; 146
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	c7 e8       	ldi	r28, 0x87	; 135
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	ac e8       	ldi	r26, 0x8C	; 140
     1da:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     1dc:	11 92       	st	Z+, r1
     1de:	11 92       	st	Z+, r1
     stateBut[i] = 0;
     1e0:	19 92       	st	Y+, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
     1e2:	1d 92       	st	X+, r1

void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	ea 39       	cpi	r30, 0x9A	; 154
     1e8:	f8 07       	cpc	r31, r24
     1ea:	c1 f7       	brne	.-16     	; 0x1dc <BUT_Init+0x10>
     1ec:	ef e7       	ldi	r30, 0x7F	; 127
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     1f0:	11 92       	st	Z+, r1
     countHold[i] = 0;
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	e7 38       	cpi	r30, 0x87	; 135
     1f6:	f8 07       	cpc	r31, r24
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <BUT_Init+0x24>
     buf[i] = 0;    
  }
  
  head = 0;
     1fa:	10 92 7e 00 	sts	0x007E, r1
  tail = 0;  
     1fe:	10 92 7d 00 	sts	0x007D, r1
  count = 0;
     202:	10 92 7c 00 	sts	0x007C, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     206:	89 98       	cbi	0x11, 1	; 17
     208:	91 98       	cbi	0x12, 1	; 18
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     20a:	8a 98       	cbi	0x11, 2	; 17
     20c:	92 98       	cbi	0x12, 2	; 18
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     20e:	8b 98       	cbi	0x11, 3	; 17
     210:	93 98       	cbi	0x12, 3	; 18
#endif  

#ifdef BUT_4_ID  
  ButtonInit_m(BUT_4_DDRX, BUT_4_PORTX, BUT_4_PIN, BUT_4_PULL);
     212:	88 98       	cbi	0x11, 0	; 17
     214:	90 98       	cbi	0x12, 0	; 18
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <BUT_Poll>:

/**********************************************/

void BUT_Poll(void)
{
     21c:	cf 93       	push	r28
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     21e:	80 b3       	in	r24, 0x10	; 16
     220:	c1 e0       	ldi	r28, 0x01	; 1
     222:	86 95       	lsr	r24
     224:	81 70       	andi	r24, 0x01	; 1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	8c 27       	eor	r24, r28
     22a:	2d df       	rcall	.-422    	; 0x86 <BUT_Check.constprop.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     22c:	80 b3       	in	r24, 0x10	; 16
     22e:	82 fb       	bst	r24, 2
     230:	88 27       	eor	r24, r24
     232:	80 f9       	bld	r24, 0
     234:	62 e0       	ldi	r22, 0x02	; 2
     236:	8c 27       	eor	r24, r28
     238:	26 df       	rcall	.-436    	; 0x86 <BUT_Check.constprop.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     23a:	80 b3       	in	r24, 0x10	; 16
     23c:	83 fb       	bst	r24, 3
     23e:	88 27       	eor	r24, r24
     240:	80 f9       	bld	r24, 0
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	8c 27       	eor	r24, r28
     246:	1f df       	rcall	.-450    	; 0x86 <BUT_Check.constprop.0>
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     248:	80 b3       	in	r24, 0x10	; 16
     24a:	81 70       	andi	r24, 0x01	; 1
     24c:	64 e0       	ldi	r22, 0x04	; 4
     24e:	8c 27       	eor	r24, r28
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
     250:	cf 91       	pop	r28
#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     252:	19 cf       	rjmp	.-462    	; 0x86 <BUT_Check.constprop.0>

00000254 <timer1_led_init>:
	0b01011100//DAMN
};

void timer1_led_init(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     254:	8e b5       	in	r24, 0x2e	; 46
     256:	88 60       	ori	r24, 0x08	; 8
     258:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	80 61       	ori	r24, 0x10	; 16
     25e:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000101; //записываем в регистр число для сравнения
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11011100;
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
     268:	8e b5       	in	r24, 0x2e	; 46
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	8e bd       	out	0x2e, r24	; 46
     26e:	08 95       	ret

00000270 <setCharIndicator>:
}
//Установка символа
void setCharIndicator(unsigned char number,  unsigned char i){
	indicators[i] = number;
     270:	e6 2f       	mov	r30, r22
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ec 58       	subi	r30, 0x8C	; 140
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	80 83       	st	Z, r24
     27a:	08 95       	ret

0000027c <setDotIndicator>:
}
//Установка точки
void setDotIndicator(unsigned char i, unsigned char state){
	indicators_dots[i] = state;
     27c:	e8 2f       	mov	r30, r24
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e5 56       	subi	r30, 0x65	; 101
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 83       	st	Z, r22
     286:	08 95       	ret

00000288 <ClearALLDotsIndicator>:
}
//Очистка точек
void ClearALLDotsIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators_dots[i] = 0;
     288:	10 92 9b 00 	sts	0x009B, r1
     28c:	10 92 9c 00 	sts	0x009C, r1
     290:	10 92 9d 00 	sts	0x009D, r1
     294:	10 92 9e 00 	sts	0x009E, r1
     298:	10 92 9f 00 	sts	0x009F, r1
     29c:	10 92 a0 00 	sts	0x00A0, r1
     2a0:	08 95       	ret

000002a2 <ClearALLCharIndicator>:
}
//Очистка  всех индикаторов
void ClearALLCharIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators[i] = 11;
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	80 93 74 00 	sts	0x0074, r24
     2a8:	80 93 75 00 	sts	0x0075, r24
     2ac:	80 93 76 00 	sts	0x0076, r24
     2b0:	80 93 77 00 	sts	0x0077, r24
     2b4:	80 93 78 00 	sts	0x0078, r24
     2b8:	80 93 79 00 	sts	0x0079, r24
     2bc:	08 95       	ret

000002be <DisplayLED>:
	}
}
void DisplayLED(unsigned char number){
	    unsigned char char_temp = 0;
	    SPDR = ~(0b00000001 << number);
     2be:	48 2f       	mov	r20, r24
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	08 2e       	mov	r0, r24
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DisplayLED+0xe>
     2ca:	22 0f       	add	r18, r18
     2cc:	0a 94       	dec	r0
     2ce:	ea f7       	brpl	.-6      	; 0x2ca <DisplayLED+0xc>
     2d0:	20 95       	com	r18
     2d2:	2f b9       	out	0x0f, r18	; 15
        
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2d4:	77 9b       	sbis	0x0e, 7	; 14
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <DisplayLED+0x16>
		   //Разрешение вложенных прерываний 
	    };
	 //Запрет вложенных прерываний
		
		char_temp = segments[indicators[number]];
     2d8:	fa 01       	movw	r30, r20
     2da:	ec 58       	subi	r30, 0x8C	; 140
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	e0 81       	ld	r30, Z
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e0 5a       	subi	r30, 0xA0	; 160
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	80 81       	ld	r24, Z
		
		//Установка точки
	    if(indicators_dots[number]){ char_temp = char_temp | segments[12];}
     2e8:	fa 01       	movw	r30, r20
     2ea:	e5 56       	subi	r30, 0x65	; 101
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	90 81       	ld	r25, Z
     2f0:	99 23       	and	r25, r25
     2f2:	19 f0       	breq	.+6      	; 0x2fa <DisplayLED+0x3c>
     2f4:	90 91 6c 00 	lds	r25, 0x006C
     2f8:	89 2b       	or	r24, r25
	    	
	    SPDR = char_temp;
     2fa:	8f b9       	out	0x0f, r24	; 15
		
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <DisplayLED+0x3e>
		   
	    };
		
        //Строб защелки
	    PORTB |= (1 << 2);
     300:	c2 9a       	sbi	0x18, 2	; 24
	    PORTB &= ~(1 << 2);
     302:	c2 98       	cbi	0x18, 2	; 24
     304:	08 95       	ret

00000306 <__vector_6>:
	}
*/
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
    DisplayLED(dissplay);
     328:	80 91 9a 00 	lds	r24, 0x009A
     32c:	c8 df       	rcall	.-112    	; 0x2be <DisplayLED>
    dissplay++;
     32e:	80 91 9a 00 	lds	r24, 0x009A
     332:	8f 5f       	subi	r24, 0xFF	; 255
    if (dissplay > 5 ){ 
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	18 f4       	brcc	.+6      	; 0x33e <__vector_6+0x38>
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
    DisplayLED(dissplay);
    dissplay++;
     338:	80 93 9a 00 	sts	0x009A, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_6+0x3c>
    if (dissplay > 5 ){ 
		dissplay = 0;
     33e:	10 92 9a 00 	sts	0x009A, r1
	}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <PWM_set.part.0>:
    }else if(channel == B){
	  blue = val;
    }else if(channel == W){
      white = val;
    }else if(channel == RGBW){
      red = val;
     364:	80 93 d6 00 	sts	0x00D6, r24
	  green = val;
     368:	80 93 a9 00 	sts	0x00A9, r24
	  blue = val;
     36c:	80 93 a8 00 	sts	0x00A8, r24
	  white = val;
     370:	80 93 a7 00 	sts	0x00A7, r24
     374:	08 95       	ret

00000376 <__vector_3>:

volatile char twoHZ_status = 0;
 
//Прерывание моргалки
ISR(TIMER2_COMP_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	 twoHZ--;
     384:	80 91 7a 00 	lds	r24, 0x007A
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 7a 00 	sts	0x007A, r24
	 if(!twoHZ){
     38e:	80 91 7a 00 	lds	r24, 0x007A
     392:	81 11       	cpse	r24, r1
     394:	0a c0       	rjmp	.+20     	; 0x3aa <__vector_3+0x34>
	    twoHZ_status = !twoHZ_status;
     396:	90 91 a1 00 	lds	r25, 0x00A1
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	91 11       	cpse	r25, r1
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	80 93 a1 00 	sts	0x00A1, r24
		twoHZ = 255;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	80 93 7a 00 	sts	0x007A, r24
	}
}
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_9>:

//Прерывание ШИМ
ISR (TIMER0_OVF_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
	count++;
     3c6:	80 91 a2 00 	lds	r24, 0x00A2
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	80 93 a2 00 	sts	0x00A2, r24
	if (count == 0){//Переполнение
     3d0:	81 11       	cpse	r24, r1
     3d2:	14 c0       	rjmp	.+40     	; 0x3fc <__vector_9+0x44>
		
		//Сохранием значения в буфер
		red_b   = red; 
     3d4:	80 91 d6 00 	lds	r24, 0x00D6
     3d8:	80 93 a6 00 	sts	0x00A6, r24
		green_b = green;
     3dc:	80 91 a9 00 	lds	r24, 0x00A9
     3e0:	80 93 a5 00 	sts	0x00A5, r24
		blue_b  = blue;
     3e4:	80 91 a8 00 	lds	r24, 0x00A8
     3e8:	80 93 a4 00 	sts	0x00A4, r24
		white_b  = white;
     3ec:	80 91 a7 00 	lds	r24, 0x00A7
     3f0:	80 93 a3 00 	sts	0x00A3, r24
		
       //Высокий уровень
	   PORT_R |= (1<<R);
     3f4:	95 9a       	sbi	0x12, 5	; 18
	   PORT_G |= (1<<G);
     3f6:	96 9a       	sbi	0x12, 6	; 18
	   PORT_B |= (1<<B);
     3f8:	97 9a       	sbi	0x12, 7	; 18
	   PORT_W |= (1<<W);
     3fa:	c0 9a       	sbi	0x18, 0	; 24
		
	}
	
	//Если достигли ширины импульса, низкий уровень
	if (red_b   == count) { PORT_R &=~ (1<<R);}
     3fc:	90 91 a6 00 	lds	r25, 0x00A6
     400:	80 91 a2 00 	lds	r24, 0x00A2
     404:	98 13       	cpse	r25, r24
     406:	01 c0       	rjmp	.+2      	; 0x40a <__vector_9+0x52>
     408:	95 98       	cbi	0x12, 5	; 18
	if (green_b == count) { PORT_G &=~ (1<<G);}
     40a:	90 91 a5 00 	lds	r25, 0x00A5
     40e:	80 91 a2 00 	lds	r24, 0x00A2
     412:	98 13       	cpse	r25, r24
     414:	01 c0       	rjmp	.+2      	; 0x418 <__vector_9+0x60>
     416:	96 98       	cbi	0x12, 6	; 18
	if (blue_b  == count) {  PORT_B &=~ (1<<B);}
     418:	90 91 a4 00 	lds	r25, 0x00A4
     41c:	80 91 a2 00 	lds	r24, 0x00A2
     420:	98 13       	cpse	r25, r24
     422:	01 c0       	rjmp	.+2      	; 0x426 <__vector_9+0x6e>
     424:	97 98       	cbi	0x12, 7	; 18
	if (white_b  == count) { 	PORT_W &= ~(1<<W);}
     426:	90 91 a3 00 	lds	r25, 0x00A3
     42a:	80 91 a2 00 	lds	r24, 0x00A2
     42e:	98 13       	cpse	r25, r24
     430:	01 c0       	rjmp	.+2      	; 0x434 <__vector_9+0x7c>
     432:	c0 98       	cbi	0x18, 0	; 24
}
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <led_strob>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

//Строб светодиода кнопки
void led_strob(){
	BUTTON_SPROB_LED_PORT |= (1 << BUTTON_SPROB_LED_PIN);
     442:	c6 9a       	sbi	0x18, 6	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	80 40       	sbci	r24, 0x00	; 0
     44e:	90 40       	sbci	r25, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <led_strob+0x8>
     452:	00 c0       	rjmp	.+0      	; 0x454 <led_strob+0x12>
     454:	00 00       	nop
	_delay_ms(100);
	BUTTON_SPROB_LED_PORT &= ~(1 << BUTTON_SPROB_LED_PIN);
     456:	c6 98       	cbi	0x18, 6	; 24
     458:	08 95       	ret

0000045a <SPI_init>:
}

//SPI инициализация 
void SPI_init(void)
{
	SHIFT_REG_DDR |= ((1<<DATA)|(1<<SCL));
     45a:	87 b3       	in	r24, 0x17	; 23
     45c:	88 62       	ori	r24, 0x28	; 40
     45e:	87 bb       	out	0x17, r24	; 23
	SHIFT_REG_PORT &= ~((1<<DATA)|(1<<SCL));
     460:	88 b3       	in	r24, 0x18	; 24
     462:	87 7d       	andi	r24, 0xD7	; 215
     464:	88 bb       	out	0x18, r24	; 24
	SHIFT_REG_DDR |= (1<<LATCH) ;
     466:	ba 9a       	sbi	0x17, 2	; 23
	SHIFT_REG_PORT &=~ (1 << LATCH);
     468:	c2 98       	cbi	0x18, 2	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//Включение, режим MASTER
     46a:	80 e5       	ldi	r24, 0x50	; 80
     46c:	8d b9       	out	0x0d, r24	; 13
     46e:	08 95       	ret

00000470 <PWM_init>:
}

//PWM инициализация 
void PWM_init(){
	DDR_R |= (1<<R);
     470:	8d 9a       	sbi	0x11, 5	; 17
	DDR_G |= (1<<G);
     472:	8e 9a       	sbi	0x11, 6	; 17
	DDR_B |= (1<<B);
     474:	8f 9a       	sbi	0x11, 7	; 17
	DDR_W |= (1<<W);
     476:	b8 9a       	sbi	0x17, 0	; 23
	
	PORT_R &= ~(1<<R);
     478:	95 98       	cbi	0x12, 5	; 18
	PORT_G &= ~(1<<G);
     47a:	96 98       	cbi	0x12, 6	; 18
	PORT_B &= ~(1<<B);
     47c:	97 98       	cbi	0x12, 7	; 18
	PORT_W &= ~(1<<W);
     47e:	c0 98       	cbi	0x18, 0	; 24

	DDRB &= ~(1<<PB7);
     480:	bf 98       	cbi	0x17, 7	; 23
    TCCR0 |= (1 << CS10);
     482:	83 b7       	in	r24, 0x33	; 51
     484:	81 60       	ori	r24, 0x01	; 1
     486:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00;
     488:	12 be       	out	0x32, r1	; 50
    TIMSK |= (1 << TOIE0);
     48a:	89 b7       	in	r24, 0x39	; 57
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	89 bf       	out	0x39, r24	; 57
     490:	08 95       	ret

00000492 <ModifyRTC>:
    }
}

//Настройки времени
void ModifyRTC(void)
{
     492:	cf 93       	push	r28
	I2C_StartCondition();
     494:	6c d7       	rcall	.+3800   	; 0x136e <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     496:	80 ed       	ldi	r24, 0xD0	; 208
     498:	73 d7       	rcall	.+3814   	; 0x1380 <I2C_SendByte>
	switch(now_mode){
     49a:	80 91 b3 00 	lds	r24, 0x00B3
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <ModifyRTC+0x12>
     4a2:	67 c0       	rjmp	.+206    	; 0x572 <ModifyRTC+0xe0>
     4a4:	28 f4       	brcc	.+10     	; 0x4b0 <ModifyRTC+0x1e>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	61 f0       	breq	.+24     	; 0x4c2 <ModifyRTC+0x30>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	b1 f1       	breq	.+108    	; 0x51a <ModifyRTC+0x88>
     4ae:	52 c1       	rjmp	.+676    	; 0x754 <ModifyRTC+0x2c2>
     4b0:	85 30       	cpi	r24, 0x05	; 5
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <ModifyRTC+0x24>
     4b4:	fa c0       	rjmp	.+500    	; 0x6aa <ModifyRTC+0x218>
     4b6:	08 f4       	brcc	.+2      	; 0x4ba <ModifyRTC+0x28>
     4b8:	cc c0       	rjmp	.+408    	; 0x652 <ModifyRTC+0x1c0>
     4ba:	86 30       	cpi	r24, 0x06	; 6
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <ModifyRTC+0x2e>
     4be:	20 c1       	rjmp	.+576    	; 0x700 <ModifyRTC+0x26e>
     4c0:	49 c1       	rjmp	.+658    	; 0x754 <ModifyRTC+0x2c2>
		case MODE_EDIT_HOURS: //часы
			I2C_SendByte(2);//Переходим на 0x02 - байт часов
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	5d d7       	rcall	.+3770   	; 0x1380 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     4c6:	80 91 b2 00 	lds	r24, 0x00B2
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	89 f4       	brne	.+34     	; 0x4f0 <ModifyRTC+0x5e>
			  if(hour<23){ 
     4ce:	80 91 cc 00 	lds	r24, 0x00CC
     4d2:	87 31       	cpi	r24, 0x17	; 23
     4d4:	38 f4       	brcc	.+14     	; 0x4e4 <ModifyRTC+0x52>
				  I2C_SendByte(RTC_ConvertFromBinDec(hour+1));
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	3e d7       	rcall	.+3708   	; 0x1356 <RTC_ConvertFromBinDec>
     4da:	52 d7       	rcall	.+3748   	; 0x1380 <I2C_SendByte>
				  hour++;
     4dc:	80 91 cc 00 	lds	r24, 0x00CC
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <ModifyRTC+0x78>
			  }else{ 
				  I2C_SendByte(RTC_ConvertFromBinDec(0));
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	37 d7       	rcall	.+3694   	; 0x1356 <RTC_ConvertFromBinDec>
     4e8:	4b d7       	rcall	.+3734   	; 0x1380 <I2C_SendByte>
				  hour = 0;
     4ea:	10 92 cc 00 	sts	0x00CC, r1
     4ee:	32 c1       	rjmp	.+612    	; 0x754 <ModifyRTC+0x2c2>
			  }
			}else if(increment_mode == MODE_DISINC){
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <ModifyRTC+0x64>
     4f4:	2f c1       	rjmp	.+606    	; 0x754 <ModifyRTC+0x2c2>
			  if(hour>0){
     4f6:	80 91 cc 00 	lds	r24, 0x00CC
     4fa:	88 23       	and	r24, r24
     4fc:	49 f0       	breq	.+18     	; 0x510 <ModifyRTC+0x7e>
			    I2C_SendByte(RTC_ConvertFromBinDec(hour-1));
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	2a d7       	rcall	.+3668   	; 0x1356 <RTC_ConvertFromBinDec>
     502:	3e d7       	rcall	.+3708   	; 0x1380 <I2C_SendByte>
				hour--;
     504:	80 91 cc 00 	lds	r24, 0x00CC
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	80 93 cc 00 	sts	0x00CC, r24
     50e:	22 c1       	rjmp	.+580    	; 0x754 <ModifyRTC+0x2c2>
			  }else{ 
				I2C_SendByte(RTC_ConvertFromBinDec(23));
     510:	87 e1       	ldi	r24, 0x17	; 23
     512:	21 d7       	rcall	.+3650   	; 0x1356 <RTC_ConvertFromBinDec>
     514:	35 d7       	rcall	.+3690   	; 0x1380 <I2C_SendByte>
				hour = 23;
     516:	87 e1       	ldi	r24, 0x17	; 23
     518:	f8 cf       	rjmp	.-16     	; 0x50a <ModifyRTC+0x78>
			}
			
		break;
		
		case MODE_EDIT_MINUTES: // минуты
			I2C_SendByte(1);//Переходим на 0x01 - байт минут
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	31 d7       	rcall	.+3682   	; 0x1380 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     51e:	80 91 b2 00 	lds	r24, 0x00B2
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	89 f4       	brne	.+34     	; 0x548 <ModifyRTC+0xb6>
             if(min<59){ 
     526:	80 91 cd 00 	lds	r24, 0x00CD
     52a:	8b 33       	cpi	r24, 0x3B	; 59
     52c:	38 f4       	brcc	.+14     	; 0x53c <ModifyRTC+0xaa>
				 I2C_SendByte(RTC_ConvertFromBinDec(min+1));
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	12 d7       	rcall	.+3620   	; 0x1356 <RTC_ConvertFromBinDec>
     532:	26 d7       	rcall	.+3660   	; 0x1380 <I2C_SendByte>
				 min++;
     534:	80 91 cd 00 	lds	r24, 0x00CD
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	13 c0       	rjmp	.+38     	; 0x562 <ModifyRTC+0xd0>
             }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(0));
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0b d7       	rcall	.+3606   	; 0x1356 <RTC_ConvertFromBinDec>
     540:	1f d7       	rcall	.+3646   	; 0x1380 <I2C_SendByte>
				 min = 0;
     542:	10 92 cd 00 	sts	0x00CD, r1
     546:	06 c1       	rjmp	.+524    	; 0x754 <ModifyRTC+0x2c2>
			 }
		    }else if(increment_mode == MODE_DISINC){
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	09 f0       	breq	.+2      	; 0x54e <ModifyRTC+0xbc>
     54c:	03 c1       	rjmp	.+518    	; 0x754 <ModifyRTC+0x2c2>
				if(min>0){ 
     54e:	80 91 cd 00 	lds	r24, 0x00CD
     552:	88 23       	and	r24, r24
     554:	49 f0       	breq	.+18     	; 0x568 <ModifyRTC+0xd6>
					I2C_SendByte(RTC_ConvertFromBinDec(min-1));
     556:	81 50       	subi	r24, 0x01	; 1
     558:	fe d6       	rcall	.+3580   	; 0x1356 <RTC_ConvertFromBinDec>
     55a:	12 d7       	rcall	.+3620   	; 0x1380 <I2C_SendByte>
					min--;
     55c:	80 91 cd 00 	lds	r24, 0x00CD
     560:	81 50       	subi	r24, 0x01	; 1
     562:	80 93 cd 00 	sts	0x00CD, r24
     566:	f6 c0       	rjmp	.+492    	; 0x754 <ModifyRTC+0x2c2>
				}else{ 
					I2C_SendByte(RTC_ConvertFromBinDec(59));
     568:	8b e3       	ldi	r24, 0x3B	; 59
     56a:	f5 d6       	rcall	.+3562   	; 0x1356 <RTC_ConvertFromBinDec>
     56c:	09 d7       	rcall	.+3602   	; 0x1380 <I2C_SendByte>
					min = 59;
     56e:	8b e3       	ldi	r24, 0x3B	; 59
     570:	f8 cf       	rjmp	.-16     	; 0x562 <ModifyRTC+0xd0>
			}
		break;
		
		
		case MODE_EDIT_DAY: // дата
		 	I2C_SendByte(4);//Переходим на 0x04 - байт числа даты
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	05 d7       	rcall	.+3594   	; 0x1380 <I2C_SendByte>
			if (month==2) //февраль
     576:	90 91 c9 00 	lds	r25, 0x00C9
     57a:	80 91 b2 00 	lds	r24, 0x00B2
     57e:	92 30       	cpi	r25, 0x02	; 2
     580:	71 f5       	brne	.+92     	; 0x5de <ModifyRTC+0x14c>
			{
				if(year%4==0) { //Если високосный год
     582:	90 91 c8 00 	lds	r25, 0x00C8
     586:	93 70       	andi	r25, 0x03	; 3
     588:	39 f4       	brne	.+14     	; 0x598 <ModifyRTC+0x106>
					 if(increment_mode == MODE_INC){
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	81 f4       	brne	.+32     	; 0x5ae <ModifyRTC+0x11c>
						 if(date<29){ 
     58e:	80 91 ca 00 	lds	r24, 0x00CA
     592:	8d 31       	cpi	r24, 0x1D	; 29
     594:	38 f4       	brcc	.+14     	; 0x5a4 <ModifyRTC+0x112>
     596:	41 c0       	rjmp	.+130    	; 0x61a <ModifyRTC+0x188>
							 I2C_SendByte(RTC_ConvertFromBinDec(29));
							 date = 29;
						 }
			         }
				}else{
					if(increment_mode == MODE_INC){
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	a9 f4       	brne	.+42     	; 0x5c6 <ModifyRTC+0x134>
						if(date<28){
     59c:	80 91 ca 00 	lds	r24, 0x00CA
     5a0:	8c 31       	cpi	r24, 0x1C	; 28
     5a2:	d8 f1       	brcs	.+118    	; 0x61a <ModifyRTC+0x188>
					 if(increment_mode == MODE_INC){
						 if(date<29){ 
							 I2C_SendByte(RTC_ConvertFromBinDec(date+1));
							 date++;
						 }else{ 
							 I2C_SendByte(RTC_ConvertFromBinDec(1));
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	d7 d6       	rcall	.+3502   	; 0x1356 <RTC_ConvertFromBinDec>
     5a8:	eb d6       	rcall	.+3542   	; 0x1380 <I2C_SendByte>
							 date = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	4f c0       	rjmp	.+158    	; 0x64c <ModifyRTC+0x1ba>
						 }
				     }else if(increment_mode == MODE_DISINC){
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <ModifyRTC+0x122>
     5b2:	d0 c0       	rjmp	.+416    	; 0x754 <ModifyRTC+0x2c2>
						 if(date>1){ 
     5b4:	80 91 ca 00 	lds	r24, 0x00CA
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	e8 f5       	brcc	.+122    	; 0x636 <ModifyRTC+0x1a4>
							 I2C_SendByte(RTC_ConvertFromBinDec(date-1));
							 date--;
						 }else{ 
							 I2C_SendByte(RTC_ConvertFromBinDec(29));
     5bc:	8d e1       	ldi	r24, 0x1D	; 29
     5be:	cb d6       	rcall	.+3478   	; 0x1356 <RTC_ConvertFromBinDec>
     5c0:	df d6       	rcall	.+3518   	; 0x1380 <I2C_SendByte>
							 date = 29;
     5c2:	8d e1       	ldi	r24, 0x1D	; 29
     5c4:	43 c0       	rjmp	.+134    	; 0x64c <ModifyRTC+0x1ba>
							date++;
						}else{ 
							I2C_SendByte(RTC_ConvertFromBinDec(1));
							date = 1;
						}
					}else if(increment_mode == MODE_DISINC){
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	09 f0       	breq	.+2      	; 0x5cc <ModifyRTC+0x13a>
     5ca:	c4 c0       	rjmp	.+392    	; 0x754 <ModifyRTC+0x2c2>
						 if(date>1){ 
     5cc:	80 91 ca 00 	lds	r24, 0x00CA
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	88 f5       	brcc	.+98     	; 0x636 <ModifyRTC+0x1a4>
							 I2C_SendByte(RTC_ConvertFromBinDec(date-1));
							 date--;
						 }else{ 
							 I2C_SendByte(RTC_ConvertFromBinDec(28));
     5d4:	8c e1       	ldi	r24, 0x1C	; 28
     5d6:	bf d6       	rcall	.+3454   	; 0x1356 <RTC_ConvertFromBinDec>
     5d8:	d3 d6       	rcall	.+3494   	; 0x1380 <I2C_SendByte>
							 date = 28;
     5da:	8c e1       	ldi	r24, 0x1C	; 28
     5dc:	37 c0       	rjmp	.+110    	; 0x64c <ModifyRTC+0x1ba>
						 }
					}				
				}
			}else if ((month==4)|(month==6)|(month==9)|(month==11)){
     5de:	9d 7f       	andi	r25, 0xFD	; 253
     5e0:	94 30       	cpi	r25, 0x04	; 4
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <ModifyRTC+0x156>
     5e4:	99 30       	cpi	r25, 0x09	; 9
     5e6:	99 f4       	brne	.+38     	; 0x60e <ModifyRTC+0x17c>
				if(increment_mode == MODE_INC){
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <ModifyRTC+0x164>
					if(date<30){ 
     5ec:	80 91 ca 00 	lds	r24, 0x00CA
     5f0:	8e 31       	cpi	r24, 0x1E	; 30
     5f2:	c0 f6       	brcc	.-80     	; 0x5a4 <ModifyRTC+0x112>
     5f4:	12 c0       	rjmp	.+36     	; 0x61a <ModifyRTC+0x188>
						date++;
					}else{ 
						I2C_SendByte(RTC_ConvertFromBinDec(1));
						date = 1;
					}
				}else if(increment_mode == MODE_DISINC){
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	09 f0       	breq	.+2      	; 0x5fc <ModifyRTC+0x16a>
     5fa:	ac c0       	rjmp	.+344    	; 0x754 <ModifyRTC+0x2c2>
					if(date>1){ 
     5fc:	80 91 ca 00 	lds	r24, 0x00CA
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	c8 f4       	brcc	.+50     	; 0x636 <ModifyRTC+0x1a4>
						I2C_SendByte(RTC_ConvertFromBinDec(date-1));
						date--;
					}else{ 
						I2C_SendByte(RTC_ConvertFromBinDec(30));
     604:	8e e1       	ldi	r24, 0x1E	; 30
     606:	a7 d6       	rcall	.+3406   	; 0x1356 <RTC_ConvertFromBinDec>
     608:	bb d6       	rcall	.+3446   	; 0x1380 <I2C_SendByte>
						date = 30;
     60a:	8e e1       	ldi	r24, 0x1E	; 30
     60c:	1f c0       	rjmp	.+62     	; 0x64c <ModifyRTC+0x1ba>
					}
				}			
			}else{
				if(increment_mode == MODE_INC){
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	59 f4       	brne	.+22     	; 0x628 <ModifyRTC+0x196>
					if(date<31){ 
     612:	80 91 ca 00 	lds	r24, 0x00CA
     616:	8f 31       	cpi	r24, 0x1F	; 31
     618:	28 f6       	brcc	.-118    	; 0x5a4 <ModifyRTC+0x112>
						I2C_SendByte(RTC_ConvertFromBinDec(date+1));
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	9c d6       	rcall	.+3384   	; 0x1356 <RTC_ConvertFromBinDec>
     61e:	b0 d6       	rcall	.+3424   	; 0x1380 <I2C_SendByte>
						date++;
     620:	80 91 ca 00 	lds	r24, 0x00CA
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	12 c0       	rjmp	.+36     	; 0x64c <ModifyRTC+0x1ba>
					}else{ 
						I2C_SendByte(RTC_ConvertFromBinDec(1));
						date = 1;
					}
				}else if(increment_mode == MODE_DISINC){
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	09 f0       	breq	.+2      	; 0x62e <ModifyRTC+0x19c>
     62c:	93 c0       	rjmp	.+294    	; 0x754 <ModifyRTC+0x2c2>
					if(date>1){ 
     62e:	80 91 ca 00 	lds	r24, 0x00CA
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	38 f0       	brcs	.+14     	; 0x644 <ModifyRTC+0x1b2>
						I2C_SendByte(RTC_ConvertFromBinDec(date-1));
     636:	81 50       	subi	r24, 0x01	; 1
     638:	8e d6       	rcall	.+3356   	; 0x1356 <RTC_ConvertFromBinDec>
     63a:	a2 d6       	rcall	.+3396   	; 0x1380 <I2C_SendByte>
						date--;
     63c:	80 91 ca 00 	lds	r24, 0x00CA
     640:	81 50       	subi	r24, 0x01	; 1
     642:	04 c0       	rjmp	.+8      	; 0x64c <ModifyRTC+0x1ba>
					}else{ 
						I2C_SendByte(RTC_ConvertFromBinDec(31));
     644:	8f e1       	ldi	r24, 0x1F	; 31
     646:	87 d6       	rcall	.+3342   	; 0x1356 <RTC_ConvertFromBinDec>
     648:	9b d6       	rcall	.+3382   	; 0x1380 <I2C_SendByte>
						date = 31;
     64a:	8f e1       	ldi	r24, 0x1F	; 31
     64c:	80 93 ca 00 	sts	0x00CA, r24
     650:	81 c0       	rjmp	.+258    	; 0x754 <ModifyRTC+0x2c2>
				}
			}
		break;
		
		case MODE_EDIT_MOUTH: // месяц
		 	I2C_SendByte(5);//Переходим на 0x05 - байт месяца
     652:	85 e0       	ldi	r24, 0x05	; 5
     654:	95 d6       	rcall	.+3370   	; 0x1380 <I2C_SendByte>
			
			if(increment_mode == MODE_INC){
     656:	c0 91 b2 00 	lds	r28, 0x00B2
     65a:	c1 30       	cpi	r28, 0x01	; 1
     65c:	89 f4       	brne	.+34     	; 0x680 <ModifyRTC+0x1ee>
			 if(month<12){ 
     65e:	80 91 c9 00 	lds	r24, 0x00C9
     662:	8c 30       	cpi	r24, 0x0C	; 12
     664:	38 f4       	brcc	.+14     	; 0x674 <ModifyRTC+0x1e2>
				 I2C_SendByte(RTC_ConvertFromBinDec(month+1));
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	76 d6       	rcall	.+3308   	; 0x1356 <RTC_ConvertFromBinDec>
     66a:	8a d6       	rcall	.+3348   	; 0x1380 <I2C_SendByte>
				 month++;
     66c:	80 91 c9 00 	lds	r24, 0x00C9
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	18 c0       	rjmp	.+48     	; 0x6a4 <ModifyRTC+0x212>
			 }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(1));
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	6f d6       	rcall	.+3294   	; 0x1356 <RTC_ConvertFromBinDec>
     678:	83 d6       	rcall	.+3334   	; 0x1380 <I2C_SendByte>
				 month = 1;
     67a:	c0 93 c9 00 	sts	0x00C9, r28
     67e:	6a c0       	rjmp	.+212    	; 0x754 <ModifyRTC+0x2c2>
			 }
			}else if(increment_mode == MODE_DISINC){
     680:	c2 30       	cpi	r28, 0x02	; 2
     682:	09 f0       	breq	.+2      	; 0x686 <ModifyRTC+0x1f4>
     684:	67 c0       	rjmp	.+206    	; 0x754 <ModifyRTC+0x2c2>
			 if(month > 1){ 
     686:	80 91 c9 00 	lds	r24, 0x00C9
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	38 f0       	brcs	.+14     	; 0x69c <ModifyRTC+0x20a>
				 I2C_SendByte(RTC_ConvertFromBinDec(month-1));
     68e:	81 50       	subi	r24, 0x01	; 1
     690:	62 d6       	rcall	.+3268   	; 0x1356 <RTC_ConvertFromBinDec>
     692:	76 d6       	rcall	.+3308   	; 0x1380 <I2C_SendByte>
				 month--;
     694:	80 91 c9 00 	lds	r24, 0x00C9
     698:	81 50       	subi	r24, 0x01	; 1
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <ModifyRTC+0x212>
			 }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(12));
     69c:	8c e0       	ldi	r24, 0x0C	; 12
     69e:	5b d6       	rcall	.+3254   	; 0x1356 <RTC_ConvertFromBinDec>
     6a0:	6f d6       	rcall	.+3294   	; 0x1380 <I2C_SendByte>
				 month = 12;
     6a2:	8c e0       	ldi	r24, 0x0C	; 12
     6a4:	80 93 c9 00 	sts	0x00C9, r24
     6a8:	55 c0       	rjmp	.+170    	; 0x754 <ModifyRTC+0x2c2>
			}		
		break;
		
		
		case MODE_EDIT_YEAR: // год
		 	I2C_SendByte(6);//Переходим на 0x06 - байт года
     6aa:	86 e0       	ldi	r24, 0x06	; 6
     6ac:	69 d6       	rcall	.+3282   	; 0x1380 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     6ae:	c0 91 b2 00 	lds	r28, 0x00B2
     6b2:	c1 30       	cpi	r28, 0x01	; 1
     6b4:	89 f4       	brne	.+34     	; 0x6d8 <ModifyRTC+0x246>
			 if(year<99){ 
     6b6:	80 91 c8 00 	lds	r24, 0x00C8
     6ba:	83 36       	cpi	r24, 0x63	; 99
     6bc:	38 f4       	brcc	.+14     	; 0x6cc <ModifyRTC+0x23a>
				 I2C_SendByte(RTC_ConvertFromBinDec(year+1));
     6be:	8f 5f       	subi	r24, 0xFF	; 255
     6c0:	4a d6       	rcall	.+3220   	; 0x1356 <RTC_ConvertFromBinDec>
     6c2:	5e d6       	rcall	.+3260   	; 0x1380 <I2C_SendByte>
				 year++;
     6c4:	80 91 c8 00 	lds	r24, 0x00C8
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	17 c0       	rjmp	.+46     	; 0x6fa <ModifyRTC+0x268>
			 }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(1));
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	43 d6       	rcall	.+3206   	; 0x1356 <RTC_ConvertFromBinDec>
     6d0:	57 d6       	rcall	.+3246   	; 0x1380 <I2C_SendByte>
				 year = 1;
     6d2:	c0 93 c8 00 	sts	0x00C8, r28
     6d6:	3e c0       	rjmp	.+124    	; 0x754 <ModifyRTC+0x2c2>
			 }
			}else if(increment_mode == MODE_DISINC){
     6d8:	c2 30       	cpi	r28, 0x02	; 2
     6da:	e1 f5       	brne	.+120    	; 0x754 <ModifyRTC+0x2c2>
			 if(year>1){
     6dc:	80 91 c8 00 	lds	r24, 0x00C8
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	38 f0       	brcs	.+14     	; 0x6f2 <ModifyRTC+0x260>
				  I2C_SendByte(RTC_ConvertFromBinDec(year-1));
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	37 d6       	rcall	.+3182   	; 0x1356 <RTC_ConvertFromBinDec>
     6e8:	4b d6       	rcall	.+3222   	; 0x1380 <I2C_SendByte>
				  year--;
     6ea:	80 91 c8 00 	lds	r24, 0x00C8
     6ee:	81 50       	subi	r24, 0x01	; 1
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <ModifyRTC+0x268>
			 }else{ 
				  I2C_SendByte(RTC_ConvertFromBinDec(99));
     6f2:	83 e6       	ldi	r24, 0x63	; 99
     6f4:	30 d6       	rcall	.+3168   	; 0x1356 <RTC_ConvertFromBinDec>
     6f6:	44 d6       	rcall	.+3208   	; 0x1380 <I2C_SendByte>
				  year = 99;
     6f8:	83 e6       	ldi	r24, 0x63	; 99
     6fa:	80 93 c8 00 	sts	0x00C8, r24
     6fe:	2a c0       	rjmp	.+84     	; 0x754 <ModifyRTC+0x2c2>
			}
		break;
		
		
		case MODE_EDIT_WEEK_DAY: // день недели
		 	I2C_SendByte(3);//Переходим на 0x03 - байт дня недели
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	3e d6       	rcall	.+3196   	; 0x1380 <I2C_SendByte>
			if(increment_mode == MODE_INC){
     704:	c0 91 b2 00 	lds	r28, 0x00B2
     708:	c1 30       	cpi	r28, 0x01	; 1
     70a:	89 f4       	brne	.+34     	; 0x72e <ModifyRTC+0x29c>
			    if(day<7){ 
     70c:	80 91 cb 00 	lds	r24, 0x00CB
     710:	87 30       	cpi	r24, 0x07	; 7
     712:	38 f4       	brcc	.+14     	; 0x722 <ModifyRTC+0x290>
					I2C_SendByte(RTC_ConvertFromBinDec(day+1));
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	1f d6       	rcall	.+3134   	; 0x1356 <RTC_ConvertFromBinDec>
     718:	33 d6       	rcall	.+3174   	; 0x1380 <I2C_SendByte>
					day++;
     71a:	80 91 cb 00 	lds	r24, 0x00CB
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	17 c0       	rjmp	.+46     	; 0x750 <ModifyRTC+0x2be>
			    }else{ 
					I2C_SendByte(RTC_ConvertFromBinDec(1));
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	18 d6       	rcall	.+3120   	; 0x1356 <RTC_ConvertFromBinDec>
     726:	2c d6       	rcall	.+3160   	; 0x1380 <I2C_SendByte>
					day = 1;
     728:	c0 93 cb 00 	sts	0x00CB, r28
     72c:	13 c0       	rjmp	.+38     	; 0x754 <ModifyRTC+0x2c2>
				}
			}else if(increment_mode == MODE_DISINC){
     72e:	c2 30       	cpi	r28, 0x02	; 2
     730:	89 f4       	brne	.+34     	; 0x754 <ModifyRTC+0x2c2>
				if(day>1){ 
     732:	80 91 cb 00 	lds	r24, 0x00CB
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	38 f0       	brcs	.+14     	; 0x748 <ModifyRTC+0x2b6>
					I2C_SendByte(RTC_ConvertFromBinDec(day-1));
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	0c d6       	rcall	.+3096   	; 0x1356 <RTC_ConvertFromBinDec>
     73e:	20 d6       	rcall	.+3136   	; 0x1380 <I2C_SendByte>
					day--;
     740:	80 91 cb 00 	lds	r24, 0x00CB
     744:	81 50       	subi	r24, 0x01	; 1
     746:	04 c0       	rjmp	.+8      	; 0x750 <ModifyRTC+0x2be>
				}else{ 
					I2C_SendByte(RTC_ConvertFromBinDec(7));
     748:	87 e0       	ldi	r24, 0x07	; 7
     74a:	05 d6       	rcall	.+3082   	; 0x1356 <RTC_ConvertFromBinDec>
     74c:	19 d6       	rcall	.+3122   	; 0x1380 <I2C_SendByte>
					day = 7;
     74e:	87 e0       	ldi	r24, 0x07	; 7
     750:	80 93 cb 00 	sts	0x00CB, r24
			}
	    break;

	}
	I2C_StopCondition();
}
     754:	cf 91       	pop	r28
				}
			}
	    break;

	}
	I2C_StopCondition();
     756:	11 c6       	rjmp	.+3106   	; 0x137a <I2C_StopCondition>

00000758 <ModifyLEDMenu>:
}

//Настройка рассвета/заката
void ModifyLEDMenu(void)
{
	switch(now_mode_led_menu){
     758:	80 91 b0 00 	lds	r24, 0x00B0
     75c:	90 91 b1 00 	lds	r25, 0x00B1
     760:	89 30       	cpi	r24, 0x09	; 9
     762:	91 05       	cpc	r25, r1
     764:	09 f4       	brne	.+2      	; 0x768 <ModifyLEDMenu+0x10>
     766:	5e c0       	rjmp	.+188    	; 0x824 <ModifyLEDMenu+0xcc>
     768:	30 f4       	brcc	.+12     	; 0x776 <ModifyLEDMenu+0x1e>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	91 05       	cpc	r25, r1
     76e:	69 f0       	breq	.+26     	; 0x78a <ModifyLEDMenu+0x32>
     770:	08 97       	sbiw	r24, 0x08	; 8
     772:	89 f1       	breq	.+98     	; 0x7d6 <ModifyLEDMenu+0x7e>
     774:	08 95       	ret
     776:	8b 30       	cpi	r24, 0x0B	; 11
     778:	91 05       	cpc	r25, r1
     77a:	09 f4       	brne	.+2      	; 0x77e <ModifyLEDMenu+0x26>
     77c:	9f c0       	rjmp	.+318    	; 0x8bc <ModifyLEDMenu+0x164>
     77e:	08 f4       	brcc	.+2      	; 0x782 <ModifyLEDMenu+0x2a>
     780:	77 c0       	rjmp	.+238    	; 0x870 <ModifyLEDMenu+0x118>
     782:	0c 97       	sbiw	r24, 0x0c	; 12
     784:	09 f4       	brne	.+2      	; 0x788 <ModifyLEDMenu+0x30>
     786:	c0 c0       	rjmp	.+384    	; 0x908 <ModifyLEDMenu+0x1b0>
     788:	08 95       	ret
		    case MODE_EDIT_START_TIME_DAWN_HOURS: // день недели
			    if(increment_mode_led_menu == MODE_INC){
     78a:	80 91 ae 00 	lds	r24, 0x00AE
     78e:	90 91 af 00 	lds	r25, 0x00AF
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	91 05       	cpc	r25, r1
     796:	81 f4       	brne	.+32     	; 0x7b8 <ModifyLEDMenu+0x60>
					if(led_menu_dawn_hours<10) led_menu_dawn_hours++;
     798:	80 91 be 00 	lds	r24, 0x00BE
     79c:	90 91 bf 00 	lds	r25, 0x00BF
     7a0:	8a 30       	cpi	r24, 0x0A	; 10
     7a2:	91 05       	cpc	r25, r1
     7a4:	10 f4       	brcc	.+4      	; 0x7aa <ModifyLEDMenu+0x52>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 3;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 bf 00 	sts	0x00BF, r25
     7b2:	80 93 be 00 	sts	0x00BE, r24
     7b6:	08 95       	ret
				}else if(increment_mode_led_menu == MODE_DISINC){
     7b8:	02 97       	sbiw	r24, 0x02	; 2
     7ba:	09 f0       	breq	.+2      	; 0x7be <ModifyLEDMenu+0x66>
     7bc:	c9 c0       	rjmp	.+402    	; 0x950 <ModifyLEDMenu+0x1f8>
					if(led_menu_dawn_hours>4) led_menu_dawn_hours--;
     7be:	80 91 be 00 	lds	r24, 0x00BE
     7c2:	90 91 bf 00 	lds	r25, 0x00BF
     7c6:	85 30       	cpi	r24, 0x05	; 5
     7c8:	91 05       	cpc	r25, r1
     7ca:	10 f0       	brcs	.+4      	; 0x7d0 <ModifyLEDMenu+0x78>
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	ef cf       	rjmp	.-34     	; 0x7ae <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 10;
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	ec cf       	rjmp	.-40     	; 0x7ae <ModifyLEDMenu+0x56>
			    }
			break;
			
		    case MODE_EDIT_START_TIME_DAWN_MINS: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     7d6:	80 91 ae 00 	lds	r24, 0x00AE
     7da:	90 91 af 00 	lds	r25, 0x00AF
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	91 05       	cpc	r25, r1
     7e2:	71 f4       	brne	.+28     	; 0x800 <ModifyLEDMenu+0xa8>
					 if(led_menu_dawn_mins<59) led_menu_dawn_mins++;
     7e4:	80 91 bc 00 	lds	r24, 0x00BC
     7e8:	90 91 bd 00 	lds	r25, 0x00BD
     7ec:	8b 33       	cpi	r24, 0x3B	; 59
     7ee:	91 05       	cpc	r25, r1
     7f0:	10 f4       	brcc	.+4      	; 0x7f6 <ModifyLEDMenu+0x9e>
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <ModifyLEDMenu+0xbc>
					 else led_menu_dawn_mins = 0;
     7f6:	10 92 bd 00 	sts	0x00BD, r1
     7fa:	10 92 bc 00 	sts	0x00BC, r1
     7fe:	08 95       	ret
				 }else if(increment_mode_led_menu == MODE_DISINC){
     800:	02 97       	sbiw	r24, 0x02	; 2
     802:	09 f0       	breq	.+2      	; 0x806 <ModifyLEDMenu+0xae>
     804:	a5 c0       	rjmp	.+330    	; 0x950 <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_mins>0) led_menu_dawn_mins--;
     806:	80 91 bc 00 	lds	r24, 0x00BC
     80a:	90 91 bd 00 	lds	r25, 0x00BD
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	31 f0       	breq	.+12     	; 0x81e <ModifyLEDMenu+0xc6>
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	90 93 bd 00 	sts	0x00BD, r25
     818:	80 93 bc 00 	sts	0x00BC, r24
     81c:	08 95       	ret
					 else led_menu_dawn_mins = 59;
     81e:	8b e3       	ldi	r24, 0x3B	; 59
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	f8 cf       	rjmp	.-16     	; 0x814 <ModifyLEDMenu+0xbc>
				 }
		    break;
			
			case MODE_EDIT_INTERVAL_DAWN: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     824:	80 91 ae 00 	lds	r24, 0x00AE
     828:	90 91 af 00 	lds	r25, 0x00AF
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	91 05       	cpc	r25, r1
     830:	61 f4       	brne	.+24     	; 0x84a <ModifyLEDMenu+0xf2>
					 if(led_menu_dawn_interval_mins<120) led_menu_dawn_interval_mins += 15;
     832:	80 91 ba 00 	lds	r24, 0x00BA
     836:	90 91 bb 00 	lds	r25, 0x00BB
     83a:	88 37       	cpi	r24, 0x78	; 120
     83c:	91 05       	cpc	r25, r1
     83e:	10 f4       	brcc	.+4      	; 0x844 <ModifyLEDMenu+0xec>
     840:	0f 96       	adiw	r24, 0x0f	; 15
     842:	11 c0       	rjmp	.+34     	; 0x866 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 15;
     844:	8f e0       	ldi	r24, 0x0F	; 15
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e c0       	rjmp	.+28     	; 0x866 <ModifyLEDMenu+0x10e>
					 }else if(increment_mode_led_menu == MODE_DISINC){
     84a:	02 97       	sbiw	r24, 0x02	; 2
     84c:	09 f0       	breq	.+2      	; 0x850 <ModifyLEDMenu+0xf8>
     84e:	80 c0       	rjmp	.+256    	; 0x950 <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_interval_mins>15) led_menu_dawn_interval_mins -= 15;
     850:	80 91 ba 00 	lds	r24, 0x00BA
     854:	90 91 bb 00 	lds	r25, 0x00BB
     858:	80 31       	cpi	r24, 0x10	; 16
     85a:	91 05       	cpc	r25, r1
     85c:	10 f0       	brcs	.+4      	; 0x862 <ModifyLEDMenu+0x10a>
     85e:	0f 97       	sbiw	r24, 0x0f	; 15
     860:	02 c0       	rjmp	.+4      	; 0x866 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 120;
     862:	88 e7       	ldi	r24, 0x78	; 120
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 bb 00 	sts	0x00BB, r25
     86a:	80 93 ba 00 	sts	0x00BA, r24
     86e:	08 95       	ret
				 }
		    break;
			
		    case MODE_EDIT_START_TIME_SUNSET_HOURS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     870:	80 91 ae 00 	lds	r24, 0x00AE
     874:	90 91 af 00 	lds	r25, 0x00AF
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	91 05       	cpc	r25, r1
     87c:	61 f4       	brne	.+24     	; 0x896 <ModifyLEDMenu+0x13e>
			    if(led_menu_sunset_hours<21) led_menu_sunset_hours++;
     87e:	80 91 b8 00 	lds	r24, 0x00B8
     882:	90 91 b9 00 	lds	r25, 0x00B9
     886:	85 31       	cpi	r24, 0x15	; 21
     888:	91 05       	cpc	r25, r1
     88a:	10 f4       	brcc	.+4      	; 0x890 <ModifyLEDMenu+0x138>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	11 c0       	rjmp	.+34     	; 0x8b2 <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 13;
     890:	8d e0       	ldi	r24, 0x0D	; 13
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e c0       	rjmp	.+28     	; 0x8b2 <ModifyLEDMenu+0x15a>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     896:	02 97       	sbiw	r24, 0x02	; 2
     898:	09 f0       	breq	.+2      	; 0x89c <ModifyLEDMenu+0x144>
     89a:	5a c0       	rjmp	.+180    	; 0x950 <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_hours>13) led_menu_sunset_hours--;
     89c:	80 91 b8 00 	lds	r24, 0x00B8
     8a0:	90 91 b9 00 	lds	r25, 0x00B9
     8a4:	8e 30       	cpi	r24, 0x0E	; 14
     8a6:	91 05       	cpc	r25, r1
     8a8:	10 f0       	brcs	.+4      	; 0x8ae <ModifyLEDMenu+0x156>
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 21;
     8ae:	85 e1       	ldi	r24, 0x15	; 21
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	90 93 b9 00 	sts	0x00B9, r25
     8b6:	80 93 b8 00 	sts	0x00B8, r24
     8ba:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_START_TIME_SUNSET_MINS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     8bc:	80 91 ae 00 	lds	r24, 0x00AE
     8c0:	90 91 af 00 	lds	r25, 0x00AF
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	91 05       	cpc	r25, r1
     8c8:	71 f4       	brne	.+28     	; 0x8e6 <ModifyLEDMenu+0x18e>
			    if(led_menu_sunset_mins<59) led_menu_sunset_mins++;
     8ca:	80 91 b6 00 	lds	r24, 0x00B6
     8ce:	90 91 b7 00 	lds	r25, 0x00B7
     8d2:	8b 33       	cpi	r24, 0x3B	; 59
     8d4:	91 05       	cpc	r25, r1
     8d6:	10 f4       	brcc	.+4      	; 0x8dc <ModifyLEDMenu+0x184>
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 0;
     8dc:	10 92 b7 00 	sts	0x00B7, r1
     8e0:	10 92 b6 00 	sts	0x00B6, r1
     8e4:	08 95       	ret
			    }else if(increment_mode_led_menu == MODE_DISINC){
     8e6:	02 97       	sbiw	r24, 0x02	; 2
     8e8:	99 f5       	brne	.+102    	; 0x950 <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_mins>0) led_menu_sunset_mins--;
     8ea:	80 91 b6 00 	lds	r24, 0x00B6
     8ee:	90 91 b7 00 	lds	r25, 0x00B7
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	11 f0       	breq	.+4      	; 0x8fa <ModifyLEDMenu+0x1a2>
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 59;
     8fa:	8b e3       	ldi	r24, 0x3B	; 59
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	90 93 b7 00 	sts	0x00B7, r25
     902:	80 93 b6 00 	sts	0x00B6, r24
     906:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_INTERVAL_SUNSET: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     908:	80 91 ae 00 	lds	r24, 0x00AE
     90c:	90 91 af 00 	lds	r25, 0x00AF
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	91 05       	cpc	r25, r1
     914:	61 f4       	brne	.+24     	; 0x92e <ModifyLEDMenu+0x1d6>
			    if(led_menu_sunset_interval_mins<120) led_menu_sunset_interval_mins += 15;
     916:	80 91 b4 00 	lds	r24, 0x00B4
     91a:	90 91 b5 00 	lds	r25, 0x00B5
     91e:	88 37       	cpi	r24, 0x78	; 120
     920:	91 05       	cpc	r25, r1
     922:	10 f4       	brcc	.+4      	; 0x928 <ModifyLEDMenu+0x1d0>
     924:	0f 96       	adiw	r24, 0x0f	; 15
     926:	10 c0       	rjmp	.+32     	; 0x948 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 15;
     928:	8f e0       	ldi	r24, 0x0F	; 15
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0d c0       	rjmp	.+26     	; 0x948 <ModifyLEDMenu+0x1f0>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     92e:	02 97       	sbiw	r24, 0x02	; 2
     930:	79 f4       	brne	.+30     	; 0x950 <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_interval_mins>15) led_menu_sunset_interval_mins -= 15;
     932:	80 91 b4 00 	lds	r24, 0x00B4
     936:	90 91 b5 00 	lds	r25, 0x00B5
     93a:	80 31       	cpi	r24, 0x10	; 16
     93c:	91 05       	cpc	r25, r1
     93e:	10 f0       	brcs	.+4      	; 0x944 <ModifyLEDMenu+0x1ec>
     940:	0f 97       	sbiw	r24, 0x0f	; 15
     942:	02 c0       	rjmp	.+4      	; 0x948 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 120;
     944:	88 e7       	ldi	r24, 0x78	; 120
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 b5 00 	sts	0x00B5, r25
     94c:	80 93 b4 00 	sts	0x00B4, r24
     950:	08 95       	ret

00000952 <ShowTime>:
		    break;
	}

}

void ShowTime(unsigned char hour, unsigned char min){
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	1f 92       	push	r1
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	06 2f       	mov	r16, r22
	setCharIndicator(hour/10, 1);
     962:	1a e0       	ldi	r17, 0x0A	; 10
     964:	61 2f       	mov	r22, r17
     966:	35 d5       	rcall	.+2666   	; 0x13d2 <__udivmodqi4>
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	99 83       	std	Y+1, r25	; 0x01
     96c:	81 dc       	rcall	.-1790   	; 0x270 <setCharIndicator>
	setCharIndicator(hour%10, 2);
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	99 81       	ldd	r25, Y+1	; 0x01
     972:	89 2f       	mov	r24, r25
     974:	7d dc       	rcall	.-1798   	; 0x270 <setCharIndicator>
	
	setCharIndicator(min/10, 3);
     976:	80 2f       	mov	r24, r16
     978:	61 2f       	mov	r22, r17
     97a:	2b d5       	rcall	.+2646   	; 0x13d2 <__udivmodqi4>
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	99 83       	std	Y+1, r25	; 0x01
     980:	77 dc       	rcall	.-1810   	; 0x270 <setCharIndicator>
	setCharIndicator(min%10, 4);
     982:	64 e0       	ldi	r22, 0x04	; 4
     984:	99 81       	ldd	r25, Y+1	; 0x01
     986:	89 2f       	mov	r24, r25
}
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
void ShowTime(unsigned char hour, unsigned char min){
	setCharIndicator(hour/10, 1);
	setCharIndicator(hour%10, 2);
	
	setCharIndicator(min/10, 3);
	setCharIndicator(min%10, 4);
     992:	6e cc       	rjmp	.-1828   	; 0x270 <setCharIndicator>

00000994 <ShowDate>:
}

void ShowDate(unsigned char date, unsigned char month, unsigned char year){
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <ShowDate+0xa>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	06 2f       	mov	r16, r22
	setCharIndicator(date/10, 0);
     9a4:	1a e0       	ldi	r17, 0x0A	; 10
     9a6:	61 2f       	mov	r22, r17
     9a8:	14 d5       	rcall	.+2600   	; 0x13d2 <__udivmodqi4>
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	4a 83       	std	Y+2, r20	; 0x02
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	5f dc       	rcall	.-1858   	; 0x270 <setCharIndicator>
	setCharIndicator(date%10, 1);
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	89 2f       	mov	r24, r25
     9b8:	5b dc       	rcall	.-1866   	; 0x270 <setCharIndicator>
	setDotIndicator(1, 1);
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	5e dc       	rcall	.-1860   	; 0x27c <setDotIndicator>
	
	setCharIndicator(month/10, 2);
     9c0:	80 2f       	mov	r24, r16
     9c2:	61 2f       	mov	r22, r17
     9c4:	06 d5       	rcall	.+2572   	; 0x13d2 <__udivmodqi4>
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	99 83       	std	Y+1, r25	; 0x01
     9ca:	52 dc       	rcall	.-1884   	; 0x270 <setCharIndicator>
	setCharIndicator(month%10, 3);
     9cc:	63 e0       	ldi	r22, 0x03	; 3
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	89 2f       	mov	r24, r25
     9d2:	4e dc       	rcall	.-1892   	; 0x270 <setCharIndicator>
	setDotIndicator(3, 1);
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	51 dc       	rcall	.-1886   	; 0x27c <setDotIndicator>
	
	setCharIndicator(year/10, 4);
     9da:	4a 81       	ldd	r20, Y+2	; 0x02
     9dc:	84 2f       	mov	r24, r20
     9de:	61 2f       	mov	r22, r17
     9e0:	f8 d4       	rcall	.+2544   	; 0x13d2 <__udivmodqi4>
     9e2:	64 e0       	ldi	r22, 0x04	; 4
     9e4:	99 83       	std	Y+1, r25	; 0x01
     9e6:	44 dc       	rcall	.-1912   	; 0x270 <setCharIndicator>
	setCharIndicator(year%10, 5);
     9e8:	65 e0       	ldi	r22, 0x05	; 5
     9ea:	99 81       	ldd	r25, Y+1	; 0x01
     9ec:	89 2f       	mov	r24, r25
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
	setCharIndicator(month/10, 2);
	setCharIndicator(month%10, 3);
	setDotIndicator(3, 1);
	
	setCharIndicator(year/10, 4);
	setCharIndicator(year%10, 5);
     9fa:	3a cc       	rjmp	.-1932   	; 0x270 <setCharIndicator>

000009fc <main>:
}

int main(void)
{
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	00 d0       	rcall	.+0      	; 0xa02 <main+0x6>
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
	
	//Инициализация перефирии
	I2C_Init();
     a06:	b0 d4       	rcall	.+2400   	; 0x1368 <I2C_Init>
	PWM_init();
     a08:	33 dd       	rcall	.-1434   	; 0x470 <PWM_init>
	BUT_Init();
     a0a:	e0 db       	rcall	.-2112   	; 0x1cc <BUT_Init>
	BUTTON_SPROB_LED_DDR |= (1 << BUTTON_SPROB_LED_PIN);
     a0c:	be 9a       	sbi	0x17, 6	; 23
	
	SPI_init();
     a0e:	25 dd       	rcall	.-1462   	; 0x45a <SPI_init>
	timer1_led_init();
     a10:	21 dc       	rcall	.-1982   	; 0x254 <timer1_led_init>
	
	//на случай если зависнет мк, то при подаче питания свет будет включен
	PORT_R |= (1<<R);
     a12:	95 9a       	sbi	0x12, 5	; 18
	PORT_G |= (1<<G);
     a14:	96 9a       	sbi	0x12, 6	; 18
	PORT_B |= (1<<B);
     a16:	97 9a       	sbi	0x12, 7	; 18
	PORT_W |= (1<<W);
     a18:	c0 9a       	sbi	0x18, 0	; 24
	
    sei(); 
     a1a:	78 94       	sei
	
	//1Hz generator
	DDRC &= ~(1 << PC3);
     a1c:	a3 98       	cbi	0x14, 3	; 20
	I2C_StartCondition();
     a1e:	a7 d4       	rcall	.+2382   	; 0x136e <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     a20:	80 ed       	ldi	r24, 0xD0	; 208
     a22:	ae d4       	rcall	.+2396   	; 0x1380 <I2C_SendByte>
	I2C_SendByte(7);//Переходим на 0x07
     a24:	87 e0       	ldi	r24, 0x07	; 7
     a26:	ac d4       	rcall	.+2392   	; 0x1380 <I2C_SendByte>
	I2C_SendByte(0b00010000); //включим SQWE
     a28:	80 e1       	ldi	r24, 0x10	; 16
     a2a:	aa d4       	rcall	.+2388   	; 0x1380 <I2C_SendByte>
	I2C_StopCondition();
     a2c:	a6 d4       	rcall	.+2380   	; 0x137a <I2C_StopCondition>
	

    OCR2 = 255;
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	83 bd       	out	0x23, r24	; 35

    TCCR2 |= (1 << WGM21);
     a32:	85 b5       	in	r24, 0x25	; 37
     a34:	88 60       	ori	r24, 0x08	; 8
     a36:	85 bd       	out	0x25, r24	; 37
    // Set to CTC Mode

    TIMSK |= (1 << OCIE2);
     a38:	89 b7       	in	r24, 0x39	; 57
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	89 bf       	out	0x39, r24	; 57
    //Set interrupt on compare match

    TCCR2 |= ((1 << CS21) | (1 << CS20) | (1 << CS20));
     a3e:	85 b5       	in	r24, 0x25	; 37
     a40:	83 60       	ori	r24, 0x03	; 3
     a42:	85 bd       	out	0x25, r24	; 37
    // set prescaler to 64 and starts PWM
	
	
	//Восстанавливаем значения из EEPOM
	led_menu_dawn_hours = eeprom_read_word(&ee_led_menu_dawn_hours);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	3e d5       	rcall	.+2684   	; 0x14c6 <__eerd_word_m8a>
     a4a:	90 93 bf 00 	sts	0x00BF, r25
     a4e:	80 93 be 00 	sts	0x00BE, r24
	led_menu_dawn_mins = eeprom_read_word(&ee_led_menu_dawn_mins);
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	37 d5       	rcall	.+2670   	; 0x14c6 <__eerd_word_m8a>
     a58:	90 93 bd 00 	sts	0x00BD, r25
     a5c:	80 93 bc 00 	sts	0x00BC, r24
	led_menu_dawn_interval_mins = eeprom_read_word(&ee_led_menu_dawn_interval_mins);
     a60:	86 e0       	ldi	r24, 0x06	; 6
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	30 d5       	rcall	.+2656   	; 0x14c6 <__eerd_word_m8a>
     a66:	90 93 bb 00 	sts	0x00BB, r25
     a6a:	80 93 ba 00 	sts	0x00BA, r24
	led_menu_sunset_hours = eeprom_read_word(&ee_led_menu_sunset_hours);
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	29 d5       	rcall	.+2642   	; 0x14c6 <__eerd_word_m8a>
     a74:	90 93 b9 00 	sts	0x00B9, r25
     a78:	80 93 b8 00 	sts	0x00B8, r24
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	22 d5       	rcall	.+2628   	; 0x14c6 <__eerd_word_m8a>
     a82:	90 93 b7 00 	sts	0x00B7, r25
     a86:	80 93 b6 00 	sts	0x00B6, r24
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	1b d5       	rcall	.+2614   	; 0x14c6 <__eerd_word_m8a>
     a90:	90 93 b5 00 	sts	0x00B5, r25
     a94:	80 93 b4 00 	sts	0x00B4, r24
								excess_mins_sunset = temp_hours_sunset*60 - temp_mins_sunset;
							}
							if(excess_mins_sunset < led_menu_sunset_interval_mins){
								PWM_set(RGBW, map(excess_mins_sunset, 1, led_menu_sunset_interval_mins, 255, 0));
								now_mode_light = LIGHT_SUNSET;
								}else{ PWM_set(RGBW, 0x00); now_mode_light = LIGHT_OFF;}
     a98:	44 e0       	ldi	r20, 0x04	; 4
     a9a:	84 2e       	mov	r8, r20
     a9c:	91 2c       	mov	r9, r1
								temp_mins_sunset = led_menu_sunset_mins-min;
								excess_mins_sunset = temp_hours_sunset*60 - temp_mins_sunset;
							}
							if(excess_mins_sunset < led_menu_sunset_interval_mins){
								PWM_set(RGBW, map(excess_mins_sunset, 1, led_menu_sunset_interval_mins, 255, 0));
								now_mode_light = LIGHT_SUNSET;
     a9e:	52 e0       	ldi	r21, 0x02	; 2
     aa0:	a5 2e       	mov	r10, r21
     aa2:	b1 2c       	mov	r11, r1
								}else{ PWM_set(RGBW, 0x00); now_mode_light = LIGHT_OFF;}
								}else{ PWM_set(RGBW, 0xFF); now_mode_light = LIGHT_FULL;}
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	c6 2e       	mov	r12, r22
     aa8:	d1 2c       	mov	r13, r1
						excess_mins_dawm = temp_hours_dawm*60 - temp_mins_dawm;
					}
			
					if(excess_mins_dawm < led_menu_dawn_interval_mins){
						PWM_set(RGBW, map(excess_mins_dawm, 1, led_menu_dawn_interval_mins, 0, 255));
						now_mode_light = LIGHT_DAWM;
     aaa:	ee 24       	eor	r14, r14
     aac:	e3 94       	inc	r14
     aae:	f1 2c       	mov	r15, r1
					now_mode = MODE_EDIT_YEAR;
				   }else if(now_mode == MODE_EDIT_YEAR){
					ClearALLCharIndicator();
					ClearALLDotsIndicator();
					//День
					now_mode = MODE_EDIT_WEEK_DAY;
     ab0:	e6 e0       	ldi	r30, 0x06	; 6
     ab2:	2e 2e       	mov	r2, r30
							ClearALLCharIndicator();
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_HOURS){
							eeprom_write_word(&ee_led_menu_dawn_hours , led_menu_dawn_hours);
							//Минуты начала рассвета
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_MINS;
     ab4:	f8 e0       	ldi	r31, 0x08	; 8
     ab6:	4f 2e       	mov	r4, r31
     ab8:	51 2c       	mov	r5, r1
				  if(now_mode == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode_led_menu == MODE_NONE) || (now_mode_led_menu != MODE_NONE && button_code == BUT_RELEASED_EN))){
						  led_strob();
						  if(now_mode_led_menu == MODE_NONE){
							//Часы начала рассвета
							ClearALLCharIndicator();
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
     aba:	a7 e0       	ldi	r26, 0x07	; 7
     abc:	6a 2e       	mov	r6, r26
     abe:	71 2c       	mov	r7, r1
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     ac0:	04 e6       	ldi	r16, 0x64	; 100
     ac2:	10 e0       	ldi	r17, 0x00	; 0
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
		
	while(1)
	{   	  //Принудительное включение 
				if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     ac4:	80 91 b0 00 	lds	r24, 0x00B0
     ac8:	90 91 b1 00 	lds	r25, 0x00B1
     acc:	89 2b       	or	r24, r25
     ace:	09 f0       	breq	.+2      	; 0xad2 <main+0xd6>
     ad0:	65 c1       	rjmp	.+714    	; 0xd9c <main+0x3a0>
     ad2:	80 91 b3 00 	lds	r24, 0x00B3
     ad6:	81 11       	cpse	r24, r1
     ad8:	61 c1       	rjmp	.+706    	; 0xd9c <main+0x3a0>
				if((PINB & (1 << PB7))){	
     ada:	b7 9b       	sbis	0x16, 7	; 22
     adc:	14 c1       	rjmp	.+552    	; 0xd06 <main+0x30a>
				//Супер дупер крутой рассвет и закат
				if((hour >= led_menu_dawn_hours && min > led_menu_dawn_mins) || (hour > led_menu_dawn_hours && min < led_menu_dawn_mins)){
     ade:	20 91 cc 00 	lds	r18, 0x00CC
     ae2:	2a 83       	std	Y+2, r18	; 0x02
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	60 91 be 00 	lds	r22, 0x00BE
     aea:	70 91 bf 00 	lds	r23, 0x00BF
     aee:	26 17       	cp	r18, r22
     af0:	37 07       	cpc	r19, r23
     af2:	50 f0       	brcs	.+20     	; 0xb08 <main+0x10c>
     af4:	40 91 cd 00 	lds	r20, 0x00CD
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	80 91 bc 00 	lds	r24, 0x00BC
     afe:	90 91 bd 00 	lds	r25, 0x00BD
     b02:	84 17       	cp	r24, r20
     b04:	95 07       	cpc	r25, r21
     b06:	78 f0       	brcs	.+30     	; 0xb26 <main+0x12a>
     b08:	62 17       	cp	r22, r18
     b0a:	73 07       	cpc	r23, r19
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <main+0x114>
     b0e:	dd c0       	rjmp	.+442    	; 0xcca <main+0x2ce>
     b10:	40 91 cd 00 	lds	r20, 0x00CD
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	80 91 bc 00 	lds	r24, 0x00BC
     b1a:	90 91 bd 00 	lds	r25, 0x00BD
     b1e:	48 17       	cp	r20, r24
     b20:	59 07       	cpc	r21, r25
     b22:	08 f0       	brcs	.+2      	; 0xb26 <main+0x12a>
     b24:	d2 c0       	rjmp	.+420    	; 0xcca <main+0x2ce>
					if(hour >= led_menu_dawn_hours && min > led_menu_dawn_mins){
     b26:	a0 91 cd 00 	lds	r26, 0x00CD
     b2a:	4a 2f       	mov	r20, r26
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	80 91 bc 00 	lds	r24, 0x00BC
     b32:	90 91 bd 00 	lds	r25, 0x00BD
     b36:	84 17       	cp	r24, r20
     b38:	95 07       	cpc	r25, r21
     b3a:	90 f4       	brcc	.+36     	; 0xb60 <main+0x164>
				
						temp_hours_dawm = hour-led_menu_dawn_hours;
     b3c:	3a 80       	ldd	r3, Y+2	; 0x02
     b3e:	36 1a       	sub	r3, r22
     b40:	30 92 c6 00 	sts	0x00C6, r3
						temp_mins_dawm = min-led_menu_dawn_mins;
     b44:	ea 2f       	mov	r30, r26
     b46:	e8 1b       	sub	r30, r24
     b48:	e0 93 c7 00 	sts	0x00C7, r30
						excess_mins_dawm = temp_hours_dawm*60 + temp_mins_dawm;
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	bc e3       	ldi	r27, 0x3C	; 60
     b50:	3b 9e       	mul	r3, r27
     b52:	e0 0d       	add	r30, r0
     b54:	f1 1d       	adc	r31, r1
     b56:	11 24       	eor	r1, r1
     b58:	f0 93 c3 00 	sts	0x00C3, r31
     b5c:	e0 93 c2 00 	sts	0x00C2, r30
					}
					if(hour > led_menu_dawn_hours && min < led_menu_dawn_mins){
     b60:	62 17       	cp	r22, r18
     b62:	73 07       	cpc	r23, r19
     b64:	c0 f4       	brcc	.+48     	; 0xb96 <main+0x19a>
     b66:	6a 2f       	mov	r22, r26
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	68 17       	cp	r22, r24
     b6c:	79 07       	cpc	r23, r25
     b6e:	98 f4       	brcc	.+38     	; 0xb96 <main+0x19a>
						temp_hours_dawm = hour-led_menu_dawn_hours;
     b70:	90 91 be 00 	lds	r25, 0x00BE
     b74:	6a 81       	ldd	r22, Y+2	; 0x02
     b76:	69 1b       	sub	r22, r25
     b78:	60 93 c6 00 	sts	0x00C6, r22
						temp_mins_dawm = led_menu_dawn_mins-min;
     b7c:	8a 1b       	sub	r24, r26
     b7e:	80 93 c7 00 	sts	0x00C7, r24
						excess_mins_dawm = temp_hours_dawm*60 - temp_mins_dawm;
     b82:	ec e3       	ldi	r30, 0x3C	; 60
     b84:	6e 9f       	mul	r22, r30
     b86:	b0 01       	movw	r22, r0
     b88:	11 24       	eor	r1, r1
     b8a:	68 1b       	sub	r22, r24
     b8c:	71 09       	sbc	r23, r1
     b8e:	70 93 c3 00 	sts	0x00C3, r23
     b92:	60 93 c2 00 	sts	0x00C2, r22
					}
			
					if(excess_mins_dawm < led_menu_dawn_interval_mins){
     b96:	80 91 c2 00 	lds	r24, 0x00C2
     b9a:	90 91 c3 00 	lds	r25, 0x00C3
     b9e:	e0 91 ba 00 	lds	r30, 0x00BA
     ba2:	f0 91 bb 00 	lds	r31, 0x00BB
     ba6:	8e 17       	cp	r24, r30
     ba8:	9f 07       	cpc	r25, r31
     baa:	c8 f4       	brcc	.+50     	; 0xbde <main+0x1e2>
						PWM_set(RGBW, map(excess_mins_dawm, 1, led_menu_dawn_interval_mins, 0, 255));
     bac:	9c 01       	movw	r18, r24
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	31 09       	sbc	r19, r1
     bb6:	41 09       	sbc	r20, r1
     bb8:	51 09       	sbc	r21, r1
     bba:	af ef       	ldi	r26, 0xFF	; 255
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	45 d4       	rcall	.+2186   	; 0x144a <__muluhisi3>
						temp_mins_dawm = led_menu_dawn_mins-min;
						excess_mins_dawm = temp_hours_dawm*60 - temp_mins_dawm;
					}
			
					if(excess_mins_dawm < led_menu_dawn_interval_mins){
						PWM_set(RGBW, map(excess_mins_dawm, 1, led_menu_dawn_interval_mins, 0, 255));
     bc0:	9f 01       	movw	r18, r30
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	31 09       	sbc	r19, r1
     bca:	41 09       	sbc	r20, r1
     bcc:	51 09       	sbc	r21, r1
     bce:	21 d4       	rcall	.+2114   	; 0x1412 <__divmodsi4>
     bd0:	82 2f       	mov	r24, r18
     bd2:	c8 db       	rcall	.-2160   	; 0x364 <PWM_set.part.0>
						excess_mins_dawm = temp_hours_dawm*60 - temp_mins_dawm;
					}
			
					if(excess_mins_dawm < led_menu_dawn_interval_mins){
						PWM_set(RGBW, map(excess_mins_dawm, 1, led_menu_dawn_interval_mins, 0, 255));
						now_mode_light = LIGHT_DAWM;
     bd4:	f0 92 ad 00 	sts	0x00AD, r15
     bd8:	e0 92 ac 00 	sts	0x00AC, r14
     bdc:	7c c0       	rjmp	.+248    	; 0xcd6 <main+0x2da>
						}else{
						if((hour >= led_menu_sunset_hours && min > led_menu_sunset_mins) || (hour > led_menu_sunset_hours && min < led_menu_sunset_mins)){
     bde:	80 91 b8 00 	lds	r24, 0x00B8
     be2:	90 91 b9 00 	lds	r25, 0x00B9
     be6:	28 17       	cp	r18, r24
     be8:	39 07       	cpc	r19, r25
     bea:	38 f0       	brcs	.+14     	; 0xbfa <main+0x1fe>
     bec:	60 91 b6 00 	lds	r22, 0x00B6
     bf0:	70 91 b7 00 	lds	r23, 0x00B7
     bf4:	64 17       	cp	r22, r20
     bf6:	75 07       	cpc	r23, r21
     bf8:	60 f0       	brcs	.+24     	; 0xc12 <main+0x216>
     bfa:	82 17       	cp	r24, r18
     bfc:	93 07       	cpc	r25, r19
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <main+0x206>
     c00:	5d c0       	rjmp	.+186    	; 0xcbc <main+0x2c0>
     c02:	60 91 b6 00 	lds	r22, 0x00B6
     c06:	70 91 b7 00 	lds	r23, 0x00B7
     c0a:	46 17       	cp	r20, r22
     c0c:	57 07       	cpc	r21, r23
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <main+0x216>
     c10:	55 c0       	rjmp	.+170    	; 0xcbc <main+0x2c0>
							if(hour >= led_menu_sunset_hours && min > led_menu_sunset_mins){
     c12:	60 91 b6 00 	lds	r22, 0x00B6
     c16:	70 91 b7 00 	lds	r23, 0x00B7
     c1a:	64 17       	cp	r22, r20
     c1c:	75 07       	cpc	r23, r21
     c1e:	90 f4       	brcc	.+36     	; 0xc44 <main+0x248>
						
								temp_hours_sunset = hour-led_menu_sunset_hours;
     c20:	3a 80       	ldd	r3, Y+2	; 0x02
     c22:	38 1a       	sub	r3, r24
     c24:	30 92 c4 00 	sts	0x00C4, r3
								temp_mins_sunset = min-led_menu_sunset_mins;
     c28:	ea 2f       	mov	r30, r26
     c2a:	e6 1b       	sub	r30, r22
     c2c:	e0 93 c5 00 	sts	0x00C5, r30
								excess_mins_sunset = temp_hours_sunset*60 + temp_mins_sunset;
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	bc e3       	ldi	r27, 0x3C	; 60
     c34:	3b 9e       	mul	r3, r27
     c36:	e0 0d       	add	r30, r0
     c38:	f1 1d       	adc	r31, r1
     c3a:	11 24       	eor	r1, r1
     c3c:	f0 93 c1 00 	sts	0x00C1, r31
     c40:	e0 93 c0 00 	sts	0x00C0, r30
							}
							if(hour > led_menu_sunset_hours && min < led_menu_sunset_mins){
     c44:	82 17       	cp	r24, r18
     c46:	93 07       	cpc	r25, r19
     c48:	a0 f4       	brcc	.+40     	; 0xc72 <main+0x276>
     c4a:	46 17       	cp	r20, r22
     c4c:	57 07       	cpc	r21, r23
     c4e:	88 f4       	brcc	.+34     	; 0xc72 <main+0x276>
								temp_hours_sunset = hour-led_menu_sunset_hours;
     c50:	ba 81       	ldd	r27, Y+2	; 0x02
     c52:	b8 1b       	sub	r27, r24
     c54:	b0 93 c4 00 	sts	0x00C4, r27
								temp_mins_sunset = led_menu_sunset_mins-min;
     c58:	6a 1b       	sub	r22, r26
     c5a:	60 93 c5 00 	sts	0x00C5, r22
								excess_mins_sunset = temp_hours_sunset*60 - temp_mins_sunset;
     c5e:	ec e3       	ldi	r30, 0x3C	; 60
     c60:	be 9f       	mul	r27, r30
     c62:	c0 01       	movw	r24, r0
     c64:	11 24       	eor	r1, r1
     c66:	86 1b       	sub	r24, r22
     c68:	91 09       	sbc	r25, r1
     c6a:	90 93 c1 00 	sts	0x00C1, r25
     c6e:	80 93 c0 00 	sts	0x00C0, r24
							}
							if(excess_mins_sunset < led_menu_sunset_interval_mins){
     c72:	80 91 c0 00 	lds	r24, 0x00C0
     c76:	90 91 c1 00 	lds	r25, 0x00C1
     c7a:	e0 91 b4 00 	lds	r30, 0x00B4
     c7e:	f0 91 b5 00 	lds	r31, 0x00B5
     c82:	8e 17       	cp	r24, r30
     c84:	9f 07       	cpc	r25, r31
     c86:	08 f5       	brcc	.+66     	; 0xcca <main+0x2ce>
								PWM_set(RGBW, map(excess_mins_sunset, 1, led_menu_sunset_interval_mins, 255, 0));
     c88:	9c 01       	movw	r18, r24
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     c8e:	21 50       	subi	r18, 0x01	; 1
     c90:	31 09       	sbc	r19, r1
     c92:	41 09       	sbc	r20, r1
     c94:	51 09       	sbc	r21, r1
     c96:	a1 e0       	ldi	r26, 0x01	; 1
     c98:	bf ef       	ldi	r27, 0xFF	; 255
     c9a:	e3 d3       	rcall	.+1990   	; 0x1462 <__mulohisi3>
								temp_hours_sunset = hour-led_menu_sunset_hours;
								temp_mins_sunset = led_menu_sunset_mins-min;
								excess_mins_sunset = temp_hours_sunset*60 - temp_mins_sunset;
							}
							if(excess_mins_sunset < led_menu_sunset_interval_mins){
								PWM_set(RGBW, map(excess_mins_sunset, 1, led_menu_sunset_interval_mins, 255, 0));
     c9c:	9f 01       	movw	r18, r30
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     ca2:	21 50       	subi	r18, 0x01	; 1
     ca4:	31 09       	sbc	r19, r1
     ca6:	41 09       	sbc	r20, r1
     ca8:	51 09       	sbc	r21, r1
     caa:	b3 d3       	rcall	.+1894   	; 0x1412 <__divmodsi4>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	82 0f       	add	r24, r18
     cb0:	59 db       	rcall	.-2382   	; 0x364 <PWM_set.part.0>
								temp_mins_sunset = led_menu_sunset_mins-min;
								excess_mins_sunset = temp_hours_sunset*60 - temp_mins_sunset;
							}
							if(excess_mins_sunset < led_menu_sunset_interval_mins){
								PWM_set(RGBW, map(excess_mins_sunset, 1, led_menu_sunset_interval_mins, 255, 0));
								now_mode_light = LIGHT_SUNSET;
     cb2:	b0 92 ad 00 	sts	0x00AD, r11
     cb6:	a0 92 ac 00 	sts	0x00AC, r10
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <main+0x2da>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	52 db       	rcall	.-2396   	; 0x364 <PWM_set.part.0>
								}else{ PWM_set(RGBW, 0x00); now_mode_light = LIGHT_OFF;}
								}else{ PWM_set(RGBW, 0xFF); now_mode_light = LIGHT_FULL;}
     cc0:	d0 92 ad 00 	sts	0x00AD, r13
     cc4:	c0 92 ac 00 	sts	0x00AC, r12
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <main+0x2da>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	4b db       	rcall	.-2410   	; 0x364 <PWM_set.part.0>
							}
							}else{  
								PWM_set(RGBW, 0x00); now_mode_light = LIGHT_OFF;
     cce:	90 92 ad 00 	sts	0x00AD, r9
     cd2:	80 92 ac 00 	sts	0x00AC, r8
							}			
					
							if(prev_now_mode_light != now_mode_light ){
     cd6:	20 91 aa 00 	lds	r18, 0x00AA
     cda:	30 91 ab 00 	lds	r19, 0x00AB
     cde:	80 91 ac 00 	lds	r24, 0x00AC
     ce2:	90 91 ad 00 	lds	r25, 0x00AD
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	09 f0       	breq	.+2      	; 0xcee <main+0x2f2>
								ClearALLCharIndicator();
     cec:	da da       	rcall	.-2636   	; 0x2a2 <ClearALLCharIndicator>
							}
					
							prev_now_mode_light = now_mode_light;
     cee:	80 91 ac 00 	lds	r24, 0x00AC
     cf2:	90 91 ad 00 	lds	r25, 0x00AD
     cf6:	90 93 ab 00 	sts	0x00AB, r25
     cfa:	80 93 aa 00 	sts	0x00AA, r24
							TIMSK |= (1 << TOIE0);
     cfe:	89 b7       	in	r24, 0x39	; 57
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	89 bf       	out	0x39, r24	; 57
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <main+0x318>
					}else{
						//Подаем + на драйвера если тумблер включен
						TIMSK &=~ (1 << TOIE0);
     d06:	89 b7       	in	r24, 0x39	; 57
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	89 bf       	out	0x39, r24	; 57
						PORT_R |= (1<<R);
     d0c:	95 9a       	sbi	0x12, 5	; 18
						PORT_G |= (1<<G);
     d0e:	96 9a       	sbi	0x12, 6	; 18
						PORT_B |= (1<<B);
     d10:	97 9a       	sbi	0x12, 7	; 18
						PORT_W |= (1<<W);
     d12:	c0 9a       	sbi	0x18, 0	; 24
					}
					
					//Читаем время
						
					I2C_SendByteByADDR(0,0b11010000);	//Установка адреса в 0
     d14:	60 ed       	ldi	r22, 0xD0	; 208
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	3a d3       	rcall	.+1652   	; 0x138e <I2C_SendByteByADDR>
					I2C_StartCondition(); //Отправим условие START
     d1a:	29 d3       	rcall	.+1618   	; 0x136e <I2C_StartCondition>
					I2C_SendByte(0b11010001); //Бит на чтение
     d1c:	81 ed       	ldi	r24, 0xD1	; 209
     d1e:	30 d3       	rcall	.+1632   	; 0x1380 <I2C_SendByte>
					sec_ = I2C_ReadByte();
     d20:	4a d3       	rcall	.+1684   	; 0x13b6 <I2C_ReadByte>
     d22:	80 93 d7 00 	sts	0x00D7, r24
					min_ = I2C_ReadByte();
     d26:	47 d3       	rcall	.+1678   	; 0x13b6 <I2C_ReadByte>
     d28:	80 93 d1 00 	sts	0x00D1, r24
					hour_ = I2C_ReadByte();
     d2c:	44 d3       	rcall	.+1672   	; 0x13b6 <I2C_ReadByte>
     d2e:	80 93 d5 00 	sts	0x00D5, r24
					day_ = I2C_ReadByte();
     d32:	41 d3       	rcall	.+1666   	; 0x13b6 <I2C_ReadByte>
     d34:	80 93 d3 00 	sts	0x00D3, r24
					date_ = I2C_ReadByte();
     d38:	3e d3       	rcall	.+1660   	; 0x13b6 <I2C_ReadByte>
     d3a:	80 93 cf 00 	sts	0x00CF, r24
					month_ = I2C_ReadByte();
     d3e:	3b d3       	rcall	.+1654   	; 0x13b6 <I2C_ReadByte>
     d40:	80 93 d8 00 	sts	0x00D8, r24
					year_ = I2C_ReadLastByte();
     d44:	3f d3       	rcall	.+1662   	; 0x13c4 <I2C_ReadLastByte>
     d46:	80 93 d0 00 	sts	0x00D0, r24
					I2C_StopCondition(); //Отправим условие STOP
     d4a:	17 d3       	rcall	.+1582   	; 0x137a <I2C_StopCondition>
					sec = RTC_ConvertFromDec(sec_); //Преобразуем в десятичный формат
     d4c:	80 91 d7 00 	lds	r24, 0x00D7
     d50:	f9 d2       	rcall	.+1522   	; 0x1344 <RTC_ConvertFromDec>
     d52:	80 93 ce 00 	sts	0x00CE, r24
					min = RTC_ConvertFromDec(min_); //Преобразуем в десятичный формат
     d56:	80 91 d1 00 	lds	r24, 0x00D1
     d5a:	f4 d2       	rcall	.+1512   	; 0x1344 <RTC_ConvertFromDec>
     d5c:	80 93 cd 00 	sts	0x00CD, r24
					hour = RTC_ConvertFromDec(hour_); //Преобразуем в десятичный формат
     d60:	80 91 d5 00 	lds	r24, 0x00D5
     d64:	ef d2       	rcall	.+1502   	; 0x1344 <RTC_ConvertFromDec>
     d66:	80 93 cc 00 	sts	0x00CC, r24
					day = RTC_ConvertFromDec(day_); //Преобразуем в десятичный формат
     d6a:	80 91 d3 00 	lds	r24, 0x00D3
     d6e:	ea d2       	rcall	.+1492   	; 0x1344 <RTC_ConvertFromDec>
     d70:	80 93 cb 00 	sts	0x00CB, r24
					year = RTC_ConvertFromDec(year_); //Преобразуем в десятичный формат
     d74:	80 91 d0 00 	lds	r24, 0x00D0
     d78:	e5 d2       	rcall	.+1482   	; 0x1344 <RTC_ConvertFromDec>
     d7a:	80 93 c8 00 	sts	0x00C8, r24
					month = RTC_ConvertFromDec(month_); //Преобразуем в десятичный формат
     d7e:	80 91 d8 00 	lds	r24, 0x00D8
     d82:	e0 d2       	rcall	.+1472   	; 0x1344 <RTC_ConvertFromDec>
     d84:	80 93 c9 00 	sts	0x00C9, r24
					date = RTC_ConvertFromDec(date_); //Преобразуем в десятичный формат
     d88:	80 91 cf 00 	lds	r24, 0x00CF
     d8c:	db d2       	rcall	.+1462   	; 0x1344 <RTC_ConvertFromDec>
     d8e:	80 93 ca 00 	sts	0x00CA, r24
					if((PINB & (1 << PB7))){
     d92:	b7 9b       	sbis	0x16, 7	; 22
     d94:	0a c0       	rjmp	.+20     	; 0xdaa <main+0x3ae>
					  TIMSK |= (1 << TOIE0);
     d96:	89 b7       	in	r24, 0x39	; 57
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <main+0x3ac>
					}
		}else{
		    PORT_R &= ~(1<<R);
     d9c:	95 98       	cbi	0x12, 5	; 18
			PORT_G &= ~(1<<G);
     d9e:	96 98       	cbi	0x12, 6	; 18
			PORT_B &= ~(1<<B);
     da0:	97 98       	cbi	0x12, 7	; 18
			PORT_W &= ~(1<<W);
     da2:	c0 98       	cbi	0x18, 0	; 24
			TIMSK &=~ (1 << TOIE0);
     da4:	89 b7       	in	r24, 0x39	; 57
     da6:	8e 7f       	andi	r24, 0xFE	; 254
     da8:	89 bf       	out	0x39, r24	; 57
		}
		
		//Модификация данных если выключены настроки и изменяется значение
	    if((now_mode != MODE_NONE) && ((increment_mode == MODE_INC) || (increment_mode == MODE_DISINC)))
     daa:	80 91 b3 00 	lds	r24, 0x00B3
     dae:	88 23       	and	r24, r24
     db0:	41 f0       	breq	.+16     	; 0xdc2 <main+0x3c6>
     db2:	80 91 b2 00 	lds	r24, 0x00B2
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <main+0x3c6>
		{
				ModifyRTC();
     dbc:	6a db       	rcall	.-2348   	; 0x492 <ModifyRTC>
				increment_mode = MODE_NONE_INC;
     dbe:	10 92 b2 00 	sts	0x00B2, r1
	    }
		
	    if((now_mode_led_menu != MODE_NONE) && ((increment_mode_led_menu == MODE_INC) || (increment_mode_led_menu == MODE_DISINC)))
     dc2:	80 91 b0 00 	lds	r24, 0x00B0
     dc6:	90 91 b1 00 	lds	r25, 0x00B1
     dca:	89 2b       	or	r24, r25
     dcc:	61 f0       	breq	.+24     	; 0xde6 <main+0x3ea>
     dce:	80 91 ae 00 	lds	r24, 0x00AE
     dd2:	90 91 af 00 	lds	r25, 0x00AF
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	02 97       	sbiw	r24, 0x02	; 2
     dda:	28 f4       	brcc	.+10     	; 0xde6 <main+0x3ea>
	    {
				    ModifyLEDMenu();
     ddc:	bd dc       	rcall	.-1670   	; 0x758 <ModifyLEDMenu>
				    increment_mode_led_menu = MODE_NONE_INC;
     dde:	10 92 af 00 	sts	0x00AF, r1
     de2:	10 92 ae 00 	sts	0x00AE, r1
	    }
				
		//Опрашиваем кнопки				
		BUT_Poll();
     de6:	1a da       	rcall	.-3020   	; 0x21c <BUT_Poll>
		button = BUT_GetBut(); 
     de8:	dc d9       	rcall	.-3144   	; 0x1a2 <BUT_GetBut>
     dea:	80 93 d4 00 	sts	0x00D4, r24
		if(button){
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <main+0x3f8>
     df2:	0d c1       	rjmp	.+538    	; 0x100e <main+0x612>
		    button_code = BUT_GetBut();  
     df4:	d6 d9       	rcall	.-3156   	; 0x1a2 <BUT_GetBut>
     df6:	80 93 d2 00 	sts	0x00D2, r24
			switch(button){
     dfa:	90 91 d4 00 	lds	r25, 0x00D4
     dfe:	92 30       	cpi	r25, 0x02	; 2
     e00:	39 f1       	breq	.+78     	; 0xe50 <main+0x454>
     e02:	18 f4       	brcc	.+6      	; 0xe0a <main+0x40e>
     e04:	91 30       	cpi	r25, 0x01	; 1
     e06:	59 f0       	breq	.+22     	; 0xe1e <main+0x422>
     e08:	02 c1       	rjmp	.+516    	; 0x100e <main+0x612>
     e0a:	20 91 b0 00 	lds	r18, 0x00B0
     e0e:	30 91 b1 00 	lds	r19, 0x00B1
     e12:	93 30       	cpi	r25, 0x03	; 3
     e14:	b1 f1       	breq	.+108    	; 0xe82 <main+0x486>
     e16:	94 30       	cpi	r25, 0x04	; 4
     e18:	09 f4       	brne	.+2      	; 0xe1c <main+0x420>
     e1a:	7d c0       	rjmp	.+250    	; 0xf16 <main+0x51a>
     e1c:	f8 c0       	rjmp	.+496    	; 0x100e <main+0x612>
				//Plus
				case 1:   
				 if(button_code == BUT_RELEASED_EN){
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f0       	breq	.+2      	; 0xe24 <main+0x428>
     e22:	f5 c0       	rjmp	.+490    	; 0x100e <main+0x612>
				  led_strob();
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	0d db       	rcall	.-2534   	; 0x442 <led_strob>
				  if(now_mode != MODE_NONE){
     e28:	90 91 b3 00 	lds	r25, 0x00B3
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	99 23       	and	r25, r25
     e30:	19 f0       	breq	.+6      	; 0xe38 <main+0x43c>
				   increment_mode = MODE_INC; 
     e32:	80 93 b2 00 	sts	0x00B2, r24
     e36:	eb c0       	rjmp	.+470    	; 0x100e <main+0x612>
				  }else if(now_mode_led_menu != MODE_NONE){
     e38:	80 91 b0 00 	lds	r24, 0x00B0
     e3c:	90 91 b1 00 	lds	r25, 0x00B1
     e40:	89 2b       	or	r24, r25
     e42:	09 f4       	brne	.+2      	; 0xe46 <main+0x44a>
     e44:	e4 c0       	rjmp	.+456    	; 0x100e <main+0x612>
				   increment_mode_led_menu = MODE_INC;
     e46:	f0 92 af 00 	sts	0x00AF, r15
     e4a:	e0 92 ae 00 	sts	0x00AE, r14
     e4e:	df c0       	rjmp	.+446    	; 0x100e <main+0x612>
				 }
				break;
			
				//Minus
				case 2: 
				 if(button_code == BUT_RELEASED_EN){
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	09 f0       	breq	.+2      	; 0xe56 <main+0x45a>
     e54:	dc c0       	rjmp	.+440    	; 0x100e <main+0x612>
				  led_strob();
     e56:	99 83       	std	Y+1, r25	; 0x01
     e58:	f4 da       	rcall	.-2584   	; 0x442 <led_strob>
				  if(now_mode != MODE_NONE){
     e5a:	80 91 b3 00 	lds	r24, 0x00B3
     e5e:	99 81       	ldd	r25, Y+1	; 0x01
     e60:	88 23       	and	r24, r24
     e62:	19 f0       	breq	.+6      	; 0xe6a <main+0x46e>
				   increment_mode = MODE_DISINC;
     e64:	90 93 b2 00 	sts	0x00B2, r25
     e68:	d2 c0       	rjmp	.+420    	; 0x100e <main+0x612>
				  }else if(now_mode_led_menu != MODE_NONE){
     e6a:	80 91 b0 00 	lds	r24, 0x00B0
     e6e:	90 91 b1 00 	lds	r25, 0x00B1
     e72:	89 2b       	or	r24, r25
     e74:	09 f4       	brne	.+2      	; 0xe78 <main+0x47c>
     e76:	cb c0       	rjmp	.+406    	; 0x100e <main+0x612>
				   increment_mode_led_menu = MODE_DISINC;
     e78:	b0 92 af 00 	sts	0x00AF, r11
     e7c:	a0 92 ae 00 	sts	0x00AE, r10
     e80:	c6 c0       	rjmp	.+396    	; 0x100e <main+0x612>
				 }
				break;
			
				//Okey
				case 3: 
				  if(now_mode_led_menu == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode == MODE_NONE) || (now_mode != MODE_NONE && button_code == BUT_RELEASED_EN))){ 
     e82:	23 2b       	or	r18, r19
     e84:	09 f0       	breq	.+2      	; 0xe88 <main+0x48c>
     e86:	c3 c0       	rjmp	.+390    	; 0x100e <main+0x612>
     e88:	90 91 b3 00 	lds	r25, 0x00B3
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	11 f4       	brne	.+4      	; 0xe94 <main+0x498>
     e90:	99 23       	and	r25, r25
     e92:	31 f0       	breq	.+12     	; 0xea0 <main+0x4a4>
     e94:	99 23       	and	r25, r25
     e96:	09 f4       	brne	.+2      	; 0xe9a <main+0x49e>
     e98:	ba c0       	rjmp	.+372    	; 0x100e <main+0x612>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <main+0x4a4>
     e9e:	b7 c0       	rjmp	.+366    	; 0x100e <main+0x612>
				   led_strob();
     ea0:	d0 da       	rcall	.-2656   	; 0x442 <led_strob>
				   if(now_mode == MODE_NONE){
     ea2:	80 91 b3 00 	lds	r24, 0x00B3
     ea6:	81 11       	cpse	r24, r1
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <main+0x4ba>
					//Редактируем часы
					now_mode = MODE_EDIT_HOURS;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 b3 00 	sts	0x00B3, r24
                    ClearALLCharIndicator();
     eb0:	f8 d9       	rcall	.-3088   	; 0x2a2 <ClearALLCharIndicator>
                    ClearALLDotsIndicator();
     eb2:	ea d9       	rcall	.-3116   	; 0x288 <ClearALLDotsIndicator>
     eb4:	ac c0       	rjmp	.+344    	; 0x100e <main+0x612>
				   }else if(now_mode == MODE_EDIT_HOURS){
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	11 f4       	brne	.+4      	; 0xebe <main+0x4c2>
					//Минуты
					now_mode = MODE_EDIT_MINUTES; 
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <main+0x4d6>
				   }else if(now_mode == MODE_EDIT_MINUTES){
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	29 f4       	brne	.+10     	; 0xecc <main+0x4d0>
					//Число
					now_mode = MODE_EDIT_DAY;
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	80 93 b3 00 	sts	0x00B3, r24
					ClearALLCharIndicator();
     ec8:	ec d9       	rcall	.-3112   	; 0x2a2 <ClearALLCharIndicator>
     eca:	a1 c0       	rjmp	.+322    	; 0x100e <main+0x612>
				   }else if(now_mode == MODE_EDIT_DAY){
     ecc:	83 30       	cpi	r24, 0x03	; 3
     ece:	21 f4       	brne	.+8      	; 0xed8 <main+0x4dc>
					//Месяц
					now_mode = MODE_EDIT_MOUTH;
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	80 93 b3 00 	sts	0x00B3, r24
     ed6:	9b c0       	rjmp	.+310    	; 0x100e <main+0x612>
				   }else if(now_mode == MODE_EDIT_MOUTH){
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	21 f4       	brne	.+8      	; 0xee4 <main+0x4e8>
					//Год
					now_mode = MODE_EDIT_YEAR;
     edc:	f5 e0       	ldi	r31, 0x05	; 5
     ede:	f0 93 b3 00 	sts	0x00B3, r31
     ee2:	95 c0       	rjmp	.+298    	; 0x100e <main+0x612>
				   }else if(now_mode == MODE_EDIT_YEAR){
     ee4:	85 30       	cpi	r24, 0x05	; 5
     ee6:	29 f4       	brne	.+10     	; 0xef2 <main+0x4f6>
					ClearALLCharIndicator();
     ee8:	dc d9       	rcall	.-3144   	; 0x2a2 <ClearALLCharIndicator>
					ClearALLDotsIndicator();
     eea:	ce d9       	rcall	.-3172   	; 0x288 <ClearALLDotsIndicator>
					//День
					now_mode = MODE_EDIT_WEEK_DAY;
     eec:	20 92 b3 00 	sts	0x00B3, r2
     ef0:	8e c0       	rjmp	.+284    	; 0x100e <main+0x612>
				   }else if(now_mode == MODE_EDIT_WEEK_DAY){
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	09 f0       	breq	.+2      	; 0xef8 <main+0x4fc>
     ef6:	8b c0       	rjmp	.+278    	; 0x100e <main+0x612>
					I2C_StartCondition();
     ef8:	3a d2       	rcall	.+1140   	; 0x136e <I2C_StartCondition>
					I2C_SendByte(0b11010000);
     efa:	80 ed       	ldi	r24, 0xD0	; 208
     efc:	41 d2       	rcall	.+1154   	; 0x1380 <I2C_SendByte>
					I2C_SendByte(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	3f d2       	rcall	.+1150   	; 0x1380 <I2C_SendByte>
					I2C_SendByte(RTC_ConvertFromBinDec(1));
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	28 d2       	rcall	.+1104   	; 0x1356 <RTC_ConvertFromBinDec>
     f06:	3c d2       	rcall	.+1144   	; 0x1380 <I2C_SendByte>
					I2C_StopCondition();
     f08:	38 d2       	rcall	.+1136   	; 0x137a <I2C_StopCondition>
					ClearALLCharIndicator();
     f0a:	cb d9       	rcall	.-3178   	; 0x2a2 <ClearALLCharIndicator>
					now_mode = MODE_NONE;
     f0c:	10 92 b3 00 	sts	0x00B3, r1
					increment_mode = MODE_NONE_INC;
     f10:	10 92 b2 00 	sts	0x00B2, r1
     f14:	7c c0       	rjmp	.+248    	; 0x100e <main+0x612>
				   }
				  }
				break;
			
				case 4: 
				  if(now_mode == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode_led_menu == MODE_NONE) || (now_mode_led_menu != MODE_NONE && button_code == BUT_RELEASED_EN))){
     f16:	90 91 b3 00 	lds	r25, 0x00B3
     f1a:	91 11       	cpse	r25, r1
     f1c:	78 c0       	rjmp	.+240    	; 0x100e <main+0x612>
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	19 f4       	brne	.+6      	; 0xf28 <main+0x52c>
     f22:	21 15       	cp	r18, r1
     f24:	31 05       	cpc	r19, r1
     f26:	31 f0       	breq	.+12     	; 0xf34 <main+0x538>
     f28:	23 2b       	or	r18, r19
     f2a:	09 f4       	brne	.+2      	; 0xf2e <main+0x532>
     f2c:	70 c0       	rjmp	.+224    	; 0x100e <main+0x612>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <main+0x538>
     f32:	6d c0       	rjmp	.+218    	; 0x100e <main+0x612>
						  led_strob();
     f34:	86 da       	rcall	.-2804   	; 0x442 <led_strob>
						  if(now_mode_led_menu == MODE_NONE){
     f36:	80 91 b0 00 	lds	r24, 0x00B0
     f3a:	90 91 b1 00 	lds	r25, 0x00B1
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	31 f4       	brne	.+12     	; 0xf4e <main+0x552>
							//Часы начала рассвета
							ClearALLCharIndicator();
     f42:	af d9       	rcall	.-3234   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
     f44:	70 92 b1 00 	sts	0x00B1, r7
     f48:	60 92 b0 00 	sts	0x00B0, r6
     f4c:	60 c0       	rjmp	.+192    	; 0x100e <main+0x612>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_HOURS){
     f4e:	87 30       	cpi	r24, 0x07	; 7
     f50:	91 05       	cpc	r25, r1
     f52:	61 f4       	brne	.+24     	; 0xf6c <main+0x570>
							eeprom_write_word(&ee_led_menu_dawn_hours , led_menu_dawn_hours);
     f54:	60 91 be 00 	lds	r22, 0x00BE
     f58:	70 91 bf 00 	lds	r23, 0x00BF
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	b7 d2       	rcall	.+1390   	; 0x14d0 <__eewr_word_m8a>
							//Минуты начала рассвета
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_MINS;
     f62:	50 92 b1 00 	sts	0x00B1, r5
     f66:	40 92 b0 00 	sts	0x00B0, r4
     f6a:	51 c0       	rjmp	.+162    	; 0x100e <main+0x612>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_MINS){
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	91 05       	cpc	r25, r1
     f70:	59 f4       	brne	.+22     	; 0xf88 <main+0x58c>
							eeprom_write_word(&ee_led_menu_dawn_mins, led_menu_dawn_mins);
     f72:	60 91 bc 00 	lds	r22, 0x00BC
     f76:	70 91 bd 00 	lds	r23, 0x00BD
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a8 d2       	rcall	.+1360   	; 0x14d0 <__eewr_word_m8a>
							//Длительность рассвета
							ClearALLCharIndicator();
     f80:	90 d9       	rcall	.-3296   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_INTERVAL_DAWN;
     f82:	89 e0       	ldi	r24, 0x09	; 9
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	1a c0       	rjmp	.+52     	; 0xfbc <main+0x5c0>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_DAWN){
     f88:	89 30       	cpi	r24, 0x09	; 9
     f8a:	91 05       	cpc	r25, r1
     f8c:	59 f4       	brne	.+22     	; 0xfa4 <main+0x5a8>
							  eeprom_write_word(&ee_led_menu_dawn_interval_mins, led_menu_dawn_interval_mins);
     f8e:	60 91 ba 00 	lds	r22, 0x00BA
     f92:	70 91 bb 00 	lds	r23, 0x00BB
     f96:	86 e0       	ldi	r24, 0x06	; 6
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9a d2       	rcall	.+1332   	; 0x14d0 <__eewr_word_m8a>
							//Часы начала заката
							ClearALLCharIndicator();
     f9c:	82 d9       	rcall	.-3324   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_HOURS;
     f9e:	ea e0       	ldi	r30, 0x0A	; 10
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	1e c0       	rjmp	.+60     	; 0xfe0 <main+0x5e4>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_HOURS){
     fa4:	8a 30       	cpi	r24, 0x0A	; 10
     fa6:	91 05       	cpc	r25, r1
     fa8:	71 f4       	brne	.+28     	; 0xfc6 <main+0x5ca>
							 eeprom_write_word(&ee_led_menu_sunset_hours, led_menu_sunset_hours);
     faa:	60 91 b8 00 	lds	r22, 0x00B8
     fae:	70 91 b9 00 	lds	r23, 0x00B9
     fb2:	84 e0       	ldi	r24, 0x04	; 4
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	8c d2       	rcall	.+1304   	; 0x14d0 <__eewr_word_m8a>
							 //Минуты начала заката
							 now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_MINS;
     fb8:	8b e0       	ldi	r24, 0x0B	; 11
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 b1 00 	sts	0x00B1, r25
     fc0:	80 93 b0 00 	sts	0x00B0, r24
     fc4:	24 c0       	rjmp	.+72     	; 0x100e <main+0x612>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_MINS){
     fc6:	8b 30       	cpi	r24, 0x0B	; 11
     fc8:	91 05       	cpc	r25, r1
     fca:	79 f4       	brne	.+30     	; 0xfea <main+0x5ee>
							 eeprom_write_word(&ee_led_menu_sunset_mins, led_menu_sunset_mins);
     fcc:	60 91 b6 00 	lds	r22, 0x00B6
     fd0:	70 91 b7 00 	lds	r23, 0x00B7
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	7b d2       	rcall	.+1270   	; 0x14d0 <__eewr_word_m8a>
							 //Длительность заката
							 ClearALLCharIndicator();
     fda:	63 d9       	rcall	.-3386   	; 0x2a2 <ClearALLCharIndicator>
							 now_mode_led_menu = MODE_EDIT_INTERVAL_SUNSET;
     fdc:	ec e0       	ldi	r30, 0x0C	; 12
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	f0 93 b1 00 	sts	0x00B1, r31
     fe4:	e0 93 b0 00 	sts	0x00B0, r30
     fe8:	12 c0       	rjmp	.+36     	; 0x100e <main+0x612>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_SUNSET){
     fea:	0c 97       	sbiw	r24, 0x0c	; 12
     fec:	81 f4       	brne	.+32     	; 0x100e <main+0x612>
							eeprom_write_word(&ee_led_menu_sunset_interval_mins, led_menu_sunset_interval_mins);
     fee:	60 91 b4 00 	lds	r22, 0x00B4
     ff2:	70 91 b5 00 	lds	r23, 0x00B5
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	6a d2       	rcall	.+1236   	; 0x14d0 <__eewr_word_m8a>
							ClearALLCharIndicator();
     ffc:	52 d9       	rcall	.-3420   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_NONE;
     ffe:	10 92 b1 00 	sts	0x00B1, r1
    1002:	10 92 b0 00 	sts	0x00B0, r1
							increment_mode_led_menu = MODE_NONE_INC;
    1006:	10 92 af 00 	sts	0x00AF, r1
    100a:	10 92 ae 00 	sts	0x00AE, r1
			}
		}

        //Вывод текущего режима, если мы не в меню
		
        if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
    100e:	80 91 b0 00 	lds	r24, 0x00B0
    1012:	90 91 b1 00 	lds	r25, 0x00B1
    1016:	89 2b       	or	r24, r25
    1018:	11 f5       	brne	.+68     	; 0x105e <main+0x662>
    101a:	80 91 b3 00 	lds	r24, 0x00B3
    101e:	81 11       	cpse	r24, r1
    1020:	1e c0       	rjmp	.+60     	; 0x105e <main+0x662>
			ShowTime(hour, min);
    1022:	60 91 cd 00 	lds	r22, 0x00CD
    1026:	80 91 cc 00 	lds	r24, 0x00CC
    102a:	93 dc       	rcall	.-1754   	; 0x952 <ShowTime>
			setDotIndicator(2, (PINC & (1 << PC3)));
    102c:	63 b3       	in	r22, 0x13	; 19
    102e:	68 70       	andi	r22, 0x08	; 8
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	24 d9       	rcall	.-3512   	; 0x27c <setDotIndicator>
			if(now_mode_light == LIGHT_DAWM){
    1034:	80 91 ac 00 	lds	r24, 0x00AC
    1038:	90 91 ad 00 	lds	r25, 0x00AD
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	31 f4       	brne	.+12     	; 0x104e <main+0x652>
				setCharIndicator(18, 0);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	82 e1       	ldi	r24, 0x12	; 18
    1046:	14 d9       	rcall	.-3544   	; 0x270 <setCharIndicator>
				setCharIndicator(18, 5);
    1048:	65 e0       	ldi	r22, 0x05	; 5
    104a:	82 e1       	ldi	r24, 0x12	; 18
    104c:	07 c0       	rjmp	.+14     	; 0x105c <main+0x660>
			}else if(now_mode_light == LIGHT_SUNSET){
    104e:	02 97       	sbiw	r24, 0x02	; 2
    1050:	31 f4       	brne	.+12     	; 0x105e <main+0x662>
				setCharIndicator(19, 0);
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	83 e1       	ldi	r24, 0x13	; 19
    1056:	0c d9       	rcall	.-3560   	; 0x270 <setCharIndicator>
				setCharIndicator(19, 5);
    1058:	65 e0       	ldi	r22, 0x05	; 5
    105a:	83 e1       	ldi	r24, 0x13	; 19
    105c:	09 d9       	rcall	.-3566   	; 0x270 <setCharIndicator>
			   setCharIndicator(19, 5);
           }
		   */
        }
		
		if(now_mode_led_menu){
    105e:	80 91 b0 00 	lds	r24, 0x00B0
    1062:	90 91 b1 00 	lds	r25, 0x00B1
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	09 f4       	brne	.+2      	; 0x106c <main+0x670>
    106a:	f5 c0       	rjmp	.+490    	; 0x1256 <main+0x85a>
			//Меню настроки заката/рассвета
			switch(now_mode_led_menu){
    106c:	89 30       	cpi	r24, 0x09	; 9
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <main+0x678>
    1072:	73 c0       	rjmp	.+230    	; 0x115a <main+0x75e>
    1074:	30 f4       	brcc	.+12     	; 0x1082 <main+0x686>
    1076:	87 30       	cpi	r24, 0x07	; 7
    1078:	91 05       	cpc	r25, r1
    107a:	69 f0       	breq	.+26     	; 0x1096 <main+0x69a>
    107c:	08 97       	sbiw	r24, 0x08	; 8
    107e:	b9 f1       	breq	.+110    	; 0x10ee <main+0x6f2>
    1080:	ea c0       	rjmp	.+468    	; 0x1256 <main+0x85a>
    1082:	8b 30       	cpi	r24, 0x0B	; 11
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <main+0x68e>
    1088:	4a c0       	rjmp	.+148    	; 0x111e <main+0x722>
    108a:	08 f4       	brcc	.+2      	; 0x108e <main+0x692>
    108c:	8d c0       	rjmp	.+282    	; 0x11a8 <main+0x7ac>
    108e:	0c 97       	sbiw	r24, 0x0c	; 12
    1090:	09 f4       	brne	.+2      	; 0x1094 <main+0x698>
    1092:	ba c0       	rjmp	.+372    	; 0x1208 <main+0x80c>
    1094:	e0 c0       	rjmp	.+448    	; 0x1256 <main+0x85a>
				case MODE_EDIT_START_TIME_DAWN_HOURS: 
				  if(!twoHZ_status){
    1096:	80 91 a1 00 	lds	r24, 0x00A1
    109a:	81 11       	cpse	r24, r1
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <main+0x6c8>
					   setCharIndicator(led_menu_dawn_hours/10, 1);
    109e:	80 91 be 00 	lds	r24, 0x00BE
    10a2:	90 91 bf 00 	lds	r25, 0x00BF
    10a6:	6a e0       	ldi	r22, 0x0A	; 10
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	9f d1       	rcall	.+830    	; 0x13ea <__udivmodhi4>
    10ac:	86 2f       	mov	r24, r22
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	df d8       	rcall	.-3650   	; 0x270 <setCharIndicator>
					   setCharIndicator(led_menu_dawn_hours%10, 2);
    10b2:	80 91 be 00 	lds	r24, 0x00BE
    10b6:	90 91 bf 00 	lds	r25, 0x00BF
    10ba:	6a e0       	ldi	r22, 0x0A	; 10
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	95 d1       	rcall	.+810    	; 0x13ea <__udivmodhi4>
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <main+0x6d2>
					   }else{
					   setCharIndicator(11, 1);
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	8b e0       	ldi	r24, 0x0B	; 11
    10c8:	d3 d8       	rcall	.-3674   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 2);
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	8b e0       	ldi	r24, 0x0B	; 11
    10ce:	d0 d8       	rcall	.-3680   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(led_menu_dawn_mins/10, 3);
    10d0:	80 91 bc 00 	lds	r24, 0x00BC
    10d4:	90 91 bd 00 	lds	r25, 0x00BD
    10d8:	6a e0       	ldi	r22, 0x0A	; 10
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	86 d1       	rcall	.+780    	; 0x13ea <__udivmodhi4>
    10de:	86 2f       	mov	r24, r22
    10e0:	63 e0       	ldi	r22, 0x03	; 3
    10e2:	c6 d8       	rcall	.-3700   	; 0x270 <setCharIndicator>
				   setCharIndicator(led_menu_dawn_mins%10, 4);				
    10e4:	80 91 bc 00 	lds	r24, 0x00BC
    10e8:	90 91 bd 00 	lds	r25, 0x00BD
    10ec:	88 c0       	rjmp	.+272    	; 0x11fe <main+0x802>
				break;

				case MODE_EDIT_START_TIME_DAWN_MINS: 
				  setCharIndicator(led_menu_dawn_hours/10, 1);
    10ee:	80 91 be 00 	lds	r24, 0x00BE
    10f2:	90 91 bf 00 	lds	r25, 0x00BF
    10f6:	6a e0       	ldi	r22, 0x0A	; 10
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	77 d1       	rcall	.+750    	; 0x13ea <__udivmodhi4>
    10fc:	86 2f       	mov	r24, r22
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	b7 d8       	rcall	.-3730   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
    1102:	80 91 be 00 	lds	r24, 0x00BE
    1106:	90 91 bf 00 	lds	r25, 0x00BF
    110a:	6a e0       	ldi	r22, 0x0A	; 10
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	6d d1       	rcall	.+730    	; 0x13ea <__udivmodhi4>
    1110:	62 e0       	ldi	r22, 0x02	; 2
    1112:	ae d8       	rcall	.-3748   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
    1114:	80 91 a1 00 	lds	r24, 0x00A1
    1118:	81 11       	cpse	r24, r1
    111a:	19 c0       	rjmp	.+50     	; 0x114e <main+0x752>
    111c:	d9 cf       	rjmp	.-78     	; 0x10d0 <main+0x6d4>
				  setCharIndicator(led_menu_sunset_mins%10, 4);				
				break;
			
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
    111e:	80 91 b8 00 	lds	r24, 0x00B8
    1122:	90 91 b9 00 	lds	r25, 0x00B9
    1126:	6a e0       	ldi	r22, 0x0A	; 10
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	5f d1       	rcall	.+702    	; 0x13ea <__udivmodhi4>
    112c:	86 2f       	mov	r24, r22
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	9f d8       	rcall	.-3778   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_sunset_hours%10, 2);
    1132:	80 91 b8 00 	lds	r24, 0x00B8
    1136:	90 91 b9 00 	lds	r25, 0x00B9
    113a:	6a e0       	ldi	r22, 0x0A	; 10
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	55 d1       	rcall	.+682    	; 0x13ea <__udivmodhi4>
    1140:	62 e0       	ldi	r22, 0x02	; 2
    1142:	96 d8       	rcall	.-3796   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
    1144:	80 91 a1 00 	lds	r24, 0x00A1
    1148:	88 23       	and	r24, r24
    114a:	09 f4       	brne	.+2      	; 0x114e <main+0x752>
    114c:	4a c0       	rjmp	.+148    	; 0x11e2 <main+0x7e6>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
				  if(!twoHZ_status){
					   setCharIndicator(led_menu_dawn_mins/10, 3);
					   setCharIndicator(led_menu_dawn_mins%10, 4);
				  }else{
					   setCharIndicator(11, 3);
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	8b e0       	ldi	r24, 0x0B	; 11
    1152:	8e d8       	rcall	.-3812   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 4);
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	7d c0       	rjmp	.+250    	; 0x1254 <main+0x858>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
    115a:	80 91 a1 00 	lds	r24, 0x00A1
    115e:	81 11       	cpse	r24, r1
    1160:	1a c0       	rjmp	.+52     	; 0x1196 <main+0x79a>
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
    1162:	80 91 ba 00 	lds	r24, 0x00BA
    1166:	90 91 bb 00 	lds	r25, 0x00BB
    116a:	b8 01       	movw	r22, r16
    116c:	3e d1       	rcall	.+636    	; 0x13ea <__udivmodhi4>
    116e:	86 2f       	mov	r24, r22
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	7e d8       	rcall	.-3844   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_dawn_interval_mins%100)/10, 2);
    1174:	80 91 ba 00 	lds	r24, 0x00BA
    1178:	90 91 bb 00 	lds	r25, 0x00BB
    117c:	b8 01       	movw	r22, r16
    117e:	35 d1       	rcall	.+618    	; 0x13ea <__udivmodhi4>
    1180:	6a e0       	ldi	r22, 0x0A	; 10
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	32 d1       	rcall	.+612    	; 0x13ea <__udivmodhi4>
    1186:	86 2f       	mov	r24, r22
    1188:	62 e0       	ldi	r22, 0x02	; 2
    118a:	72 d8       	rcall	.-3868   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_dawn_interval_mins%100%10, 3);
    118c:	80 91 ba 00 	lds	r24, 0x00BA
    1190:	90 91 bb 00 	lds	r25, 0x00BB
    1194:	56 c0       	rjmp	.+172    	; 0x1242 <main+0x846>
					  setCharIndicator(13, 4);
				  }else{
					  setCharIndicator(11, 1);
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	8b e0       	ldi	r24, 0x0B	; 11
    119a:	6a d8       	rcall	.-3884   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
    119c:	62 e0       	ldi	r22, 0x02	; 2
    119e:	8b e0       	ldi	r24, 0x0B	; 11
    11a0:	67 d8       	rcall	.-3890   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 3);
    11a2:	63 e0       	ldi	r22, 0x03	; 3
    11a4:	8b e0       	ldi	r24, 0x0B	; 11
    11a6:	53 c0       	rjmp	.+166    	; 0x124e <main+0x852>
				  }

				break;
			
				case MODE_EDIT_START_TIME_SUNSET_HOURS:
				  if(!twoHZ_status){
    11a8:	80 91 a1 00 	lds	r24, 0x00A1
    11ac:	81 11       	cpse	r24, r1
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <main+0x7da>
					  setCharIndicator(led_menu_sunset_hours/10, 1);
    11b0:	80 91 b8 00 	lds	r24, 0x00B8
    11b4:	90 91 b9 00 	lds	r25, 0x00B9
    11b8:	6a e0       	ldi	r22, 0x0A	; 10
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	16 d1       	rcall	.+556    	; 0x13ea <__udivmodhi4>
    11be:	86 2f       	mov	r24, r22
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	56 d8       	rcall	.-3924   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_hours%10, 2);
    11c4:	80 91 b8 00 	lds	r24, 0x00B8
    11c8:	90 91 b9 00 	lds	r25, 0x00B9
    11cc:	6a e0       	ldi	r22, 0x0A	; 10
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	0c d1       	rcall	.+536    	; 0x13ea <__udivmodhi4>
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <main+0x7e4>
					  }else{
					  setCharIndicator(11, 1);
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	8b e0       	ldi	r24, 0x0B	; 11
    11da:	4a d8       	rcall	.-3948   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	8b e0       	ldi	r24, 0x0B	; 11
    11e0:	47 d8       	rcall	.-3954   	; 0x270 <setCharIndicator>
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
				  setCharIndicator(led_menu_sunset_hours%10, 2);
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_sunset_mins/10, 3);
    11e2:	80 91 b6 00 	lds	r24, 0x00B6
    11e6:	90 91 b7 00 	lds	r25, 0x00B7
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	fd d0       	rcall	.+506    	; 0x13ea <__udivmodhi4>
    11f0:	86 2f       	mov	r24, r22
    11f2:	63 e0       	ldi	r22, 0x03	; 3
    11f4:	3d d8       	rcall	.-3974   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_mins%10, 4);
    11f6:	80 91 b6 00 	lds	r24, 0x00B6
    11fa:	90 91 b7 00 	lds	r25, 0x00B7
    11fe:	6a e0       	ldi	r22, 0x0A	; 10
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	f3 d0       	rcall	.+486    	; 0x13ea <__udivmodhi4>
    1204:	64 e0       	ldi	r22, 0x04	; 4
    1206:	26 c0       	rjmp	.+76     	; 0x1254 <main+0x858>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_SUNSET: 		  
				  if(!twoHZ_status){
    1208:	80 91 a1 00 	lds	r24, 0x00A1
    120c:	81 11       	cpse	r24, r1
    120e:	c3 cf       	rjmp	.-122    	; 0x1196 <main+0x79a>
					  setCharIndicator(led_menu_sunset_interval_mins/100, 1);
    1210:	80 91 b4 00 	lds	r24, 0x00B4
    1214:	90 91 b5 00 	lds	r25, 0x00B5
    1218:	b8 01       	movw	r22, r16
    121a:	e7 d0       	rcall	.+462    	; 0x13ea <__udivmodhi4>
    121c:	86 2f       	mov	r24, r22
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	27 d8       	rcall	.-4018   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_sunset_interval_mins%100)/10, 2);
    1222:	80 91 b4 00 	lds	r24, 0x00B4
    1226:	90 91 b5 00 	lds	r25, 0x00B5
    122a:	b8 01       	movw	r22, r16
    122c:	de d0       	rcall	.+444    	; 0x13ea <__udivmodhi4>
    122e:	6a e0       	ldi	r22, 0x0A	; 10
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	db d0       	rcall	.+438    	; 0x13ea <__udivmodhi4>
    1234:	86 2f       	mov	r24, r22
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	1b d8       	rcall	.-4042   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_interval_mins%100%10, 3);
    123a:	80 91 b4 00 	lds	r24, 0x00B4
    123e:	90 91 b5 00 	lds	r25, 0x00B5
    1242:	b8 01       	movw	r22, r16
    1244:	d2 d0       	rcall	.+420    	; 0x13ea <__udivmodhi4>
    1246:	6a e0       	ldi	r22, 0x0A	; 10
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	cf d0       	rcall	.+414    	; 0x13ea <__udivmodhi4>
    124c:	63 e0       	ldi	r22, 0x03	; 3
    124e:	10 d8       	rcall	.-4064   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
    1250:	64 e0       	ldi	r22, 0x04	; 4
    1252:	8d e0       	ldi	r24, 0x0D	; 13
    1254:	0d d8       	rcall	.-4070   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
				  }				break;
			
			}
		}
		if(now_mode){
    1256:	80 91 b3 00 	lds	r24, 0x00B3
    125a:	88 23       	and	r24, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <main+0x864>
    125e:	32 cc       	rjmp	.-1948   	; 0xac4 <main+0xc8>
			//Меню настроки часов
			switch(now_mode){
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	09 f4       	brne	.+2      	; 0x1266 <main+0x86a>
    1264:	65 c0       	rjmp	.+202    	; 0x1330 <main+0x934>
    1266:	28 f4       	brcc	.+10     	; 0x1272 <main+0x876>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	f1 f0       	breq	.+60     	; 0x12a8 <main+0x8ac>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	d1 f1       	breq	.+116    	; 0x12e4 <main+0x8e8>
    1270:	29 cc       	rjmp	.-1966   	; 0xac4 <main+0xc8>
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	09 f4       	brne	.+2      	; 0x1278 <main+0x87c>
    1276:	5c c0       	rjmp	.+184    	; 0x1330 <main+0x934>
    1278:	08 f4       	brcc	.+2      	; 0x127c <main+0x880>
    127a:	5a c0       	rjmp	.+180    	; 0x1330 <main+0x934>
    127c:	86 30       	cpi	r24, 0x06	; 6
    127e:	09 f0       	breq	.+2      	; 0x1282 <main+0x886>
    1280:	21 cc       	rjmp	.-1982   	; 0xac4 <main+0xc8>
				   ShowDate(date, month, year);
				break;
				
				
				case MODE_EDIT_WEEK_DAY: // день недели
					setCharIndicator(10, 0);
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	8a e0       	ldi	r24, 0x0A	; 10
    1286:	f4 d7       	rcall	.+4072   	; 0x2270 <__data_load_end+0xd40>
					setCharIndicator(10, 1);
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	8a e0       	ldi	r24, 0x0A	; 10
    128c:	f1 d7       	rcall	.+4066   	; 0x2270 <__data_load_end+0xd40>
			   		setCharIndicator(0, 2);
    128e:	62 e0       	ldi	r22, 0x02	; 2
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	ee d7       	rcall	.+4060   	; 0x2270 <__data_load_end+0xd40>
			   		setCharIndicator(day, 3);
    1294:	63 e0       	ldi	r22, 0x03	; 3
    1296:	80 91 cb 00 	lds	r24, 0x00CB
    129a:	ea d7       	rcall	.+4052   	; 0x2270 <__data_load_end+0xd40>
					setCharIndicator(10, 4);
    129c:	64 e0       	ldi	r22, 0x04	; 4
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	e7 d7       	rcall	.+4046   	; 0x2270 <__data_load_end+0xd40>
					setCharIndicator(10, 5);
    12a2:	65 e0       	ldi	r22, 0x05	; 5
    12a4:	8a e0       	ldi	r24, 0x0A	; 10
    12a6:	4c c0       	rjmp	.+152    	; 0x1340 <main+0x944>
		}
		if(now_mode){
			//Меню настроки часов
			switch(now_mode){
				case MODE_EDIT_HOURS: //часы
				   if(!twoHZ_status){
    12a8:	80 91 a1 00 	lds	r24, 0x00A1
    12ac:	81 11       	cpse	r24, r1
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <main+0x8d2>
				    setCharIndicator(hour/10, 1);
    12b0:	80 91 cc 00 	lds	r24, 0x00CC
    12b4:	3a e0       	ldi	r19, 0x0A	; 10
    12b6:	33 2e       	mov	r3, r19
    12b8:	63 2d       	mov	r22, r3
    12ba:	8b d0       	rcall	.+278    	; 0x13d2 <__udivmodqi4>
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	d8 d7       	rcall	.+4016   	; 0x2270 <__data_load_end+0xd40>
				    setCharIndicator(hour%10, 2);
    12c0:	80 91 cc 00 	lds	r24, 0x00CC
    12c4:	63 2d       	mov	r22, r3
    12c6:	85 d0       	rcall	.+266    	; 0x13d2 <__udivmodqi4>
    12c8:	89 2f       	mov	r24, r25
    12ca:	62 e0       	ldi	r22, 0x02	; 2
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <main+0x8dc>
				   }else{
					setCharIndicator(11, 1);
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	8b e0       	ldi	r24, 0x0B	; 11
    12d2:	ce d7       	rcall	.+3996   	; 0x2270 <__data_load_end+0xd40>
					setCharIndicator(11, 2);				   
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	8b e0       	ldi	r24, 0x0B	; 11
    12d8:	cb d7       	rcall	.+3990   	; 0x2270 <__data_load_end+0xd40>
				   }
				   setCharIndicator(min/10, 3);
    12da:	80 91 cd 00 	lds	r24, 0x00CD
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	32 2e       	mov	r3, r18
    12e2:	15 c0       	rjmp	.+42     	; 0x130e <main+0x912>
				   setCharIndicator(min%10, 4);
				break;

				case MODE_EDIT_MINUTES: // минуты
				   setCharIndicator(hour/10, 1);
    12e4:	80 91 cc 00 	lds	r24, 0x00CC
    12e8:	9a e0       	ldi	r25, 0x0A	; 10
    12ea:	39 2e       	mov	r3, r25
    12ec:	63 2d       	mov	r22, r3
    12ee:	71 d0       	rcall	.+226    	; 0x13d2 <__udivmodqi4>
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	be d7       	rcall	.+3964   	; 0x2270 <__data_load_end+0xd40>
				   setCharIndicator(hour%10, 2);
    12f4:	80 91 cc 00 	lds	r24, 0x00CC
    12f8:	63 2d       	mov	r22, r3
    12fa:	6b d0       	rcall	.+214    	; 0x13d2 <__udivmodqi4>
    12fc:	89 2f       	mov	r24, r25
    12fe:	62 e0       	ldi	r22, 0x02	; 2
    1300:	b7 d7       	rcall	.+3950   	; 0x2270 <__data_load_end+0xd40>
				   if(!twoHZ_status){
    1302:	80 91 a1 00 	lds	r24, 0x00A1
    1306:	81 11       	cpse	r24, r1
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <main+0x928>
					  setCharIndicator(min/10, 3);
    130a:	80 91 cd 00 	lds	r24, 0x00CD
    130e:	63 2d       	mov	r22, r3
    1310:	60 d0       	rcall	.+192    	; 0x13d2 <__udivmodqi4>
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	ad d7       	rcall	.+3930   	; 0x2270 <__data_load_end+0xd40>
					  setCharIndicator(min%10, 4);
    1316:	80 91 cd 00 	lds	r24, 0x00CD
    131a:	63 2d       	mov	r22, r3
    131c:	5a d0       	rcall	.+180    	; 0x13d2 <__udivmodqi4>
    131e:	89 2f       	mov	r24, r25
    1320:	64 e0       	ldi	r22, 0x04	; 4
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <main+0x944>
				   }else{
					  setCharIndicator(11, 3);
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	8b e0       	ldi	r24, 0x0B	; 11
    1328:	a3 d7       	rcall	.+3910   	; 0x2270 <__data_load_end+0xd40>
					  setCharIndicator(11, 4);
    132a:	64 e0       	ldi	r22, 0x04	; 4
    132c:	8b e0       	ldi	r24, 0x0B	; 11
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <main+0x944>
				   ShowDate(date, month, year);
				break;
				
				
				case MODE_EDIT_YEAR: // год
				   ShowDate(date, month, year);
    1330:	40 91 c8 00 	lds	r20, 0x00C8
    1334:	60 91 c9 00 	lds	r22, 0x00C9
    1338:	80 91 ca 00 	lds	r24, 0x00CA
    133c:	2b db       	rcall	.-2474   	; 0x994 <ShowDate>
				break;
    133e:	c2 cb       	rjmp	.-2172   	; 0xac4 <main+0xc8>
					setCharIndicator(10, 0);
					setCharIndicator(10, 1);
			   		setCharIndicator(0, 2);
			   		setCharIndicator(day, 3);
					setCharIndicator(10, 4);
					setCharIndicator(10, 5);
    1340:	97 d7       	rcall	.+3886   	; 0x2270 <__data_load_end+0xd40>
				break;
    1342:	c0 cb       	rjmp	.-2176   	; 0xac4 <main+0xc8>

00001344 <RTC_ConvertFromDec>:
﻿#include "RTC.h"

unsigned char RTC_ConvertFromDec(unsigned char c)
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c));
    1344:	98 2f       	mov	r25, r24
    1346:	92 95       	swap	r25
    1348:	9f 70       	andi	r25, 0x0F	; 15
    134a:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
    134c:	2a e0       	ldi	r18, 0x0A	; 10
    134e:	92 9f       	mul	r25, r18
    1350:	80 0d       	add	r24, r0
    1352:	11 24       	eor	r1, r1
    1354:	08 95       	ret

00001356 <RTC_ConvertFromBinDec>:

unsigned char RTC_ConvertFromBinDec(unsigned char c)
{
	unsigned char ch = ((c/10)<<4)|(c%10);
    1356:	6a e0       	ldi	r22, 0x0A	; 10
    1358:	3c d0       	rcall	.+120    	; 0x13d2 <__udivmodqi4>
    135a:	29 2f       	mov	r18, r25
    135c:	30 e1       	ldi	r19, 0x10	; 16
    135e:	83 9f       	mul	r24, r19
    1360:	c0 01       	movw	r24, r0
    1362:	11 24       	eor	r1, r1
	return ch;
    1364:	82 2b       	or	r24, r18
    1366:	08 95       	ret

00001368 <I2C_Init>:
﻿#include "twi.h"

void I2C_Init (void)
{
	TWBR=0x20;//скорость передачи (при 8 мгц получается 100 кгц, что и необходимо для общения с ds1307)
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	80 b9       	out	0x00, r24	; 0
    136c:	08 95       	ret

0000136e <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    136e:	84 ea       	ldi	r24, 0xA4	; 164
    1370:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
    1372:	06 b6       	in	r0, 0x36	; 54
    1374:	07 fe       	sbrs	r0, 7
    1376:	fd cf       	rjmp	.-6      	; 0x1372 <I2C_StartCondition+0x4>
}
    1378:	08 95       	ret

0000137a <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    137a:	84 e9       	ldi	r24, 0x94	; 148
    137c:	86 bf       	out	0x36, r24	; 54
    137e:	08 95       	ret

00001380 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
    1380:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
    1382:	84 e8       	ldi	r24, 0x84	; 132
    1384:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
    1386:	06 b6       	in	r0, 0x36	; 54
    1388:	07 fe       	sbrs	r0, 7
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <I2C_SendByte+0x6>
}
    138c:	08 95       	ret

0000138e <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	1f 92       	push	r1
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	18 2f       	mov	r17, r24
	I2C_StartCondition(); // Отправим условие START
    139c:	69 83       	std	Y+1, r22	; 0x01
    139e:	e7 df       	rcall	.-50     	; 0x136e <I2C_StartCondition>
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	ee df       	rcall	.-36     	; 0x1380 <I2C_SendByte>
	I2C_SendByte(c);// Отправим байт данных
    13a4:	81 2f       	mov	r24, r17
    13a6:	ec df       	rcall	.-40     	; 0x1380 <I2C_SendByte>
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    13a8:	84 e9       	ldi	r24, 0x94	; 148
    13aa:	86 bf       	out	0x36, r24	; 54
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	08 95       	ret

000013b6 <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    13b6:	84 ec       	ldi	r24, 0xC4	; 196
    13b8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
    13ba:	06 b6       	in	r0, 0x36	; 54
    13bc:	07 fe       	sbrs	r0, 7
    13be:	fd cf       	rjmp	.-6      	; 0x13ba <I2C_ReadByte+0x4>
	return TWDR;//читаем регистр данных
    13c0:	83 b1       	in	r24, 0x03	; 3
}
    13c2:	08 95       	ret

000013c4 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    13c4:	84 e8       	ldi	r24, 0x84	; 132
    13c6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
    13c8:	06 b6       	in	r0, 0x36	; 54
    13ca:	07 fe       	sbrs	r0, 7
    13cc:	fd cf       	rjmp	.-6      	; 0x13c8 <I2C_ReadLastByte+0x4>
	return TWDR;//читаем регистр данных
    13ce:	83 b1       	in	r24, 0x03	; 3
    13d0:	08 95       	ret

000013d2 <__udivmodqi4>:
    13d2:	99 1b       	sub	r25, r25
    13d4:	79 e0       	ldi	r23, 0x09	; 9
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <__udivmodqi4_ep>

000013d8 <__udivmodqi4_loop>:
    13d8:	99 1f       	adc	r25, r25
    13da:	96 17       	cp	r25, r22
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__udivmodqi4_ep>
    13de:	96 1b       	sub	r25, r22

000013e0 <__udivmodqi4_ep>:
    13e0:	88 1f       	adc	r24, r24
    13e2:	7a 95       	dec	r23
    13e4:	c9 f7       	brne	.-14     	; 0x13d8 <__udivmodqi4_loop>
    13e6:	80 95       	com	r24
    13e8:	08 95       	ret

000013ea <__udivmodhi4>:
    13ea:	aa 1b       	sub	r26, r26
    13ec:	bb 1b       	sub	r27, r27
    13ee:	51 e1       	ldi	r21, 0x11	; 17
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <__udivmodhi4_ep>

000013f2 <__udivmodhi4_loop>:
    13f2:	aa 1f       	adc	r26, r26
    13f4:	bb 1f       	adc	r27, r27
    13f6:	a6 17       	cp	r26, r22
    13f8:	b7 07       	cpc	r27, r23
    13fa:	10 f0       	brcs	.+4      	; 0x1400 <__udivmodhi4_ep>
    13fc:	a6 1b       	sub	r26, r22
    13fe:	b7 0b       	sbc	r27, r23

00001400 <__udivmodhi4_ep>:
    1400:	88 1f       	adc	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	5a 95       	dec	r21
    1406:	a9 f7       	brne	.-22     	; 0x13f2 <__udivmodhi4_loop>
    1408:	80 95       	com	r24
    140a:	90 95       	com	r25
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	08 95       	ret

00001412 <__divmodsi4>:
    1412:	05 2e       	mov	r0, r21
    1414:	97 fb       	bst	r25, 7
    1416:	16 f4       	brtc	.+4      	; 0x141c <__divmodsi4+0xa>
    1418:	00 94       	com	r0
    141a:	0f d0       	rcall	.+30     	; 0x143a <__negsi2>
    141c:	57 fd       	sbrc	r21, 7
    141e:	05 d0       	rcall	.+10     	; 0x142a <__divmodsi4_neg2>
    1420:	24 d0       	rcall	.+72     	; 0x146a <__udivmodsi4>
    1422:	07 fc       	sbrc	r0, 7
    1424:	02 d0       	rcall	.+4      	; 0x142a <__divmodsi4_neg2>
    1426:	46 f4       	brtc	.+16     	; 0x1438 <__divmodsi4_exit>
    1428:	08 c0       	rjmp	.+16     	; 0x143a <__negsi2>

0000142a <__divmodsi4_neg2>:
    142a:	50 95       	com	r21
    142c:	40 95       	com	r20
    142e:	30 95       	com	r19
    1430:	21 95       	neg	r18
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	4f 4f       	sbci	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255

00001438 <__divmodsi4_exit>:
    1438:	08 95       	ret

0000143a <__negsi2>:
    143a:	90 95       	com	r25
    143c:	80 95       	com	r24
    143e:	70 95       	com	r23
    1440:	61 95       	neg	r22
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__muluhisi3>:
    144a:	31 d0       	rcall	.+98     	; 0x14ae <__umulhisi3>
    144c:	a5 9f       	mul	r26, r21
    144e:	90 0d       	add	r25, r0
    1450:	b4 9f       	mul	r27, r20
    1452:	90 0d       	add	r25, r0
    1454:	a4 9f       	mul	r26, r20
    1456:	80 0d       	add	r24, r0
    1458:	91 1d       	adc	r25, r1
    145a:	11 24       	eor	r1, r1
    145c:	08 95       	ret

0000145e <__mulshisi3>:
    145e:	b7 ff       	sbrs	r27, 7
    1460:	f4 cf       	rjmp	.-24     	; 0x144a <__muluhisi3>

00001462 <__mulohisi3>:
    1462:	f3 df       	rcall	.-26     	; 0x144a <__muluhisi3>
    1464:	82 1b       	sub	r24, r18
    1466:	93 0b       	sbc	r25, r19
    1468:	08 95       	ret

0000146a <__udivmodsi4>:
    146a:	a1 e2       	ldi	r26, 0x21	; 33
    146c:	1a 2e       	mov	r1, r26
    146e:	aa 1b       	sub	r26, r26
    1470:	bb 1b       	sub	r27, r27
    1472:	fd 01       	movw	r30, r26
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <__udivmodsi4_ep>

00001476 <__udivmodsi4_loop>:
    1476:	aa 1f       	adc	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	ee 1f       	adc	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	a2 17       	cp	r26, r18
    1480:	b3 07       	cpc	r27, r19
    1482:	e4 07       	cpc	r30, r20
    1484:	f5 07       	cpc	r31, r21
    1486:	20 f0       	brcs	.+8      	; 0x1490 <__udivmodsi4_ep>
    1488:	a2 1b       	sub	r26, r18
    148a:	b3 0b       	sbc	r27, r19
    148c:	e4 0b       	sbc	r30, r20
    148e:	f5 0b       	sbc	r31, r21

00001490 <__udivmodsi4_ep>:
    1490:	66 1f       	adc	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	1a 94       	dec	r1
    149a:	69 f7       	brne	.-38     	; 0x1476 <__udivmodsi4_loop>
    149c:	60 95       	com	r22
    149e:	70 95       	com	r23
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	bd 01       	movw	r22, r26
    14aa:	cf 01       	movw	r24, r30
    14ac:	08 95       	ret

000014ae <__umulhisi3>:
    14ae:	a2 9f       	mul	r26, r18
    14b0:	b0 01       	movw	r22, r0
    14b2:	b3 9f       	mul	r27, r19
    14b4:	c0 01       	movw	r24, r0
    14b6:	a3 9f       	mul	r26, r19
    14b8:	01 d0       	rcall	.+2      	; 0x14bc <__umulhisi3+0xe>
    14ba:	b2 9f       	mul	r27, r18
    14bc:	70 0d       	add	r23, r0
    14be:	81 1d       	adc	r24, r1
    14c0:	11 24       	eor	r1, r1
    14c2:	91 1d       	adc	r25, r1
    14c4:	08 95       	ret

000014c6 <__eerd_word_m8a>:
    14c6:	a8 e1       	ldi	r26, 0x18	; 24
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	42 e0       	ldi	r20, 0x02	; 2
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	05 c0       	rjmp	.+10     	; 0x14da <__eerd_blraw_m8a>

000014d0 <__eewr_word_m8a>:
    14d0:	12 d0       	rcall	.+36     	; 0x14f6 <__eewr_byte_m8a>
    14d2:	27 2f       	mov	r18, r23
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <__eewr_r18_m8a>

000014d6 <__eerd_block_m8a>:
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22

000014da <__eerd_blraw_m8a>:
    14da:	fc 01       	movw	r30, r24
    14dc:	e1 99       	sbic	0x1c, 1	; 28
    14de:	fe cf       	rjmp	.-4      	; 0x14dc <__eerd_blraw_m8a+0x2>
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <__eerd_blraw_m8a+0x14>
    14e2:	ff bb       	out	0x1f, r31	; 31
    14e4:	ee bb       	out	0x1e, r30	; 30
    14e6:	e0 9a       	sbi	0x1c, 0	; 28
    14e8:	31 96       	adiw	r30, 0x01	; 1
    14ea:	0d b2       	in	r0, 0x1d	; 29
    14ec:	0d 92       	st	X+, r0
    14ee:	41 50       	subi	r20, 0x01	; 1
    14f0:	50 40       	sbci	r21, 0x00	; 0
    14f2:	b8 f7       	brcc	.-18     	; 0x14e2 <__eerd_blraw_m8a+0x8>
    14f4:	08 95       	ret

000014f6 <__eewr_byte_m8a>:
    14f6:	26 2f       	mov	r18, r22

000014f8 <__eewr_r18_m8a>:
    14f8:	e1 99       	sbic	0x1c, 1	; 28
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <__eewr_r18_m8a>
    14fc:	9f bb       	out	0x1f, r25	; 31
    14fe:	8e bb       	out	0x1e, r24	; 30
    1500:	2d bb       	out	0x1d, r18	; 29
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	e2 9a       	sbi	0x1c, 2	; 28
    1508:	e1 9a       	sbi	0x1c, 1	; 28
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	08 95       	ret

00001510 <_exit>:
    1510:	f8 94       	cli

00001512 <__stop_program>:
    1512:	ff cf       	rjmp	.-2      	; 0x1512 <__stop_program>
