
MyClock1307LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001226  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001226  000012da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  0080007c  0080007c  000012f6  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000012f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a74  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  00002f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000975  00000000  00000000  000036f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd5  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000058b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	b7 c1       	rjmp	.+878    	; 0x376 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	7c c1       	rjmp	.+760    	; 0x306 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	d2 c1       	rjmp	.+932    	; 0x3b8 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e6 e2       	ldi	r30, 0x26	; 38
      3a:	f2 e1       	ldi	r31, 0x12	; 18
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 37       	cpi	r26, 0x7C	; 124
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ac e7       	ldi	r26, 0x7C	; 124
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a5 3e       	cpi	r26, 0xE5	; 229
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	a4 d3       	rcall	.+1864   	; 0x7a2 <main>
      5a:	e3 c8       	rjmp	.-3642   	; 0xfffff222 <__eeprom_end+0xff7ef216>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
      5e:	20 91 7c 00 	lds	r18, 0x007C
      62:	28 30       	cpi	r18, 0x08	; 8
      64:	78 f4       	brcc	.+30     	; 0x84 <PutBut+0x26>
     buf[head] = but;
      66:	90 91 7e 00 	lds	r25, 0x007E
      6a:	e9 2f       	mov	r30, r25
      6c:	f0 e0       	ldi	r31, 0x00	; 0
      6e:	e1 58       	subi	r30, 0x81	; 129
      70:	ff 4f       	sbci	r31, 0xFF	; 255
      72:	80 83       	st	Z, r24
     count++;
      74:	2f 5f       	subi	r18, 0xFF	; 255
      76:	20 93 7c 00 	sts	0x007C, r18
     head++;
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	89 0f       	add	r24, r25
     head &= (BUT_SIZE_BUF - 1);    
      7e:	87 70       	andi	r24, 0x07	; 7
      80:	80 93 7e 00 	sts	0x007E, r24
      84:	08 95       	ret

00000086 <BUT_Check.constprop.0>:
  return but;
}

/************************************************/

static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
      86:	ef 92       	push	r14
      88:	ff 92       	push	r15
      8a:	0f 93       	push	r16
      8c:	1f 93       	push	r17
      8e:	cf 93       	push	r28
      90:	df 93       	push	r29
      92:	00 d0       	rcall	.+0      	; 0x94 <BUT_Check.constprop.0+0xe>
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
      98:	2f ef       	ldi	r18, 0xFF	; 255
      9a:	26 0f       	add	r18, r22
   
  stateTmp = stateBut[i];
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	a9 01       	movw	r20, r18
      a0:	49 57       	subi	r20, 0x79	; 121
      a2:	5f 4f       	sbci	r21, 0xFF	; 255
      a4:	7a 01       	movw	r14, r20
      a6:	fa 01       	movw	r30, r20
      a8:	40 81       	ld	r20, Z
  event = 0;

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
      aa:	f9 01       	movw	r30, r18
      ac:	e4 57       	subi	r30, 0x74	; 116
      ae:	ff 4f       	sbci	r31, 0xFF	; 255
      b0:	90 81       	ld	r25, Z
      b2:	90 93 8b 00 	sts	0x008B, r25
#endif

 countDebTmp = countDeb[i];
      b6:	89 01       	movw	r16, r18
      b8:	00 0f       	add	r16, r16
      ba:	11 1f       	adc	r17, r17
      bc:	d8 01       	movw	r26, r16
      be:	ae 56       	subi	r26, 0x6E	; 110
      c0:	bf 4f       	sbci	r27, 0xFF	; 255
      c2:	2d 91       	ld	r18, X+
      c4:	3c 91       	ld	r19, X
      c6:	30 93 91 00 	sts	0x0091, r19
      ca:	20 93 90 00 	sts	0x0090, r18
  
 if (state){
      ce:	88 23       	and	r24, r24
      d0:	e1 f0       	breq	.+56     	; 0x10a <BUT_Check.constprop.0+0x84>
    if (countDebTmp < BUT_COUNT_MAX){
      d2:	25 3f       	cpi	r18, 0xF5	; 245
      d4:	51 e0       	ldi	r21, 0x01	; 1
      d6:	35 07       	cpc	r19, r21
      d8:	c8 f5       	brcc	.+114    	; 0x14c <BUT_Check.constprop.0+0xc6>
       countDebTmp++;
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
      de:	30 93 91 00 	sts	0x0091, r19
      e2:	20 93 90 00 	sts	0x0090, r18

       if (countDebTmp > BUT_COUNT_THR){
      e6:	2b 30       	cpi	r18, 0x0B	; 11
      e8:	31 05       	cpc	r19, r1
      ea:	80 f1       	brcs	.+96     	; 0x14c <BUT_Check.constprop.0+0xc6>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
      ec:	40 fd       	sbrc	r20, 0
      ee:	03 c0       	rjmp	.+6      	; 0xf6 <BUT_Check.constprop.0+0x70>
             stateTmp |= FLAG_BUT_PRESSED;
      f0:	41 60       	ori	r20, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <BUT_Check.constprop.0+0x72>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
      f6:	90 e0       	ldi	r25, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
      f8:	25 3f       	cpi	r18, 0xF5	; 245
      fa:	31 40       	sbci	r19, 0x01	; 1
      fc:	41 f5       	brne	.+80     	; 0x14e <BUT_Check.constprop.0+0xc8>
         if (!(stateTmp & FLAG_BUT_HOLD)){
      fe:	41 fd       	sbrc	r20, 1
     100:	26 c0       	rjmp	.+76     	; 0x14e <BUT_Check.constprop.0+0xc8>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     102:	4b 7f       	andi	r20, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     104:	42 60       	ori	r20, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     106:	92 e0       	ldi	r25, 0x02	; 2
     108:	22 c0       	rjmp	.+68     	; 0x14e <BUT_Check.constprop.0+0xc8>
    }    
  }
  else{

#if (BUT_DOUBLE_CLICK_EN == 1)     
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     10a:	40 ff       	sbrs	r20, 0
     10c:	0a c0       	rjmp	.+20     	; 0x122 <BUT_Check.constprop.0+0x9c>
     10e:	41 fd       	sbrc	r20, 1
     110:	08 c0       	rjmp	.+16     	; 0x122 <BUT_Check.constprop.0+0x9c>

       if (stateTmp & FLAG_BUT_RELEASED){
     112:	42 ff       	sbrs	r20, 2
     114:	03 c0       	rjmp	.+6      	; 0x11c <BUT_Check.constprop.0+0x96>
          stateTmp &= ~FLAG_BUT_RELEASED;
     116:	4b 7f       	andi	r20, 0xFB	; 251
          SaveEvent_m(settings, BUT_EV_DOUBLE_CLICK, BUT_DOUBLE_CLICK_CODE, event);
     118:	95 e0       	ldi	r25, 0x05	; 5
     11a:	04 c0       	rjmp	.+8      	; 0x124 <BUT_Check.constprop.0+0x9e>
       }
       else{
          countHoldTmp = 0;
     11c:	10 92 8b 00 	sts	0x008B, r1
          stateTmp |= FLAG_BUT_RELEASED;
     120:	44 60       	ori	r20, 0x04	; 4
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     122:	90 e0       	ldi	r25, 0x00	; 0
          countHoldTmp = 0;
          stateTmp |= FLAG_BUT_RELEASED;
       }    
     }       
 
     if (stateTmp & FLAG_BUT_RELEASED){   
     124:	42 ff       	sbrs	r20, 2
     126:	08 c0       	rjmp	.+16     	; 0x138 <BUT_Check.constprop.0+0xb2>
        if (countHoldTmp > BUT_COUNT_THR_2){
     128:	80 91 8b 00 	lds	r24, 0x008B
     12c:	85 36       	cpi	r24, 0x65	; 101
     12e:	20 f0       	brcs	.+8      	; 0x138 <BUT_Check.constprop.0+0xb2>
           countHoldTmp = 0;
     130:	10 92 8b 00 	sts	0x008B, r1
           stateTmp &= ~FLAG_BUT_RELEASED;
     134:	4b 7f       	andi	r20, 0xFB	; 251
  #if (BUT_RELEASED_EN == 1)   
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     136:	93 e0       	ldi	r25, 0x03	; 3
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
     138:	40 ff       	sbrs	r20, 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <BUT_Check.constprop.0+0xba>
     13c:	41 fd       	sbrc	r20, 1
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     13e:	94 e0       	ldi	r25, 0x04	; 4
     }
#endif     

     countDebTmp = 0;
     140:	10 92 91 00 	sts	0x0091, r1
     144:	10 92 90 00 	sts	0x0090, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     148:	4c 7f       	andi	r20, 0xFC	; 252
     14a:	01 c0       	rjmp	.+2      	; 0x14e <BUT_Check.constprop.0+0xc8>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     14c:	90 e0       	ldi	r25, 0x00	; 0
  }

 

#if (BUT_DOUBLE_CLICK_EN == 1)  
  if (stateTmp & FLAG_BUT_RELEASED){
     14e:	42 ff       	sbrs	r20, 2
     150:	07 c0       	rjmp	.+14     	; 0x160 <BUT_Check.constprop.0+0xda>
     if (countHoldTmp < BUT_COUNT_THR_2_MAX){
     152:	80 91 8b 00 	lds	r24, 0x008B
     156:	85 36       	cpi	r24, 0x65	; 101
     158:	18 f4       	brcc	.+6      	; 0x160 <BUT_Check.constprop.0+0xda>
        countHoldTmp++;
     15a:	8f 5f       	subi	r24, 0xFF	; 255
     15c:	80 93 8b 00 	sts	0x008B, r24
     }
  }
 
  countHold[i] = countHoldTmp;
     160:	80 91 8b 00 	lds	r24, 0x008B
     164:	80 83       	st	Z, r24
#endif       
  
  if (event){
     166:	99 23       	and	r25, r25
     168:	41 f0       	breq	.+16     	; 0x17a <BUT_Check.constprop.0+0xf4>
     PutBut(i+1);
     16a:	86 2f       	mov	r24, r22
     16c:	4a 83       	std	Y+2, r20	; 0x02
     16e:	99 83       	std	Y+1, r25	; 0x01
     170:	76 df       	rcall	.-276    	; 0x5e <PutBut>
     PutBut(event);
     172:	99 81       	ldd	r25, Y+1	; 0x01
     174:	89 2f       	mov	r24, r25
     176:	73 df       	rcall	.-282    	; 0x5e <PutBut>
     178:	4a 81       	ldd	r20, Y+2	; 0x02
  }
  
  countDeb[i] = countDebTmp;
     17a:	f8 01       	movw	r30, r16
     17c:	ee 56       	subi	r30, 0x6E	; 110
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 91 90 00 	lds	r24, 0x0090
     184:	90 91 91 00 	lds	r25, 0x0091
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     18c:	f7 01       	movw	r30, r14
     18e:	40 83       	st	Z, r20
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	08 95       	ret

000001a2 <BUT_GetBut>:

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    
  if (count){
     1a2:	20 91 7c 00 	lds	r18, 0x007C
     1a6:	22 23       	and	r18, r18
     1a8:	79 f0       	breq	.+30     	; 0x1c8 <BUT_GetBut+0x26>
     but = buf[tail];
     1aa:	90 91 7d 00 	lds	r25, 0x007D
     1ae:	e9 2f       	mov	r30, r25
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e1 58       	subi	r30, 0x81	; 129
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	80 81       	ld	r24, Z
     count--;
     1b8:	21 50       	subi	r18, 0x01	; 1
     1ba:	20 93 7c 00 	sts	0x007C, r18
     tail++;
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     1c0:	97 70       	andi	r25, 0x07	; 7
     1c2:	90 93 7d 00 	sts	0x007D, r25
     1c6:	08 95       	ret
  }
}

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     1ca:	08 95       	ret

000001cc <BUT_Init>:
}

/******************************************************/

void BUT_Init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	e2 e9       	ldi	r30, 0x92	; 146
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	c7 e8       	ldi	r28, 0x87	; 135
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	ac e8       	ldi	r26, 0x8C	; 140
     1da:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     1dc:	11 92       	st	Z+, r1
     1de:	11 92       	st	Z+, r1
     stateBut[i] = 0;
     1e0:	19 92       	st	Y+, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
     1e2:	1d 92       	st	X+, r1

void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	ea 39       	cpi	r30, 0x9A	; 154
     1e8:	f8 07       	cpc	r31, r24
     1ea:	c1 f7       	brne	.-16     	; 0x1dc <BUT_Init+0x10>
     1ec:	ef e7       	ldi	r30, 0x7F	; 127
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     1f0:	11 92       	st	Z+, r1
     countHold[i] = 0;
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	e7 38       	cpi	r30, 0x87	; 135
     1f6:	f8 07       	cpc	r31, r24
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <BUT_Init+0x24>
     buf[i] = 0;    
  }
  
  head = 0;
     1fa:	10 92 7e 00 	sts	0x007E, r1
  tail = 0;  
     1fe:	10 92 7d 00 	sts	0x007D, r1
  count = 0;
     202:	10 92 7c 00 	sts	0x007C, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     206:	89 98       	cbi	0x11, 1	; 17
     208:	91 98       	cbi	0x12, 1	; 18
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     20a:	8a 98       	cbi	0x11, 2	; 17
     20c:	92 98       	cbi	0x12, 2	; 18
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     20e:	8b 98       	cbi	0x11, 3	; 17
     210:	93 98       	cbi	0x12, 3	; 18
#endif  

#ifdef BUT_4_ID  
  ButtonInit_m(BUT_4_DDRX, BUT_4_PORTX, BUT_4_PIN, BUT_4_PULL);
     212:	88 98       	cbi	0x11, 0	; 17
     214:	90 98       	cbi	0x12, 0	; 18
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <BUT_Poll>:

/**********************************************/

void BUT_Poll(void)
{
     21c:	cf 93       	push	r28
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     21e:	80 b3       	in	r24, 0x10	; 16
     220:	c1 e0       	ldi	r28, 0x01	; 1
     222:	86 95       	lsr	r24
     224:	81 70       	andi	r24, 0x01	; 1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	8c 27       	eor	r24, r28
     22a:	2d df       	rcall	.-422    	; 0x86 <BUT_Check.constprop.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     22c:	80 b3       	in	r24, 0x10	; 16
     22e:	82 fb       	bst	r24, 2
     230:	88 27       	eor	r24, r24
     232:	80 f9       	bld	r24, 0
     234:	62 e0       	ldi	r22, 0x02	; 2
     236:	8c 27       	eor	r24, r28
     238:	26 df       	rcall	.-436    	; 0x86 <BUT_Check.constprop.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     23a:	80 b3       	in	r24, 0x10	; 16
     23c:	83 fb       	bst	r24, 3
     23e:	88 27       	eor	r24, r24
     240:	80 f9       	bld	r24, 0
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	8c 27       	eor	r24, r28
     246:	1f df       	rcall	.-450    	; 0x86 <BUT_Check.constprop.0>
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     248:	80 b3       	in	r24, 0x10	; 16
     24a:	81 70       	andi	r24, 0x01	; 1
     24c:	64 e0       	ldi	r22, 0x04	; 4
     24e:	8c 27       	eor	r24, r28
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
     250:	cf 91       	pop	r28
#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
#endif 
  
#ifdef BUT_4_ID  
  CheckOneBut_m(BUT_4_ID, BUT_4_PINX, BUT_4_PIN, BUT_4_LEV, BUT_4_EVENT, state);
     252:	19 cf       	rjmp	.-462    	; 0x86 <BUT_Check.constprop.0>

00000254 <timer1_led_init>:
	0b00010111, //SUNSET
};

void timer1_led_init(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     254:	8e b5       	in	r24, 0x2e	; 46
     256:	88 60       	ori	r24, 0x08	; 8
     258:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	80 61       	ori	r24, 0x10	; 16
     25e:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000101; //записываем в регистр число для сравнения
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11011100;
     264:	8c ed       	ldi	r24, 0xDC	; 220
     266:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
     268:	8e b5       	in	r24, 0x2e	; 46
     26a:	82 60       	ori	r24, 0x02	; 2
     26c:	8e bd       	out	0x2e, r24	; 46
     26e:	08 95       	ret

00000270 <setCharIndicator>:
}
//Установка символа
void setCharIndicator(unsigned char number,  unsigned char i){
	indicators[i] = number;
     270:	e6 2f       	mov	r30, r22
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ec 58       	subi	r30, 0x8C	; 140
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	80 83       	st	Z, r24
     27a:	08 95       	ret

0000027c <setDotIndicator>:
}
//Установка точки
void setDotIndicator(unsigned char i, unsigned char state){
	indicators_dots[i] = state;
     27c:	e8 2f       	mov	r30, r24
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e5 56       	subi	r30, 0x65	; 101
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 83       	st	Z, r22
     286:	08 95       	ret

00000288 <ClearALLDotsIndicator>:
}
//Очистка точек
void ClearALLDotsIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators_dots[i] = 0;
     288:	10 92 9b 00 	sts	0x009B, r1
     28c:	10 92 9c 00 	sts	0x009C, r1
     290:	10 92 9d 00 	sts	0x009D, r1
     294:	10 92 9e 00 	sts	0x009E, r1
     298:	10 92 9f 00 	sts	0x009F, r1
     29c:	10 92 a0 00 	sts	0x00A0, r1
     2a0:	08 95       	ret

000002a2 <ClearALLCharIndicator>:
}
//Очистка  всех индикаторов
void ClearALLCharIndicator(){
	for (unsigned char i = 0; i <= 5; i++)
	{
		indicators[i] = 11;
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	80 93 74 00 	sts	0x0074, r24
     2a8:	80 93 75 00 	sts	0x0075, r24
     2ac:	80 93 76 00 	sts	0x0076, r24
     2b0:	80 93 77 00 	sts	0x0077, r24
     2b4:	80 93 78 00 	sts	0x0078, r24
     2b8:	80 93 79 00 	sts	0x0079, r24
     2bc:	08 95       	ret

000002be <DisplayLED>:
	}
}
void DisplayLED(unsigned char number){
	    unsigned char char_temp = 0;
	    SPDR = ~(0b00000001 << number);
     2be:	48 2f       	mov	r20, r24
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	08 2e       	mov	r0, r24
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DisplayLED+0xe>
     2ca:	22 0f       	add	r18, r18
     2cc:	0a 94       	dec	r0
     2ce:	ea f7       	brpl	.-6      	; 0x2ca <DisplayLED+0xc>
     2d0:	20 95       	com	r18
     2d2:	2f b9       	out	0x0f, r18	; 15
        
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2d4:	77 9b       	sbis	0x0e, 7	; 14
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <DisplayLED+0x16>
		   //Разрешение вложенных прерываний 
	    };
	 //Запрет вложенных прерываний
		
		char_temp = segments[indicators[number]];
     2d8:	fa 01       	movw	r30, r20
     2da:	ec 58       	subi	r30, 0x8C	; 140
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	e0 81       	ld	r30, Z
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e0 5a       	subi	r30, 0xA0	; 160
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	80 81       	ld	r24, Z
		
		//Установка точки
	    if(indicators_dots[number]){ char_temp = char_temp | segments[12];}
     2e8:	fa 01       	movw	r30, r20
     2ea:	e5 56       	subi	r30, 0x65	; 101
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	90 81       	ld	r25, Z
     2f0:	99 23       	and	r25, r25
     2f2:	19 f0       	breq	.+6      	; 0x2fa <DisplayLED+0x3c>
     2f4:	90 91 6c 00 	lds	r25, 0x006C
     2f8:	89 2b       	or	r24, r25
	    	
	    SPDR = char_temp;
     2fa:	8f b9       	out	0x0f, r24	; 15
		
		//Передача
	    while(!(SPSR & (1<<SPIF))){
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <DisplayLED+0x3e>
		   
	    };
		
        //Строб защелки
	    PORTB |= (1 << 2);
     300:	c2 9a       	sbi	0x18, 2	; 24
	    PORTB &= ~(1 << 2);
     302:	c2 98       	cbi	0x18, 2	; 24
     304:	08 95       	ret

00000306 <__vector_6>:
	}
*/
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
    DisplayLED(dissplay);
     328:	80 91 9a 00 	lds	r24, 0x009A
     32c:	c8 df       	rcall	.-112    	; 0x2be <DisplayLED>
    dissplay++;
     32e:	80 91 9a 00 	lds	r24, 0x009A
     332:	8f 5f       	subi	r24, 0xFF	; 255
    if (dissplay > 5 ){ 
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	18 f4       	brcc	.+6      	; 0x33e <__vector_6+0x38>
	
unsigned char dissplay = 0;
ISR (TIMER1_COMPA_vect)
{
    DisplayLED(dissplay);
    dissplay++;
     338:	80 93 9a 00 	sts	0x009A, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_6+0x3c>
    if (dissplay > 5 ){ 
		dissplay = 0;
     33e:	10 92 9a 00 	sts	0x009A, r1
	}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <PWM_set.part.0>:
    }else if(channel == B){
	  blue = val;
    }else if(channel == W){
      white = val;
    }else if(channel == RGBW){
      red = val;
     364:	80 93 e2 00 	sts	0x00E2, r24
	  green = val;
     368:	80 93 a9 00 	sts	0x00A9, r24
	  blue = val;
     36c:	80 93 a8 00 	sts	0x00A8, r24
	  white = val;
     370:	80 93 a7 00 	sts	0x00A7, r24
     374:	08 95       	ret

00000376 <__vector_3>:

volatile char twoHZ_status = 0;
 
//Прерывание моргалки
ISR(TIMER2_COMP_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	 twoHZ--;
     384:	80 91 7a 00 	lds	r24, 0x007A
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 7a 00 	sts	0x007A, r24
	 if(!twoHZ){
     38e:	80 91 7a 00 	lds	r24, 0x007A
     392:	81 11       	cpse	r24, r1
     394:	0a c0       	rjmp	.+20     	; 0x3aa <__vector_3+0x34>
	    twoHZ_status = !twoHZ_status;
     396:	90 91 a1 00 	lds	r25, 0x00A1
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	91 11       	cpse	r25, r1
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	80 93 a1 00 	sts	0x00A1, r24
		twoHZ = 255;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	80 93 7a 00 	sts	0x007A, r24
	}
}
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_9>:

//Прерывание ШИМ
ISR (TIMER0_OVF_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
	count++;
     3c6:	80 91 a2 00 	lds	r24, 0x00A2
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	80 93 a2 00 	sts	0x00A2, r24
	if (count == 0){//Переполнение
     3d0:	81 11       	cpse	r24, r1
     3d2:	1e c0       	rjmp	.+60     	; 0x410 <__vector_9+0x58>
		
		//Сохранием значения в буфер
		red_b   = red; 
     3d4:	80 91 e2 00 	lds	r24, 0x00E2
     3d8:	80 93 a6 00 	sts	0x00A6, r24
		green_b = green;
     3dc:	90 91 a9 00 	lds	r25, 0x00A9
     3e0:	90 93 a5 00 	sts	0x00A5, r25
		blue_b  = blue;
     3e4:	90 91 a8 00 	lds	r25, 0x00A8
     3e8:	90 93 a4 00 	sts	0x00A4, r25
		white_b  = white;
     3ec:	90 91 a7 00 	lds	r25, 0x00A7
     3f0:	90 93 a3 00 	sts	0x00A3, r25
		
       //Высокий уровень, если не 0х00 что-бы не было засветки
	   if(red){
     3f4:	81 11       	cpse	r24, r1
	     PORT_R |= (1<<R);
     3f6:	95 9a       	sbi	0x12, 5	; 18
	   }
	   if(green){
     3f8:	80 91 a9 00 	lds	r24, 0x00A9
     3fc:	81 11       	cpse	r24, r1
	     PORT_G |= (1<<G);
     3fe:	96 9a       	sbi	0x12, 6	; 18
	   }
	   if(blue){
     400:	80 91 a8 00 	lds	r24, 0x00A8
     404:	81 11       	cpse	r24, r1
	     PORT_B |= (1<<B);
     406:	97 9a       	sbi	0x12, 7	; 18
	   }
	   if(white){
     408:	80 91 a7 00 	lds	r24, 0x00A7
     40c:	81 11       	cpse	r24, r1
	     PORT_W |= (1<<W);
     40e:	c0 9a       	sbi	0x18, 0	; 24
	   }
		
	}
	
	//Если достигли ширины импульса, низкий уровень
	if (red_b   == count) { PORT_R &=~ (1<<R);}
     410:	90 91 a6 00 	lds	r25, 0x00A6
     414:	80 91 a2 00 	lds	r24, 0x00A2
     418:	98 13       	cpse	r25, r24
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__vector_9+0x66>
     41c:	95 98       	cbi	0x12, 5	; 18
	if (green_b == count) { PORT_G &=~ (1<<G);}
     41e:	90 91 a5 00 	lds	r25, 0x00A5
     422:	80 91 a2 00 	lds	r24, 0x00A2
     426:	98 13       	cpse	r25, r24
     428:	01 c0       	rjmp	.+2      	; 0x42c <__vector_9+0x74>
     42a:	96 98       	cbi	0x12, 6	; 18
	if (blue_b  == count) {  PORT_B &=~ (1<<B);}
     42c:	90 91 a4 00 	lds	r25, 0x00A4
     430:	80 91 a2 00 	lds	r24, 0x00A2
     434:	98 13       	cpse	r25, r24
     436:	01 c0       	rjmp	.+2      	; 0x43a <__vector_9+0x82>
     438:	97 98       	cbi	0x12, 7	; 18
	if (white_b  == count) { 	PORT_W &= ~(1<<W);}
     43a:	90 91 a3 00 	lds	r25, 0x00A3
     43e:	80 91 a2 00 	lds	r24, 0x00A2
     442:	98 13       	cpse	r25, r24
     444:	01 c0       	rjmp	.+2      	; 0x448 <__vector_9+0x90>
     446:	c0 98       	cbi	0x18, 0	; 24
}
     448:	9f 91       	pop	r25
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <led_strob>:
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

//Строб светодиода кнопки
void led_strob(){
	BUTTON_SPROB_LED_PORT |= (1 << BUTTON_SPROB_LED_PIN);
     456:	c6 9a       	sbi	0x18, 6	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	80 e7       	ldi	r24, 0x70	; 112
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <led_strob+0x8>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__stack+0x9>
     468:	00 00       	nop
	_delay_ms(100);
	BUTTON_SPROB_LED_PORT &= ~(1 << BUTTON_SPROB_LED_PIN);
     46a:	c6 98       	cbi	0x18, 6	; 24
     46c:	08 95       	ret

0000046e <SPI_init>:
}

//SPI инициализация 
void SPI_init(void)
{
	SHIFT_REG_DDR |= ((1<<DATA)|(1<<SCL));
     46e:	87 b3       	in	r24, 0x17	; 23
     470:	88 62       	ori	r24, 0x28	; 40
     472:	87 bb       	out	0x17, r24	; 23
	SHIFT_REG_PORT &= ~((1<<DATA)|(1<<SCL));
     474:	88 b3       	in	r24, 0x18	; 24
     476:	87 7d       	andi	r24, 0xD7	; 215
     478:	88 bb       	out	0x18, r24	; 24
	SHIFT_REG_DDR |= (1<<LATCH) ;
     47a:	ba 9a       	sbi	0x17, 2	; 23
	SHIFT_REG_PORT &=~ (1 << LATCH);
     47c:	c2 98       	cbi	0x18, 2	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//Включение, режим MASTER
     47e:	80 e5       	ldi	r24, 0x50	; 80
     480:	8d b9       	out	0x0d, r24	; 13
     482:	08 95       	ret

00000484 <PWM_init>:
}

//PWM инициализация 
void PWM_init(){
	DDR_R |= (1<<R);
     484:	8d 9a       	sbi	0x11, 5	; 17
	DDR_G |= (1<<G);
     486:	8e 9a       	sbi	0x11, 6	; 17
	DDR_B |= (1<<B);
     488:	8f 9a       	sbi	0x11, 7	; 17
	DDR_W |= (1<<W);
     48a:	b8 9a       	sbi	0x17, 0	; 23
	
	PORT_R &= ~(1<<R);
     48c:	95 98       	cbi	0x12, 5	; 18
	PORT_G &= ~(1<<G);
     48e:	96 98       	cbi	0x12, 6	; 18
	PORT_B &= ~(1<<B);
     490:	97 98       	cbi	0x12, 7	; 18
	PORT_W &= ~(1<<W);
     492:	c0 98       	cbi	0x18, 0	; 24

	DDRB &= ~(1<<PB7);
     494:	bf 98       	cbi	0x17, 7	; 23
    TCCR0 |= (1 << CS10);
     496:	83 b7       	in	r24, 0x33	; 51
     498:	81 60       	ori	r24, 0x01	; 1
     49a:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 0x00;
     49c:	12 be       	out	0x32, r1	; 50
    TIMSK |= (1 << TOIE0);
     49e:	89 b7       	in	r24, 0x39	; 57
     4a0:	81 60       	ori	r24, 0x01	; 1
     4a2:	89 bf       	out	0x39, r24	; 57
     4a4:	08 95       	ret

000004a6 <ModifyRTC>:
}

//Настройки времени
void ModifyRTC(void)
{
	I2C_StartCondition();
     4a6:	d9 d5       	rcall	.+2994   	; 0x105a <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     4a8:	80 ed       	ldi	r24, 0xD0	; 208
     4aa:	e0 d5       	rcall	.+3008   	; 0x106c <I2C_SendByte>
	switch(now_mode){
     4ac:	80 91 bf 00 	lds	r24, 0x00BF
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	19 f0       	breq	.+6      	; 0x4ba <ModifyRTC+0x14>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	61 f1       	breq	.+88     	; 0x510 <ModifyRTC+0x6a>
     4b8:	55 c0       	rjmp	.+170    	; 0x564 <ModifyRTC+0xbe>
		case MODE_EDIT_HOURS: //часы
			I2C_SendByte(2);//Переходим на 0x02 - байт часов
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	d7 d5       	rcall	.+2990   	; 0x106c <I2C_SendByte>
			if(increment_mode == MODE_INC){
     4be:	80 91 be 00 	lds	r24, 0x00BE
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	89 f4       	brne	.+34     	; 0x4e8 <ModifyRTC+0x42>
			  if(hour<23){ 
     4c6:	80 91 d8 00 	lds	r24, 0x00D8
     4ca:	87 31       	cpi	r24, 0x17	; 23
     4cc:	38 f4       	brcc	.+14     	; 0x4dc <ModifyRTC+0x36>
				  I2C_SendByte(RTC_ConvertFromBinDec(hour+1));
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	b8 d5       	rcall	.+2928   	; 0x1042 <RTC_ConvertFromBinDec>
     4d2:	cc d5       	rcall	.+2968   	; 0x106c <I2C_SendByte>
				  hour++;
     4d4:	80 91 d8 00 	lds	r24, 0x00D8
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	12 c0       	rjmp	.+36     	; 0x500 <ModifyRTC+0x5a>
			  }else{ 
				  I2C_SendByte(RTC_ConvertFromBinDec(0));
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	b1 d5       	rcall	.+2914   	; 0x1042 <RTC_ConvertFromBinDec>
     4e0:	c5 d5       	rcall	.+2954   	; 0x106c <I2C_SendByte>
				  hour = 0;
     4e2:	10 92 d8 00 	sts	0x00D8, r1
     4e6:	3e c0       	rjmp	.+124    	; 0x564 <ModifyRTC+0xbe>
			  }
			}else if(increment_mode == MODE_DISINC){
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	e1 f5       	brne	.+120    	; 0x564 <ModifyRTC+0xbe>
			  if(hour>0){
     4ec:	80 91 d8 00 	lds	r24, 0x00D8
     4f0:	88 23       	and	r24, r24
     4f2:	49 f0       	breq	.+18     	; 0x506 <ModifyRTC+0x60>
			    I2C_SendByte(RTC_ConvertFromBinDec(hour-1));
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	a5 d5       	rcall	.+2890   	; 0x1042 <RTC_ConvertFromBinDec>
     4f8:	b9 d5       	rcall	.+2930   	; 0x106c <I2C_SendByte>
				hour--;
     4fa:	80 91 d8 00 	lds	r24, 0x00D8
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	80 93 d8 00 	sts	0x00D8, r24
     504:	2f c0       	rjmp	.+94     	; 0x564 <ModifyRTC+0xbe>
			  }else{ 
				I2C_SendByte(RTC_ConvertFromBinDec(23));
     506:	87 e1       	ldi	r24, 0x17	; 23
     508:	9c d5       	rcall	.+2872   	; 0x1042 <RTC_ConvertFromBinDec>
     50a:	b0 d5       	rcall	.+2912   	; 0x106c <I2C_SendByte>
				hour = 23;
     50c:	87 e1       	ldi	r24, 0x17	; 23
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <ModifyRTC+0x5a>
			}
			
		break;
		
		case MODE_EDIT_MINUTES: // минуты
			I2C_SendByte(1);//Переходим на 0x01 - байт минут
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	ac d5       	rcall	.+2904   	; 0x106c <I2C_SendByte>
			if(increment_mode == MODE_INC){
     514:	80 91 be 00 	lds	r24, 0x00BE
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	89 f4       	brne	.+34     	; 0x53e <ModifyRTC+0x98>
             if(min<59){ 
     51c:	80 91 d9 00 	lds	r24, 0x00D9
     520:	8b 33       	cpi	r24, 0x3B	; 59
     522:	38 f4       	brcc	.+14     	; 0x532 <ModifyRTC+0x8c>
				 I2C_SendByte(RTC_ConvertFromBinDec(min+1));
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	8d d5       	rcall	.+2842   	; 0x1042 <RTC_ConvertFromBinDec>
     528:	a1 d5       	rcall	.+2882   	; 0x106c <I2C_SendByte>
				 min++;
     52a:	80 91 d9 00 	lds	r24, 0x00D9
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	17 c0       	rjmp	.+46     	; 0x560 <ModifyRTC+0xba>
             }else{ 
				 I2C_SendByte(RTC_ConvertFromBinDec(0));
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	86 d5       	rcall	.+2828   	; 0x1042 <RTC_ConvertFromBinDec>
     536:	9a d5       	rcall	.+2868   	; 0x106c <I2C_SendByte>
				 min = 0;
     538:	10 92 d9 00 	sts	0x00D9, r1
     53c:	13 c0       	rjmp	.+38     	; 0x564 <ModifyRTC+0xbe>
			 }
		    }else if(increment_mode == MODE_DISINC){
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	89 f4       	brne	.+34     	; 0x564 <ModifyRTC+0xbe>
				if(min>0){ 
     542:	80 91 d9 00 	lds	r24, 0x00D9
     546:	88 23       	and	r24, r24
     548:	39 f0       	breq	.+14     	; 0x558 <ModifyRTC+0xb2>
					I2C_SendByte(RTC_ConvertFromBinDec(min-1));
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	7a d5       	rcall	.+2804   	; 0x1042 <RTC_ConvertFromBinDec>
     54e:	8e d5       	rcall	.+2844   	; 0x106c <I2C_SendByte>
					min--;
     550:	80 91 d9 00 	lds	r24, 0x00D9
     554:	81 50       	subi	r24, 0x01	; 1
     556:	04 c0       	rjmp	.+8      	; 0x560 <ModifyRTC+0xba>
				}else{ 
					I2C_SendByte(RTC_ConvertFromBinDec(59));
     558:	8b e3       	ldi	r24, 0x3B	; 59
     55a:	73 d5       	rcall	.+2790   	; 0x1042 <RTC_ConvertFromBinDec>
     55c:	87 d5       	rcall	.+2830   	; 0x106c <I2C_SendByte>
					min = 59;
     55e:	8b e3       	ldi	r24, 0x3B	; 59
     560:	80 93 d9 00 	sts	0x00D9, r24
				}
			}
	    break;
*/
	}
	I2C_StopCondition();
     564:	80 c5       	rjmp	.+2816   	; 0x1066 <I2C_StopCondition>

00000566 <ModifyLEDMenu>:
}

//Настройка рассвета/заката
void ModifyLEDMenu(void)
{
	switch(now_mode_led_menu){
     566:	80 91 bc 00 	lds	r24, 0x00BC
     56a:	90 91 bd 00 	lds	r25, 0x00BD
     56e:	89 30       	cpi	r24, 0x09	; 9
     570:	91 05       	cpc	r25, r1
     572:	09 f4       	brne	.+2      	; 0x576 <ModifyLEDMenu+0x10>
     574:	5e c0       	rjmp	.+188    	; 0x632 <ModifyLEDMenu+0xcc>
     576:	30 f4       	brcc	.+12     	; 0x584 <ModifyLEDMenu+0x1e>
     578:	87 30       	cpi	r24, 0x07	; 7
     57a:	91 05       	cpc	r25, r1
     57c:	69 f0       	breq	.+26     	; 0x598 <ModifyLEDMenu+0x32>
     57e:	08 97       	sbiw	r24, 0x08	; 8
     580:	89 f1       	breq	.+98     	; 0x5e4 <ModifyLEDMenu+0x7e>
     582:	08 95       	ret
     584:	8b 30       	cpi	r24, 0x0B	; 11
     586:	91 05       	cpc	r25, r1
     588:	09 f4       	brne	.+2      	; 0x58c <ModifyLEDMenu+0x26>
     58a:	9f c0       	rjmp	.+318    	; 0x6ca <ModifyLEDMenu+0x164>
     58c:	08 f4       	brcc	.+2      	; 0x590 <ModifyLEDMenu+0x2a>
     58e:	77 c0       	rjmp	.+238    	; 0x67e <ModifyLEDMenu+0x118>
     590:	0c 97       	sbiw	r24, 0x0c	; 12
     592:	09 f4       	brne	.+2      	; 0x596 <ModifyLEDMenu+0x30>
     594:	c0 c0       	rjmp	.+384    	; 0x716 <ModifyLEDMenu+0x1b0>
     596:	08 95       	ret
		    case MODE_EDIT_START_TIME_DAWN_HOURS: // день недели
			    if(increment_mode_led_menu == MODE_INC){
     598:	80 91 ba 00 	lds	r24, 0x00BA
     59c:	90 91 bb 00 	lds	r25, 0x00BB
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	91 05       	cpc	r25, r1
     5a4:	81 f4       	brne	.+32     	; 0x5c6 <ModifyLEDMenu+0x60>
					if(led_menu_dawn_hours<10) led_menu_dawn_hours++;
     5a6:	80 91 ca 00 	lds	r24, 0x00CA
     5aa:	90 91 cb 00 	lds	r25, 0x00CB
     5ae:	8a 30       	cpi	r24, 0x0A	; 10
     5b0:	91 05       	cpc	r25, r1
     5b2:	10 f4       	brcc	.+4      	; 0x5b8 <ModifyLEDMenu+0x52>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 3;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 cb 00 	sts	0x00CB, r25
     5c0:	80 93 ca 00 	sts	0x00CA, r24
     5c4:	08 95       	ret
				}else if(increment_mode_led_menu == MODE_DISINC){
     5c6:	02 97       	sbiw	r24, 0x02	; 2
     5c8:	09 f0       	breq	.+2      	; 0x5cc <ModifyLEDMenu+0x66>
     5ca:	c9 c0       	rjmp	.+402    	; 0x75e <ModifyLEDMenu+0x1f8>
					if(led_menu_dawn_hours>4) led_menu_dawn_hours--;
     5cc:	80 91 ca 00 	lds	r24, 0x00CA
     5d0:	90 91 cb 00 	lds	r25, 0x00CB
     5d4:	85 30       	cpi	r24, 0x05	; 5
     5d6:	91 05       	cpc	r25, r1
     5d8:	10 f0       	brcs	.+4      	; 0x5de <ModifyLEDMenu+0x78>
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	ef cf       	rjmp	.-34     	; 0x5bc <ModifyLEDMenu+0x56>
					else led_menu_dawn_hours = 10;
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	ec cf       	rjmp	.-40     	; 0x5bc <ModifyLEDMenu+0x56>
			    }
			break;
			
		    case MODE_EDIT_START_TIME_DAWN_MINS: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     5e4:	80 91 ba 00 	lds	r24, 0x00BA
     5e8:	90 91 bb 00 	lds	r25, 0x00BB
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	91 05       	cpc	r25, r1
     5f0:	71 f4       	brne	.+28     	; 0x60e <ModifyLEDMenu+0xa8>
					 if(led_menu_dawn_mins<59) led_menu_dawn_mins++;
     5f2:	80 91 c8 00 	lds	r24, 0x00C8
     5f6:	90 91 c9 00 	lds	r25, 0x00C9
     5fa:	8b 33       	cpi	r24, 0x3B	; 59
     5fc:	91 05       	cpc	r25, r1
     5fe:	10 f4       	brcc	.+4      	; 0x604 <ModifyLEDMenu+0x9e>
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	0f c0       	rjmp	.+30     	; 0x622 <ModifyLEDMenu+0xbc>
					 else led_menu_dawn_mins = 0;
     604:	10 92 c9 00 	sts	0x00C9, r1
     608:	10 92 c8 00 	sts	0x00C8, r1
     60c:	08 95       	ret
				 }else if(increment_mode_led_menu == MODE_DISINC){
     60e:	02 97       	sbiw	r24, 0x02	; 2
     610:	09 f0       	breq	.+2      	; 0x614 <ModifyLEDMenu+0xae>
     612:	a5 c0       	rjmp	.+330    	; 0x75e <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_mins>0) led_menu_dawn_mins--;
     614:	80 91 c8 00 	lds	r24, 0x00C8
     618:	90 91 c9 00 	lds	r25, 0x00C9
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	31 f0       	breq	.+12     	; 0x62c <ModifyLEDMenu+0xc6>
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	90 93 c9 00 	sts	0x00C9, r25
     626:	80 93 c8 00 	sts	0x00C8, r24
     62a:	08 95       	ret
					 else led_menu_dawn_mins = 59;
     62c:	8b e3       	ldi	r24, 0x3B	; 59
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	f8 cf       	rjmp	.-16     	; 0x622 <ModifyLEDMenu+0xbc>
				 }
		    break;
			
			case MODE_EDIT_INTERVAL_DAWN: // день недели
				 if(increment_mode_led_menu == MODE_INC){
     632:	80 91 ba 00 	lds	r24, 0x00BA
     636:	90 91 bb 00 	lds	r25, 0x00BB
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	91 05       	cpc	r25, r1
     63e:	61 f4       	brne	.+24     	; 0x658 <ModifyLEDMenu+0xf2>
					 if(led_menu_dawn_interval_mins<120) led_menu_dawn_interval_mins += 15;
     640:	80 91 c6 00 	lds	r24, 0x00C6
     644:	90 91 c7 00 	lds	r25, 0x00C7
     648:	88 37       	cpi	r24, 0x78	; 120
     64a:	91 05       	cpc	r25, r1
     64c:	10 f4       	brcc	.+4      	; 0x652 <ModifyLEDMenu+0xec>
     64e:	0f 96       	adiw	r24, 0x0f	; 15
     650:	11 c0       	rjmp	.+34     	; 0x674 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 15;
     652:	8f e0       	ldi	r24, 0x0F	; 15
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e c0       	rjmp	.+28     	; 0x674 <ModifyLEDMenu+0x10e>
					 }else if(increment_mode_led_menu == MODE_DISINC){
     658:	02 97       	sbiw	r24, 0x02	; 2
     65a:	09 f0       	breq	.+2      	; 0x65e <ModifyLEDMenu+0xf8>
     65c:	80 c0       	rjmp	.+256    	; 0x75e <ModifyLEDMenu+0x1f8>
					 if(led_menu_dawn_interval_mins>15) led_menu_dawn_interval_mins -= 15;
     65e:	80 91 c6 00 	lds	r24, 0x00C6
     662:	90 91 c7 00 	lds	r25, 0x00C7
     666:	80 31       	cpi	r24, 0x10	; 16
     668:	91 05       	cpc	r25, r1
     66a:	10 f0       	brcs	.+4      	; 0x670 <ModifyLEDMenu+0x10a>
     66c:	0f 97       	sbiw	r24, 0x0f	; 15
     66e:	02 c0       	rjmp	.+4      	; 0x674 <ModifyLEDMenu+0x10e>
					 else led_menu_dawn_interval_mins = 120;
     670:	88 e7       	ldi	r24, 0x78	; 120
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	90 93 c7 00 	sts	0x00C7, r25
     678:	80 93 c6 00 	sts	0x00C6, r24
     67c:	08 95       	ret
				 }
		    break;
			
		    case MODE_EDIT_START_TIME_SUNSET_HOURS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     67e:	80 91 ba 00 	lds	r24, 0x00BA
     682:	90 91 bb 00 	lds	r25, 0x00BB
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	61 f4       	brne	.+24     	; 0x6a4 <ModifyLEDMenu+0x13e>
			    if(led_menu_sunset_hours<21) led_menu_sunset_hours++;
     68c:	80 91 c4 00 	lds	r24, 0x00C4
     690:	90 91 c5 00 	lds	r25, 0x00C5
     694:	85 31       	cpi	r24, 0x15	; 21
     696:	91 05       	cpc	r25, r1
     698:	10 f4       	brcc	.+4      	; 0x69e <ModifyLEDMenu+0x138>
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	11 c0       	rjmp	.+34     	; 0x6c0 <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 13;
     69e:	8d e0       	ldi	r24, 0x0D	; 13
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <ModifyLEDMenu+0x15a>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     6a4:	02 97       	sbiw	r24, 0x02	; 2
     6a6:	09 f0       	breq	.+2      	; 0x6aa <ModifyLEDMenu+0x144>
     6a8:	5a c0       	rjmp	.+180    	; 0x75e <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_hours>13) led_menu_sunset_hours--;
     6aa:	80 91 c4 00 	lds	r24, 0x00C4
     6ae:	90 91 c5 00 	lds	r25, 0x00C5
     6b2:	8e 30       	cpi	r24, 0x0E	; 14
     6b4:	91 05       	cpc	r25, r1
     6b6:	10 f0       	brcs	.+4      	; 0x6bc <ModifyLEDMenu+0x156>
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <ModifyLEDMenu+0x15a>
			    else led_menu_sunset_hours = 21;
     6bc:	85 e1       	ldi	r24, 0x15	; 21
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 c5 00 	sts	0x00C5, r25
     6c4:	80 93 c4 00 	sts	0x00C4, r24
     6c8:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_START_TIME_SUNSET_MINS: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     6ca:	80 91 ba 00 	lds	r24, 0x00BA
     6ce:	90 91 bb 00 	lds	r25, 0x00BB
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	71 f4       	brne	.+28     	; 0x6f4 <ModifyLEDMenu+0x18e>
			    if(led_menu_sunset_mins<59) led_menu_sunset_mins++;
     6d8:	80 91 c2 00 	lds	r24, 0x00C2
     6dc:	90 91 c3 00 	lds	r25, 0x00C3
     6e0:	8b 33       	cpi	r24, 0x3B	; 59
     6e2:	91 05       	cpc	r25, r1
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <ModifyLEDMenu+0x184>
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	11 c0       	rjmp	.+34     	; 0x70c <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 0;
     6ea:	10 92 c3 00 	sts	0x00C3, r1
     6ee:	10 92 c2 00 	sts	0x00C2, r1
     6f2:	08 95       	ret
			    }else if(increment_mode_led_menu == MODE_DISINC){
     6f4:	02 97       	sbiw	r24, 0x02	; 2
     6f6:	99 f5       	brne	.+102    	; 0x75e <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_mins>0) led_menu_sunset_mins--;
     6f8:	80 91 c2 00 	lds	r24, 0x00C2
     6fc:	90 91 c3 00 	lds	r25, 0x00C3
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	11 f0       	breq	.+4      	; 0x708 <ModifyLEDMenu+0x1a2>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	02 c0       	rjmp	.+4      	; 0x70c <ModifyLEDMenu+0x1a6>
			    else led_menu_sunset_mins = 59;
     708:	8b e3       	ldi	r24, 0x3B	; 59
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 c3 00 	sts	0x00C3, r25
     710:	80 93 c2 00 	sts	0x00C2, r24
     714:	08 95       	ret
		    }
		    break;
		    
		    case MODE_EDIT_INTERVAL_SUNSET: // день недели
		    if(increment_mode_led_menu == MODE_INC){
     716:	80 91 ba 00 	lds	r24, 0x00BA
     71a:	90 91 bb 00 	lds	r25, 0x00BB
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	61 f4       	brne	.+24     	; 0x73c <ModifyLEDMenu+0x1d6>
			    if(led_menu_sunset_interval_mins<120) led_menu_sunset_interval_mins += 15;
     724:	80 91 c0 00 	lds	r24, 0x00C0
     728:	90 91 c1 00 	lds	r25, 0x00C1
     72c:	88 37       	cpi	r24, 0x78	; 120
     72e:	91 05       	cpc	r25, r1
     730:	10 f4       	brcc	.+4      	; 0x736 <ModifyLEDMenu+0x1d0>
     732:	0f 96       	adiw	r24, 0x0f	; 15
     734:	10 c0       	rjmp	.+32     	; 0x756 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 15;
     736:	8f e0       	ldi	r24, 0x0F	; 15
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0d c0       	rjmp	.+26     	; 0x756 <ModifyLEDMenu+0x1f0>
			    }else if(increment_mode_led_menu == MODE_DISINC){
     73c:	02 97       	sbiw	r24, 0x02	; 2
     73e:	79 f4       	brne	.+30     	; 0x75e <ModifyLEDMenu+0x1f8>
			    if(led_menu_sunset_interval_mins>15) led_menu_sunset_interval_mins -= 15;
     740:	80 91 c0 00 	lds	r24, 0x00C0
     744:	90 91 c1 00 	lds	r25, 0x00C1
     748:	80 31       	cpi	r24, 0x10	; 16
     74a:	91 05       	cpc	r25, r1
     74c:	10 f0       	brcs	.+4      	; 0x752 <ModifyLEDMenu+0x1ec>
     74e:	0f 97       	sbiw	r24, 0x0f	; 15
     750:	02 c0       	rjmp	.+4      	; 0x756 <ModifyLEDMenu+0x1f0>
			    else led_menu_sunset_interval_mins = 120;
     752:	88 e7       	ldi	r24, 0x78	; 120
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 c1 00 	sts	0x00C1, r25
     75a:	80 93 c0 00 	sts	0x00C0, r24
     75e:	08 95       	ret

00000760 <ShowTime>:
		    break;
	}

}

void ShowTime(unsigned char hour, unsigned char min){
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	1f 92       	push	r1
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	06 2f       	mov	r16, r22
	setCharIndicator(hour/10, 1);
     770:	1a e0       	ldi	r17, 0x0A	; 10
     772:	61 2f       	mov	r22, r17
     774:	a4 d4       	rcall	.+2376   	; 0x10be <__udivmodqi4>
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	99 83       	std	Y+1, r25	; 0x01
     77a:	7a dd       	rcall	.-1292   	; 0x270 <setCharIndicator>
	setCharIndicator(hour%10, 2);
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	99 81       	ldd	r25, Y+1	; 0x01
     780:	89 2f       	mov	r24, r25
     782:	76 dd       	rcall	.-1300   	; 0x270 <setCharIndicator>
	
	setCharIndicator(min/10, 3);
     784:	80 2f       	mov	r24, r16
     786:	61 2f       	mov	r22, r17
     788:	9a d4       	rcall	.+2356   	; 0x10be <__udivmodqi4>
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	99 83       	std	Y+1, r25	; 0x01
     78e:	70 dd       	rcall	.-1312   	; 0x270 <setCharIndicator>
	setCharIndicator(min%10, 4);
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	89 2f       	mov	r24, r25
}
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
void ShowTime(unsigned char hour, unsigned char min){
	setCharIndicator(hour/10, 1);
	setCharIndicator(hour%10, 2);
	
	setCharIndicator(min/10, 3);
	setCharIndicator(min%10, 4);
     7a0:	67 cd       	rjmp	.-1330   	; 0x270 <setCharIndicator>

000007a2 <main>:
	setCharIndicator(year/10, 4);
	setCharIndicator(year%10, 5);
}

int main(void)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
	//Инициализация перефирии
	I2C_Init();
     7ac:	53 d4       	rcall	.+2214   	; 0x1054 <I2C_Init>
	PWM_init();
     7ae:	6a de       	rcall	.-812    	; 0x484 <PWM_init>
	BUT_Init();
     7b0:	0d dd       	rcall	.-1510   	; 0x1cc <BUT_Init>
	BUTTON_SPROB_LED_DDR |= (1 << BUTTON_SPROB_LED_PIN);
     7b2:	be 9a       	sbi	0x17, 6	; 23
	
	SPI_init();
     7b4:	5c de       	rcall	.-840    	; 0x46e <SPI_init>
	timer1_led_init();
     7b6:	4e dd       	rcall	.-1380   	; 0x254 <timer1_led_init>
	
	//на случай если зависнет мк, то при подаче питания свет будет включен
	PORT_R |= (1<<R);
     7b8:	95 9a       	sbi	0x12, 5	; 18
	PORT_G |= (1<<G);
     7ba:	96 9a       	sbi	0x12, 6	; 18
	PORT_B |= (1<<B);
     7bc:	97 9a       	sbi	0x12, 7	; 18
	PORT_W |= (1<<W);
     7be:	c0 9a       	sbi	0x18, 0	; 24
	
    sei(); 
     7c0:	78 94       	sei
	
	//1Hz generator
	DDRC &= ~(1 << PC3);
     7c2:	a3 98       	cbi	0x14, 3	; 20
	I2C_StartCondition();
     7c4:	4a d4       	rcall	.+2196   	; 0x105a <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     7c6:	80 ed       	ldi	r24, 0xD0	; 208
     7c8:	51 d4       	rcall	.+2210   	; 0x106c <I2C_SendByte>
	I2C_SendByte(7);//Переходим на 0x07
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	4f d4       	rcall	.+2206   	; 0x106c <I2C_SendByte>
	I2C_SendByte(0b00010000); //включим SQWE
     7ce:	80 e1       	ldi	r24, 0x10	; 16
     7d0:	4d d4       	rcall	.+2202   	; 0x106c <I2C_SendByte>
	I2C_StopCondition();
     7d2:	49 d4       	rcall	.+2194   	; 0x1066 <I2C_StopCondition>
	

    OCR2 = 255;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	83 bd       	out	0x23, r24	; 35

    TCCR2 |= (1 << WGM21);
     7d8:	85 b5       	in	r24, 0x25	; 37
     7da:	88 60       	ori	r24, 0x08	; 8
     7dc:	85 bd       	out	0x25, r24	; 37
    // Set to CTC Mode

    TIMSK |= (1 << OCIE2);
     7de:	89 b7       	in	r24, 0x39	; 57
     7e0:	80 68       	ori	r24, 0x80	; 128
     7e2:	89 bf       	out	0x39, r24	; 57
    //Set interrupt on compare match

    TCCR2 |= ((1 << CS21) | (1 << CS20) | (1 << CS20));
     7e4:	85 b5       	in	r24, 0x25	; 37
     7e6:	83 60       	ori	r24, 0x03	; 3
     7e8:	85 bd       	out	0x25, r24	; 37
    // set prescaler to 64 and starts PWM
	
	
	//Восстанавливаем значения из EEPOM
	led_menu_dawn_hours = eeprom_read_word(&ee_led_menu_dawn_hours);
     7ea:	8a e0       	ldi	r24, 0x0A	; 10
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	f4 d4       	rcall	.+2536   	; 0x11d8 <__eerd_word_m8a>
     7f0:	90 93 cb 00 	sts	0x00CB, r25
     7f4:	80 93 ca 00 	sts	0x00CA, r24
	led_menu_dawn_mins = eeprom_read_word(&ee_led_menu_dawn_mins);
     7f8:	88 e0       	ldi	r24, 0x08	; 8
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	ed d4       	rcall	.+2522   	; 0x11d8 <__eerd_word_m8a>
     7fe:	90 93 c9 00 	sts	0x00C9, r25
     802:	80 93 c8 00 	sts	0x00C8, r24
	led_menu_dawn_interval_mins = eeprom_read_word(&ee_led_menu_dawn_interval_mins);
     806:	86 e0       	ldi	r24, 0x06	; 6
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	e6 d4       	rcall	.+2508   	; 0x11d8 <__eerd_word_m8a>
     80c:	90 93 c7 00 	sts	0x00C7, r25
     810:	80 93 c6 00 	sts	0x00C6, r24
	led_menu_sunset_hours = eeprom_read_word(&ee_led_menu_sunset_hours);
     814:	84 e0       	ldi	r24, 0x04	; 4
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	df d4       	rcall	.+2494   	; 0x11d8 <__eerd_word_m8a>
     81a:	90 93 c5 00 	sts	0x00C5, r25
     81e:	80 93 c4 00 	sts	0x00C4, r24
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	d8 d4       	rcall	.+2480   	; 0x11d8 <__eerd_word_m8a>
     828:	90 93 c3 00 	sts	0x00C3, r25
     82c:	80 93 c2 00 	sts	0x00C2, r24
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	d1 d4       	rcall	.+2466   	; 0x11d8 <__eerd_word_m8a>
     836:	90 93 c1 00 	sts	0x00C1, r25
     83a:	80 93 c0 00 	sts	0x00C0, r24
	{   	  //Принудительное включение 
				if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
				if((PINB & (1 << PB7))){	
								//Супер дупер крутой рассвет и закат
								
								all_time_in_sec = (((long)hour * 60) + (long)min)*60 + (long)sec;
     83e:	4c e3       	ldi	r20, 0x3C	; 60
     840:	84 2e       	mov	r8, r20
     842:	91 2c       	mov	r9, r1
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, 255, 10));
												now_mode_light = LIGHT_SUNSET;
     844:	52 e0       	ldi	r21, 0x02	; 2
     846:	25 2e       	mov	r2, r21
     848:	31 2c       	mov	r3, r1
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, 255));
										now_mode_light = LIGHT_DAWM;
     84a:	aa 24       	eor	r10, r10
     84c:	a3 94       	inc	r10
     84e:	b1 2c       	mov	r11, r1
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     850:	04 e6       	ldi	r16, 0x64	; 100
     852:	10 e0       	ldi	r17, 0x00	; 0
	led_menu_sunset_mins = eeprom_read_word(&ee_led_menu_sunset_mins);
    led_menu_sunset_interval_mins = eeprom_read_word(&ee_led_menu_sunset_interval_mins);
	
	while(1)
	{   	  //Принудительное включение 
				if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     854:	80 91 bc 00 	lds	r24, 0x00BC
     858:	90 91 bd 00 	lds	r25, 0x00BD
     85c:	89 2b       	or	r24, r25
     85e:	09 f0       	breq	.+2      	; 0x862 <main+0xc0>
     860:	52 c1       	rjmp	.+676    	; 0xb06 <main+0x364>
     862:	80 91 bf 00 	lds	r24, 0x00BF
     866:	81 11       	cpse	r24, r1
     868:	4e c1       	rjmp	.+668    	; 0xb06 <main+0x364>
				if((PINB & (1 << PB7))){	
     86a:	b7 9b       	sbis	0x16, 7	; 22
     86c:	01 c1       	rjmp	.+514    	; 0xa70 <main+0x2ce>
								//Супер дупер крутой рассвет и закат
								
								all_time_in_sec = (((long)hour * 60) + (long)min)*60 + (long)sec;
     86e:	20 91 d8 00 	lds	r18, 0x00D8
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	ac e3       	ldi	r26, 0x3C	; 60
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	71 d4       	rcall	.+2274   	; 0x115c <__umulhisi3>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	80 91 d9 00 	lds	r24, 0x00D9
     882:	28 0f       	add	r18, r24
     884:	31 1d       	adc	r19, r1
     886:	41 1d       	adc	r20, r1
     888:	51 1d       	adc	r21, r1
     88a:	74 d4       	rcall	.+2280   	; 0x1174 <__muluhisi3>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
     890:	80 91 da 00 	lds	r24, 0x00DA
     894:	c8 0e       	add	r12, r24
     896:	d1 1c       	adc	r13, r1
     898:	e1 1c       	adc	r14, r1
     89a:	f1 1c       	adc	r15, r1
     89c:	c0 92 b2 00 	sts	0x00B2, r12
     8a0:	d0 92 b3 00 	sts	0x00B3, r13
     8a4:	e0 92 b4 00 	sts	0x00B4, r14
     8a8:	f0 92 b5 00 	sts	0x00B5, r15
								all_time_in_sec_dawn = ((long)led_menu_dawn_hours * 60 * 60) + ((long)led_menu_dawn_mins * 60);
     8ac:	20 91 ca 00 	lds	r18, 0x00CA
     8b0:	30 91 cb 00 	lds	r19, 0x00CB
     8b4:	40 91 c8 00 	lds	r20, 0x00C8
     8b8:	50 91 c9 00 	lds	r21, 0x00C9
     8bc:	a0 e1       	ldi	r26, 0x10	; 16
     8be:	be e0       	ldi	r27, 0x0E	; 14
     8c0:	4d d4       	rcall	.+2202   	; 0x115c <__umulhisi3>
     8c2:	2b 01       	movw	r4, r22
     8c4:	3c 01       	movw	r6, r24
     8c6:	9a 01       	movw	r18, r20
     8c8:	ac e3       	ldi	r26, 0x3C	; 60
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	47 d4       	rcall	.+2190   	; 0x115c <__umulhisi3>
     8ce:	46 0e       	add	r4, r22
     8d0:	57 1e       	adc	r5, r23
     8d2:	68 1e       	adc	r6, r24
     8d4:	79 1e       	adc	r7, r25
     8d6:	40 92 aa 00 	sts	0x00AA, r4
     8da:	50 92 ab 00 	sts	0x00AB, r5
     8de:	60 92 ac 00 	sts	0x00AC, r6
     8e2:	70 92 ad 00 	sts	0x00AD, r7
								
								if(all_time_in_sec_dawn < all_time_in_sec){
     8e6:	4c 14       	cp	r4, r12
     8e8:	5d 04       	cpc	r5, r13
     8ea:	6e 04       	cpc	r6, r14
     8ec:	7f 04       	cpc	r7, r15
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <main+0x150>
     8f0:	9f c0       	rjmp	.+318    	; 0xa30 <main+0x28e>
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
     8f2:	d7 01       	movw	r26, r14
     8f4:	c6 01       	movw	r24, r12
     8f6:	84 19       	sub	r24, r4
     8f8:	95 09       	sbc	r25, r5
     8fa:	a6 09       	sbc	r26, r6
     8fc:	b7 09       	sbc	r27, r7
     8fe:	2c 01       	movw	r4, r24
     900:	3d 01       	movw	r6, r26
     902:	80 93 d0 00 	sts	0x00D0, r24
     906:	90 93 d1 00 	sts	0x00D1, r25
     90a:	a0 93 d2 00 	sts	0x00D2, r26
     90e:	b0 93 d3 00 	sts	0x00D3, r27
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
     912:	e0 91 c6 00 	lds	r30, 0x00C6
     916:	f0 91 c7 00 	lds	r31, 0x00C7
     91a:	b4 01       	movw	r22, r8
     91c:	f0 d3       	rcall	.+2016   	; 0x10fe <__divmodhi4>
     91e:	6e 17       	cp	r22, r30
     920:	7f 07       	cpc	r23, r31
     922:	f0 f4       	brcc	.+60     	; 0x960 <main+0x1be>
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     924:	a3 01       	movw	r20, r6
     926:	92 01       	movw	r18, r4
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	31 09       	sbc	r19, r1
     92c:	41 09       	sbc	r20, r1
     92e:	51 09       	sbc	r21, r1
     930:	a5 ef       	ldi	r26, 0xF5	; 245
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	1f d4       	rcall	.+2110   	; 0x1174 <__muluhisi3>
								
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, 255));
     936:	ac e3       	ldi	r26, 0x3C	; 60
     938:	ae 9f       	mul	r26, r30
     93a:	90 01       	movw	r18, r0
     93c:	af 9f       	mul	r26, r31
     93e:	30 0d       	add	r19, r0
     940:	11 24       	eor	r1, r1
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     946:	21 50       	subi	r18, 0x01	; 1
     948:	31 09       	sbc	r19, r1
     94a:	41 09       	sbc	r20, r1
     94c:	51 09       	sbc	r21, r1
     94e:	ea d3       	rcall	.+2004   	; 0x1124 <__divmodsi4>
     950:	8a e0       	ldi	r24, 0x0A	; 10
     952:	82 0f       	add	r24, r18
     954:	07 dd       	rcall	.-1522   	; 0x364 <PWM_set.part.0>
								if(all_time_in_sec_dawn < all_time_in_sec){
									excess_sec_dawm = all_time_in_sec - all_time_in_sec_dawn;
									//Если закат начался
			                        if(((int)excess_sec_dawm / 60) < led_menu_dawn_interval_mins){
										PWM_set(RGBW, map(excess_sec_dawm, 1, led_menu_dawn_interval_mins * 60, 10, 255));
										now_mode_light = LIGHT_DAWM;
     956:	b0 92 b9 00 	sts	0x00B9, r11
     95a:	a0 92 b8 00 	sts	0x00B8, r10
     95e:	70 c0       	rjmp	.+224    	; 0xa40 <main+0x29e>
									}else{
										all_time_in_sec_sunset = ((long)led_menu_sunset_hours * 60 * 60) + ((long)led_menu_sunset_mins * 60);
     960:	20 91 c4 00 	lds	r18, 0x00C4
     964:	30 91 c5 00 	lds	r19, 0x00C5
     968:	40 91 c2 00 	lds	r20, 0x00C2
     96c:	50 91 c3 00 	lds	r21, 0x00C3
     970:	a0 e1       	ldi	r26, 0x10	; 16
     972:	be e0       	ldi	r27, 0x0E	; 14
     974:	f3 d3       	rcall	.+2022   	; 0x115c <__umulhisi3>
     976:	2b 01       	movw	r4, r22
     978:	3c 01       	movw	r6, r24
     97a:	9a 01       	movw	r18, r20
     97c:	ac e3       	ldi	r26, 0x3C	; 60
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	ed d3       	rcall	.+2010   	; 0x115c <__umulhisi3>
     982:	46 0e       	add	r4, r22
     984:	57 1e       	adc	r5, r23
     986:	68 1e       	adc	r6, r24
     988:	79 1e       	adc	r7, r25
     98a:	40 92 ae 00 	sts	0x00AE, r4
     98e:	50 92 af 00 	sts	0x00AF, r5
     992:	60 92 b0 00 	sts	0x00B0, r6
     996:	70 92 b1 00 	sts	0x00B1, r7
																				
										if(all_time_in_sec_sunset  < all_time_in_sec){
     99a:	4c 14       	cp	r4, r12
     99c:	5d 04       	cpc	r5, r13
     99e:	6e 04       	cpc	r6, r14
     9a0:	7f 04       	cpc	r7, r15
     9a2:	e8 f5       	brcc	.+122    	; 0xa1e <main+0x27c>
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
     9a4:	c4 18       	sub	r12, r4
     9a6:	d5 08       	sbc	r13, r5
     9a8:	e6 08       	sbc	r14, r6
     9aa:	f7 08       	sbc	r15, r7
     9ac:	c0 92 cc 00 	sts	0x00CC, r12
     9b0:	d0 92 cd 00 	sts	0x00CD, r13
     9b4:	e0 92 ce 00 	sts	0x00CE, r14
     9b8:	f0 92 cf 00 	sts	0x00CF, r15
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
     9bc:	e0 91 c0 00 	lds	r30, 0x00C0
     9c0:	f0 91 c1 00 	lds	r31, 0x00C1
     9c4:	c6 01       	movw	r24, r12
     9c6:	b4 01       	movw	r22, r8
     9c8:	9a d3       	rcall	.+1844   	; 0x10fe <__divmodhi4>
     9ca:	6e 17       	cp	r22, r30
     9cc:	7f 07       	cpc	r23, r31
     9ce:	f0 f4       	brcc	.+60     	; 0xa0c <main+0x26a>
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     9d0:	a7 01       	movw	r20, r14
     9d2:	96 01       	movw	r18, r12
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	31 09       	sbc	r19, r1
     9d8:	41 09       	sbc	r20, r1
     9da:	51 09       	sbc	r21, r1
     9dc:	ab e0       	ldi	r26, 0x0B	; 11
     9de:	bf ef       	ldi	r27, 0xFF	; 255
     9e0:	d5 d3       	rcall	.+1962   	; 0x118c <__mulohisi3>
																				
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, 255, 10));
     9e2:	bc e3       	ldi	r27, 0x3C	; 60
     9e4:	be 9f       	mul	r27, r30
     9e6:	90 01       	movw	r18, r0
     9e8:	bf 9f       	mul	r27, r31
     9ea:	30 0d       	add	r19, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
}

//Преобразование диапазона
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	31 09       	sbc	r19, r1
     9f6:	41 09       	sbc	r20, r1
     9f8:	51 09       	sbc	r21, r1
     9fa:	94 d3       	rcall	.+1832   	; 0x1124 <__divmodsi4>
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	82 0f       	add	r24, r18
     a00:	b1 dc       	rcall	.-1694   	; 0x364 <PWM_set.part.0>
										if(all_time_in_sec_sunset  < all_time_in_sec){
											excess_sec_sunset = all_time_in_sec - all_time_in_sec_sunset;
											
											if(((int)excess_sec_sunset / 60) < led_menu_sunset_interval_mins){
												PWM_set(RGBW, map(excess_sec_sunset, 1, led_menu_sunset_interval_mins * 60, 255, 10));
												now_mode_light = LIGHT_SUNSET;
     a02:	30 92 b9 00 	sts	0x00B9, r3
     a06:	20 92 b8 00 	sts	0x00B8, r2
     a0a:	1a c0       	rjmp	.+52     	; 0xa40 <main+0x29e>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	aa dc       	rcall	.-1708   	; 0x364 <PWM_set.part.0>
										    }else{ 
												PWM_set(RGBW, 0x00); 
												now_mode_light = LIGHT_OFF;
     a10:	e4 e0       	ldi	r30, 0x04	; 4
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	f0 93 b9 00 	sts	0x00B9, r31
     a18:	e0 93 b8 00 	sts	0x00B8, r30
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <main+0x29e>
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	a1 dc       	rcall	.-1726   	; 0x364 <PWM_set.part.0>
											}
										}else{ 
											PWM_set(RGBW, 0xFF); 
											now_mode_light = LIGHT_FULL;
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 b9 00 	sts	0x00B9, r25
     a2a:	80 93 b8 00 	sts	0x00B8, r24
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <main+0x29e>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	98 dc       	rcall	.-1744   	; 0x364 <PWM_set.part.0>
										}
									 }
								}else{  
									PWM_set(RGBW, 0x00); 
									now_mode_light = LIGHT_OFF;
     a34:	a4 e0       	ldi	r26, 0x04	; 4
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	b0 93 b9 00 	sts	0x00B9, r27
     a3c:	a0 93 b8 00 	sts	0x00B8, r26
								}			
					
								if(prev_now_mode_light != now_mode_light ){
     a40:	20 91 b6 00 	lds	r18, 0x00B6
     a44:	30 91 b7 00 	lds	r19, 0x00B7
     a48:	80 91 b8 00 	lds	r24, 0x00B8
     a4c:	90 91 b9 00 	lds	r25, 0x00B9
     a50:	28 17       	cp	r18, r24
     a52:	39 07       	cpc	r19, r25
     a54:	09 f0       	breq	.+2      	; 0xa58 <main+0x2b6>
									ClearALLCharIndicator();
     a56:	25 dc       	rcall	.-1974   	; 0x2a2 <ClearALLCharIndicator>
								}
					
								prev_now_mode_light = now_mode_light;
     a58:	80 91 b8 00 	lds	r24, 0x00B8
     a5c:	90 91 b9 00 	lds	r25, 0x00B9
     a60:	90 93 b7 00 	sts	0x00B7, r25
     a64:	80 93 b6 00 	sts	0x00B6, r24
								TIMSK |= (1 << TOIE0);
     a68:	89 b7       	in	r24, 0x39	; 57
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	89 bf       	out	0x39, r24	; 57
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <main+0x2dc>
					}else{
						//Подаем + на драйвера если тумблер включен
						TIMSK &=~ (1 << TOIE0);
     a70:	89 b7       	in	r24, 0x39	; 57
     a72:	8e 7f       	andi	r24, 0xFE	; 254
     a74:	89 bf       	out	0x39, r24	; 57
						PORT_R |= (1<<R);
     a76:	95 9a       	sbi	0x12, 5	; 18
						PORT_G |= (1<<G);
     a78:	96 9a       	sbi	0x12, 6	; 18
						PORT_B |= (1<<B);
     a7a:	97 9a       	sbi	0x12, 7	; 18
						PORT_W |= (1<<W);
     a7c:	c0 9a       	sbi	0x18, 0	; 24
					}
					
					//Читаем время
						
					I2C_SendByteByADDR(0,0b11010000);	//Установка адреса в 0
     a7e:	60 ed       	ldi	r22, 0xD0	; 208
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	fb d2       	rcall	.+1526   	; 0x107a <I2C_SendByteByADDR>
					I2C_StartCondition(); //Отправим условие START
     a84:	ea d2       	rcall	.+1492   	; 0x105a <I2C_StartCondition>
					I2C_SendByte(0b11010001); //Бит на чтение
     a86:	81 ed       	ldi	r24, 0xD1	; 209
     a88:	f1 d2       	rcall	.+1506   	; 0x106c <I2C_SendByte>
					sec_ = I2C_ReadByte();
     a8a:	0b d3       	rcall	.+1558   	; 0x10a2 <I2C_ReadByte>
     a8c:	80 93 e3 00 	sts	0x00E3, r24
					min_ = I2C_ReadByte();
     a90:	08 d3       	rcall	.+1552   	; 0x10a2 <I2C_ReadByte>
     a92:	80 93 dd 00 	sts	0x00DD, r24
					hour_ = I2C_ReadByte();
     a96:	05 d3       	rcall	.+1546   	; 0x10a2 <I2C_ReadByte>
     a98:	80 93 e1 00 	sts	0x00E1, r24
					day_ = I2C_ReadByte();
     a9c:	02 d3       	rcall	.+1540   	; 0x10a2 <I2C_ReadByte>
     a9e:	80 93 df 00 	sts	0x00DF, r24
					date_ = I2C_ReadByte();
     aa2:	ff d2       	rcall	.+1534   	; 0x10a2 <I2C_ReadByte>
     aa4:	80 93 db 00 	sts	0x00DB, r24
					month_ = I2C_ReadByte();
     aa8:	fc d2       	rcall	.+1528   	; 0x10a2 <I2C_ReadByte>
     aaa:	80 93 e4 00 	sts	0x00E4, r24
					year_ = I2C_ReadLastByte();
     aae:	00 d3       	rcall	.+1536   	; 0x10b0 <I2C_ReadLastByte>
     ab0:	80 93 dc 00 	sts	0x00DC, r24
					I2C_StopCondition(); //Отправим условие STOP
     ab4:	d8 d2       	rcall	.+1456   	; 0x1066 <I2C_StopCondition>
					sec = RTC_ConvertFromDec(sec_); //Преобразуем в десятичный формат
     ab6:	80 91 e3 00 	lds	r24, 0x00E3
     aba:	ba d2       	rcall	.+1396   	; 0x1030 <RTC_ConvertFromDec>
     abc:	80 93 da 00 	sts	0x00DA, r24
					min = RTC_ConvertFromDec(min_); //Преобразуем в десятичный формат
     ac0:	80 91 dd 00 	lds	r24, 0x00DD
     ac4:	b5 d2       	rcall	.+1386   	; 0x1030 <RTC_ConvertFromDec>
     ac6:	80 93 d9 00 	sts	0x00D9, r24
					hour = RTC_ConvertFromDec(hour_); //Преобразуем в десятичный формат
     aca:	80 91 e1 00 	lds	r24, 0x00E1
     ace:	b0 d2       	rcall	.+1376   	; 0x1030 <RTC_ConvertFromDec>
     ad0:	80 93 d8 00 	sts	0x00D8, r24
					day = RTC_ConvertFromDec(day_); //Преобразуем в десятичный формат
     ad4:	80 91 df 00 	lds	r24, 0x00DF
     ad8:	ab d2       	rcall	.+1366   	; 0x1030 <RTC_ConvertFromDec>
     ada:	80 93 d7 00 	sts	0x00D7, r24
					year = RTC_ConvertFromDec(year_); //Преобразуем в десятичный формат
     ade:	80 91 dc 00 	lds	r24, 0x00DC
     ae2:	a6 d2       	rcall	.+1356   	; 0x1030 <RTC_ConvertFromDec>
     ae4:	80 93 d4 00 	sts	0x00D4, r24
					month = RTC_ConvertFromDec(month_); //Преобразуем в десятичный формат
     ae8:	80 91 e4 00 	lds	r24, 0x00E4
     aec:	a1 d2       	rcall	.+1346   	; 0x1030 <RTC_ConvertFromDec>
     aee:	80 93 d5 00 	sts	0x00D5, r24
					date = RTC_ConvertFromDec(date_); //Преобразуем в десятичный формат
     af2:	80 91 db 00 	lds	r24, 0x00DB
     af6:	9c d2       	rcall	.+1336   	; 0x1030 <RTC_ConvertFromDec>
     af8:	80 93 d6 00 	sts	0x00D6, r24
					if((PINB & (1 << PB7))){
     afc:	b7 9b       	sbis	0x16, 7	; 22
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <main+0x372>
					  TIMSK |= (1 << TOIE0);
     b00:	89 b7       	in	r24, 0x39	; 57
     b02:	81 60       	ori	r24, 0x01	; 1
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <main+0x370>
					}
		}else{
		    PORT_R &= ~(1<<R);
     b06:	95 98       	cbi	0x12, 5	; 18
			PORT_G &= ~(1<<G);
     b08:	96 98       	cbi	0x12, 6	; 18
			PORT_B &= ~(1<<B);
     b0a:	97 98       	cbi	0x12, 7	; 18
			PORT_W &= ~(1<<W);
     b0c:	c0 98       	cbi	0x18, 0	; 24
			TIMSK &=~ (1 << TOIE0);
     b0e:	89 b7       	in	r24, 0x39	; 57
     b10:	8e 7f       	andi	r24, 0xFE	; 254
     b12:	89 bf       	out	0x39, r24	; 57
		}
		
		//Модификация данных если выключены настроки и изменяется значение
	    if((now_mode != MODE_NONE) && ((increment_mode == MODE_INC) || (increment_mode == MODE_DISINC)))
     b14:	80 91 bf 00 	lds	r24, 0x00BF
     b18:	88 23       	and	r24, r24
     b1a:	41 f0       	breq	.+16     	; 0xb2c <main+0x38a>
     b1c:	80 91 be 00 	lds	r24, 0x00BE
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	18 f4       	brcc	.+6      	; 0xb2c <main+0x38a>
		{
				ModifyRTC();
     b26:	bf dc       	rcall	.-1666   	; 0x4a6 <ModifyRTC>
				increment_mode = MODE_NONE_INC;
     b28:	10 92 be 00 	sts	0x00BE, r1
	    }
		
	    if((now_mode_led_menu != MODE_NONE) && ((increment_mode_led_menu == MODE_INC) || (increment_mode_led_menu == MODE_DISINC)))
     b2c:	80 91 bc 00 	lds	r24, 0x00BC
     b30:	90 91 bd 00 	lds	r25, 0x00BD
     b34:	89 2b       	or	r24, r25
     b36:	61 f0       	breq	.+24     	; 0xb50 <main+0x3ae>
     b38:	80 91 ba 00 	lds	r24, 0x00BA
     b3c:	90 91 bb 00 	lds	r25, 0x00BB
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	02 97       	sbiw	r24, 0x02	; 2
     b44:	28 f4       	brcc	.+10     	; 0xb50 <main+0x3ae>
	    {
				    ModifyLEDMenu();
     b46:	0f dd       	rcall	.-1506   	; 0x566 <ModifyLEDMenu>
				    increment_mode_led_menu = MODE_NONE_INC;
     b48:	10 92 bb 00 	sts	0x00BB, r1
     b4c:	10 92 ba 00 	sts	0x00BA, r1
	    }
				
		//Опрашиваем кнопки				
		BUT_Poll();
     b50:	65 db       	rcall	.-2358   	; 0x21c <BUT_Poll>
		button = BUT_GetBut(); 
     b52:	27 db       	rcall	.-2482   	; 0x1a2 <BUT_GetBut>
     b54:	80 93 e0 00 	sts	0x00E0, r24
		if(button){
     b58:	88 23       	and	r24, r24
     b5a:	09 f4       	brne	.+2      	; 0xb5e <main+0x3bc>
     b5c:	f6 c0       	rjmp	.+492    	; 0xd4a <main+0x5a8>
		    button_code = BUT_GetBut();  
     b5e:	21 db       	rcall	.-2494   	; 0x1a2 <BUT_GetBut>
     b60:	80 93 de 00 	sts	0x00DE, r24
			switch(button){
     b64:	90 91 e0 00 	lds	r25, 0x00E0
     b68:	92 30       	cpi	r25, 0x02	; 2
     b6a:	39 f1       	breq	.+78     	; 0xbba <main+0x418>
     b6c:	18 f4       	brcc	.+6      	; 0xb74 <main+0x3d2>
     b6e:	91 30       	cpi	r25, 0x01	; 1
     b70:	59 f0       	breq	.+22     	; 0xb88 <main+0x3e6>
     b72:	eb c0       	rjmp	.+470    	; 0xd4a <main+0x5a8>
     b74:	20 91 bc 00 	lds	r18, 0x00BC
     b78:	30 91 bd 00 	lds	r19, 0x00BD
     b7c:	93 30       	cpi	r25, 0x03	; 3
     b7e:	b1 f1       	breq	.+108    	; 0xbec <main+0x44a>
     b80:	94 30       	cpi	r25, 0x04	; 4
     b82:	09 f4       	brne	.+2      	; 0xb86 <main+0x3e4>
     b84:	65 c0       	rjmp	.+202    	; 0xc50 <main+0x4ae>
     b86:	e1 c0       	rjmp	.+450    	; 0xd4a <main+0x5a8>
				//Plus
				case 1:   
				 if(button_code == BUT_RELEASED_EN){
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <main+0x3ec>
     b8c:	de c0       	rjmp	.+444    	; 0xd4a <main+0x5a8>
				  led_strob();
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	62 dc       	rcall	.-1852   	; 0x456 <led_strob>
				  if(now_mode != MODE_NONE){
     b92:	90 91 bf 00 	lds	r25, 0x00BF
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	99 23       	and	r25, r25
     b9a:	19 f0       	breq	.+6      	; 0xba2 <main+0x400>
				   increment_mode = MODE_INC; 
     b9c:	80 93 be 00 	sts	0x00BE, r24
     ba0:	d4 c0       	rjmp	.+424    	; 0xd4a <main+0x5a8>
				  }else if(now_mode_led_menu != MODE_NONE){
     ba2:	80 91 bc 00 	lds	r24, 0x00BC
     ba6:	90 91 bd 00 	lds	r25, 0x00BD
     baa:	89 2b       	or	r24, r25
     bac:	09 f4       	brne	.+2      	; 0xbb0 <main+0x40e>
     bae:	cd c0       	rjmp	.+410    	; 0xd4a <main+0x5a8>
				   increment_mode_led_menu = MODE_INC;
     bb0:	b0 92 bb 00 	sts	0x00BB, r11
     bb4:	a0 92 ba 00 	sts	0x00BA, r10
     bb8:	c8 c0       	rjmp	.+400    	; 0xd4a <main+0x5a8>
				 }
				break;
			
				//Minus
				case 2: 
				 if(button_code == BUT_RELEASED_EN){
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0x41e>
     bbe:	c5 c0       	rjmp	.+394    	; 0xd4a <main+0x5a8>
				  led_strob();
     bc0:	99 83       	std	Y+1, r25	; 0x01
     bc2:	49 dc       	rcall	.-1902   	; 0x456 <led_strob>
				  if(now_mode != MODE_NONE){
     bc4:	80 91 bf 00 	lds	r24, 0x00BF
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	19 f0       	breq	.+6      	; 0xbd4 <main+0x432>
				   increment_mode = MODE_DISINC;
     bce:	90 93 be 00 	sts	0x00BE, r25
     bd2:	bb c0       	rjmp	.+374    	; 0xd4a <main+0x5a8>
				  }else if(now_mode_led_menu != MODE_NONE){
     bd4:	80 91 bc 00 	lds	r24, 0x00BC
     bd8:	90 91 bd 00 	lds	r25, 0x00BD
     bdc:	89 2b       	or	r24, r25
     bde:	09 f4       	brne	.+2      	; 0xbe2 <main+0x440>
     be0:	b4 c0       	rjmp	.+360    	; 0xd4a <main+0x5a8>
				   increment_mode_led_menu = MODE_DISINC;
     be2:	30 92 bb 00 	sts	0x00BB, r3
     be6:	20 92 ba 00 	sts	0x00BA, r2
     bea:	af c0       	rjmp	.+350    	; 0xd4a <main+0x5a8>
				 }
				break;
			
				//Okey
				case 3: 
				  if(now_mode_led_menu == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode == MODE_NONE) || (now_mode != MODE_NONE && button_code == BUT_RELEASED_EN))){ 
     bec:	23 2b       	or	r18, r19
     bee:	09 f0       	breq	.+2      	; 0xbf2 <main+0x450>
     bf0:	ac c0       	rjmp	.+344    	; 0xd4a <main+0x5a8>
     bf2:	90 91 bf 00 	lds	r25, 0x00BF
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	11 f4       	brne	.+4      	; 0xbfe <main+0x45c>
     bfa:	99 23       	and	r25, r25
     bfc:	31 f0       	breq	.+12     	; 0xc0a <main+0x468>
     bfe:	99 23       	and	r25, r25
     c00:	09 f4       	brne	.+2      	; 0xc04 <main+0x462>
     c02:	a3 c0       	rjmp	.+326    	; 0xd4a <main+0x5a8>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	09 f0       	breq	.+2      	; 0xc0a <main+0x468>
     c08:	a0 c0       	rjmp	.+320    	; 0xd4a <main+0x5a8>
				   led_strob();
     c0a:	25 dc       	rcall	.-1974   	; 0x456 <led_strob>
				   if(now_mode == MODE_NONE){
     c0c:	80 91 bf 00 	lds	r24, 0x00BF
     c10:	81 11       	cpse	r24, r1
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <main+0x47e>
					//Редактируем часы
					now_mode = MODE_EDIT_HOURS;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 bf 00 	sts	0x00BF, r24
                    ClearALLCharIndicator();
     c1a:	43 db       	rcall	.-2426   	; 0x2a2 <ClearALLCharIndicator>
                    ClearALLDotsIndicator();
     c1c:	35 db       	rcall	.-2454   	; 0x288 <ClearALLDotsIndicator>
     c1e:	95 c0       	rjmp	.+298    	; 0xd4a <main+0x5a8>
				   }else if(now_mode == MODE_EDIT_HOURS){
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	21 f4       	brne	.+8      	; 0xc2c <main+0x48a>
					//Минуты
					now_mode = MODE_EDIT_MINUTES; 
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	80 93 bf 00 	sts	0x00BF, r24
     c2a:	8f c0       	rjmp	.+286    	; 0xd4a <main+0x5a8>
				   }else if(now_mode == MODE_EDIT_MINUTES){
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	09 f0       	breq	.+2      	; 0xc32 <main+0x490>
     c30:	8c c0       	rjmp	.+280    	; 0xd4a <main+0x5a8>
					I2C_StartCondition();
     c32:	13 d2       	rcall	.+1062   	; 0x105a <I2C_StartCondition>
					I2C_SendByte(0b11010000);
     c34:	80 ed       	ldi	r24, 0xD0	; 208
     c36:	1a d2       	rcall	.+1076   	; 0x106c <I2C_SendByte>
					I2C_SendByte(0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	18 d2       	rcall	.+1072   	; 0x106c <I2C_SendByte>
					I2C_SendByte(RTC_ConvertFromBinDec(1));
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	01 d2       	rcall	.+1026   	; 0x1042 <RTC_ConvertFromBinDec>
     c40:	15 d2       	rcall	.+1066   	; 0x106c <I2C_SendByte>
					I2C_StopCondition();
     c42:	11 d2       	rcall	.+1058   	; 0x1066 <I2C_StopCondition>
					ClearALLCharIndicator();
     c44:	2e db       	rcall	.-2468   	; 0x2a2 <ClearALLCharIndicator>
					now_mode = MODE_NONE;
     c46:	10 92 bf 00 	sts	0x00BF, r1
					increment_mode = MODE_NONE_INC;
     c4a:	10 92 be 00 	sts	0x00BE, r1
     c4e:	7d c0       	rjmp	.+250    	; 0xd4a <main+0x5a8>
				   }*/
				  }
				break;
			
				case 4: 
				  if(now_mode == MODE_NONE && ((button_code == BUT_RELEASED_LONG_CODE && now_mode_led_menu == MODE_NONE) || (now_mode_led_menu != MODE_NONE && button_code == BUT_RELEASED_EN))){
     c50:	90 91 bf 00 	lds	r25, 0x00BF
     c54:	91 11       	cpse	r25, r1
     c56:	79 c0       	rjmp	.+242    	; 0xd4a <main+0x5a8>
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	19 f4       	brne	.+6      	; 0xc62 <main+0x4c0>
     c5c:	21 15       	cp	r18, r1
     c5e:	31 05       	cpc	r19, r1
     c60:	31 f0       	breq	.+12     	; 0xc6e <main+0x4cc>
     c62:	23 2b       	or	r18, r19
     c64:	09 f4       	brne	.+2      	; 0xc68 <main+0x4c6>
     c66:	71 c0       	rjmp	.+226    	; 0xd4a <main+0x5a8>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	09 f0       	breq	.+2      	; 0xc6e <main+0x4cc>
     c6c:	6e c0       	rjmp	.+220    	; 0xd4a <main+0x5a8>
						  led_strob();
     c6e:	f3 db       	rcall	.-2074   	; 0x456 <led_strob>
						  if(now_mode_led_menu == MODE_NONE){
     c70:	80 91 bc 00 	lds	r24, 0x00BC
     c74:	90 91 bd 00 	lds	r25, 0x00BD
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	29 f4       	brne	.+10     	; 0xc86 <main+0x4e4>
							//Часы начала рассвета
							ClearALLCharIndicator();
     c7c:	12 db       	rcall	.-2524   	; 0x2a2 <ClearALLCharIndicator>
							ClearALLDotsIndicator();
     c7e:	04 db       	rcall	.-2552   	; 0x288 <ClearALLDotsIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_HOURS;
     c80:	e7 e0       	ldi	r30, 0x07	; 7
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	28 c0       	rjmp	.+80     	; 0xcd6 <main+0x534>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_HOURS){
     c86:	87 30       	cpi	r24, 0x07	; 7
     c88:	91 05       	cpc	r25, r1
     c8a:	51 f4       	brne	.+20     	; 0xca0 <main+0x4fe>
							eeprom_write_word(&ee_led_menu_dawn_hours , led_menu_dawn_hours);
     c8c:	60 91 ca 00 	lds	r22, 0x00CA
     c90:	70 91 cb 00 	lds	r23, 0x00CB
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	a4 d2       	rcall	.+1352   	; 0x11e2 <__eewr_word_m8a>
							//Минуты начала рассвета
							now_mode_led_menu = MODE_EDIT_START_TIME_DAWN_MINS;
     c9a:	88 e0       	ldi	r24, 0x08	; 8
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	2c c0       	rjmp	.+88     	; 0xcf8 <main+0x556>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_DAWN_MINS){
     ca0:	88 30       	cpi	r24, 0x08	; 8
     ca2:	91 05       	cpc	r25, r1
     ca4:	59 f4       	brne	.+22     	; 0xcbc <main+0x51a>
							eeprom_write_word(&ee_led_menu_dawn_mins, led_menu_dawn_mins);
     ca6:	60 91 c8 00 	lds	r22, 0x00C8
     caa:	70 91 c9 00 	lds	r23, 0x00C9
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	97 d2       	rcall	.+1326   	; 0x11e2 <__eewr_word_m8a>
							//Длительность рассвета
							ClearALLCharIndicator();
     cb4:	f6 da       	rcall	.-2580   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_INTERVAL_DAWN;
     cb6:	a9 e0       	ldi	r26, 0x09	; 9
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	30 c0       	rjmp	.+96     	; 0xd1c <main+0x57a>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_DAWN){
     cbc:	89 30       	cpi	r24, 0x09	; 9
     cbe:	91 05       	cpc	r25, r1
     cc0:	79 f4       	brne	.+30     	; 0xce0 <main+0x53e>
							  eeprom_write_word(&ee_led_menu_dawn_interval_mins, led_menu_dawn_interval_mins);
     cc2:	60 91 c6 00 	lds	r22, 0x00C6
     cc6:	70 91 c7 00 	lds	r23, 0x00C7
     cca:	86 e0       	ldi	r24, 0x06	; 6
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	89 d2       	rcall	.+1298   	; 0x11e2 <__eewr_word_m8a>
							//Часы начала заката
							ClearALLCharIndicator();
     cd0:	e8 da       	rcall	.-2608   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_HOURS;
     cd2:	ea e0       	ldi	r30, 0x0A	; 10
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	f0 93 bd 00 	sts	0x00BD, r31
     cda:	e0 93 bc 00 	sts	0x00BC, r30
     cde:	35 c0       	rjmp	.+106    	; 0xd4a <main+0x5a8>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_HOURS){
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	91 05       	cpc	r25, r1
     ce4:	71 f4       	brne	.+28     	; 0xd02 <main+0x560>
							 eeprom_write_word(&ee_led_menu_sunset_hours, led_menu_sunset_hours);
     ce6:	60 91 c4 00 	lds	r22, 0x00C4
     cea:	70 91 c5 00 	lds	r23, 0x00C5
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	77 d2       	rcall	.+1262   	; 0x11e2 <__eewr_word_m8a>
							 //Минуты начала заката
							 now_mode_led_menu = MODE_EDIT_START_TIME_SUNSET_MINS;
     cf4:	8b e0       	ldi	r24, 0x0B	; 11
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 bd 00 	sts	0x00BD, r25
     cfc:	80 93 bc 00 	sts	0x00BC, r24
     d00:	24 c0       	rjmp	.+72     	; 0xd4a <main+0x5a8>
						  }else if(now_mode_led_menu == MODE_EDIT_START_TIME_SUNSET_MINS){
     d02:	8b 30       	cpi	r24, 0x0B	; 11
     d04:	91 05       	cpc	r25, r1
     d06:	79 f4       	brne	.+30     	; 0xd26 <main+0x584>
							 eeprom_write_word(&ee_led_menu_sunset_mins, led_menu_sunset_mins);
     d08:	60 91 c2 00 	lds	r22, 0x00C2
     d0c:	70 91 c3 00 	lds	r23, 0x00C3
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	66 d2       	rcall	.+1228   	; 0x11e2 <__eewr_word_m8a>
							 //Длительность заката
							 ClearALLCharIndicator();
     d16:	c5 da       	rcall	.-2678   	; 0x2a2 <ClearALLCharIndicator>
							 now_mode_led_menu = MODE_EDIT_INTERVAL_SUNSET;
     d18:	ac e0       	ldi	r26, 0x0C	; 12
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	b0 93 bd 00 	sts	0x00BD, r27
     d20:	a0 93 bc 00 	sts	0x00BC, r26
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <main+0x5a8>
						  }else if(now_mode_led_menu == MODE_EDIT_INTERVAL_SUNSET){
     d26:	0c 97       	sbiw	r24, 0x0c	; 12
     d28:	81 f4       	brne	.+32     	; 0xd4a <main+0x5a8>
							eeprom_write_word(&ee_led_menu_sunset_interval_mins, led_menu_sunset_interval_mins);
     d2a:	60 91 c0 00 	lds	r22, 0x00C0
     d2e:	70 91 c1 00 	lds	r23, 0x00C1
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	55 d2       	rcall	.+1194   	; 0x11e2 <__eewr_word_m8a>
							ClearALLCharIndicator();
     d38:	b4 da       	rcall	.-2712   	; 0x2a2 <ClearALLCharIndicator>
							now_mode_led_menu = MODE_NONE;
     d3a:	10 92 bd 00 	sts	0x00BD, r1
     d3e:	10 92 bc 00 	sts	0x00BC, r1
							increment_mode_led_menu = MODE_NONE_INC;
     d42:	10 92 bb 00 	sts	0x00BB, r1
     d46:	10 92 ba 00 	sts	0x00BA, r1
			}
		}

        //Вывод текущего режима, если мы не в меню
		
        if(now_mode_led_menu == MODE_NONE && now_mode == MODE_NONE){
     d4a:	80 91 bc 00 	lds	r24, 0x00BC
     d4e:	90 91 bd 00 	lds	r25, 0x00BD
     d52:	89 2b       	or	r24, r25
     d54:	11 f5       	brne	.+68     	; 0xd9a <main+0x5f8>
     d56:	80 91 bf 00 	lds	r24, 0x00BF
     d5a:	81 11       	cpse	r24, r1
     d5c:	1e c0       	rjmp	.+60     	; 0xd9a <main+0x5f8>
			ShowTime(hour, min);
     d5e:	60 91 d9 00 	lds	r22, 0x00D9
     d62:	80 91 d8 00 	lds	r24, 0x00D8
     d66:	fc dc       	rcall	.-1544   	; 0x760 <ShowTime>
			setDotIndicator(2, (PINC & (1 << PC3)));
     d68:	63 b3       	in	r22, 0x13	; 19
     d6a:	68 70       	andi	r22, 0x08	; 8
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	86 da       	rcall	.-2804   	; 0x27c <setDotIndicator>
			if(now_mode_light == LIGHT_DAWM){
     d70:	80 91 b8 00 	lds	r24, 0x00B8
     d74:	90 91 b9 00 	lds	r25, 0x00B9
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	31 f4       	brne	.+12     	; 0xd8a <main+0x5e8>
				setCharIndicator(18, 0);
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	82 e1       	ldi	r24, 0x12	; 18
     d82:	76 da       	rcall	.-2836   	; 0x270 <setCharIndicator>
				setCharIndicator(18, 5);
     d84:	65 e0       	ldi	r22, 0x05	; 5
     d86:	82 e1       	ldi	r24, 0x12	; 18
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <main+0x5f6>
			}else if(now_mode_light == LIGHT_SUNSET){
     d8a:	02 97       	sbiw	r24, 0x02	; 2
     d8c:	31 f4       	brne	.+12     	; 0xd9a <main+0x5f8>
				setCharIndicator(19, 0);
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	83 e1       	ldi	r24, 0x13	; 19
     d92:	6e da       	rcall	.-2852   	; 0x270 <setCharIndicator>
				setCharIndicator(19, 5);
     d94:	65 e0       	ldi	r22, 0x05	; 5
     d96:	83 e1       	ldi	r24, 0x13	; 19
     d98:	6b da       	rcall	.-2858   	; 0x270 <setCharIndicator>
			   setCharIndicator(19, 5);
           }
		   */
        }
		
		if(now_mode_led_menu){
     d9a:	80 91 bc 00 	lds	r24, 0x00BC
     d9e:	90 91 bd 00 	lds	r25, 0x00BD
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	09 f4       	brne	.+2      	; 0xda8 <main+0x606>
     da6:	f5 c0       	rjmp	.+490    	; 0xf92 <main+0x7f0>
			//Меню настроки заката/рассвета
			switch(now_mode_led_menu){
     da8:	89 30       	cpi	r24, 0x09	; 9
     daa:	91 05       	cpc	r25, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <main+0x60e>
     dae:	73 c0       	rjmp	.+230    	; 0xe96 <main+0x6f4>
     db0:	30 f4       	brcc	.+12     	; 0xdbe <main+0x61c>
     db2:	87 30       	cpi	r24, 0x07	; 7
     db4:	91 05       	cpc	r25, r1
     db6:	69 f0       	breq	.+26     	; 0xdd2 <main+0x630>
     db8:	08 97       	sbiw	r24, 0x08	; 8
     dba:	b9 f1       	breq	.+110    	; 0xe2a <main+0x688>
     dbc:	ea c0       	rjmp	.+468    	; 0xf92 <main+0x7f0>
     dbe:	8b 30       	cpi	r24, 0x0B	; 11
     dc0:	91 05       	cpc	r25, r1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <main+0x624>
     dc4:	4a c0       	rjmp	.+148    	; 0xe5a <main+0x6b8>
     dc6:	08 f4       	brcc	.+2      	; 0xdca <main+0x628>
     dc8:	8d c0       	rjmp	.+282    	; 0xee4 <main+0x742>
     dca:	0c 97       	sbiw	r24, 0x0c	; 12
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <main+0x62e>
     dce:	ba c0       	rjmp	.+372    	; 0xf44 <main+0x7a2>
     dd0:	e0 c0       	rjmp	.+448    	; 0xf92 <main+0x7f0>
				case MODE_EDIT_START_TIME_DAWN_HOURS: 
				  if(!twoHZ_status){
     dd2:	80 91 a1 00 	lds	r24, 0x00A1
     dd6:	81 11       	cpse	r24, r1
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <main+0x65e>
					   setCharIndicator(led_menu_dawn_hours/10, 1);
     dda:	80 91 ca 00 	lds	r24, 0x00CA
     dde:	90 91 cb 00 	lds	r25, 0x00CB
     de2:	6a e0       	ldi	r22, 0x0A	; 10
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	77 d1       	rcall	.+750    	; 0x10d6 <__udivmodhi4>
     de8:	86 2f       	mov	r24, r22
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	41 da       	rcall	.-2942   	; 0x270 <setCharIndicator>
					   setCharIndicator(led_menu_dawn_hours%10, 2);
     dee:	80 91 ca 00 	lds	r24, 0x00CA
     df2:	90 91 cb 00 	lds	r25, 0x00CB
     df6:	6a e0       	ldi	r22, 0x0A	; 10
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	6d d1       	rcall	.+730    	; 0x10d6 <__udivmodhi4>
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <main+0x668>
					   }else{
					   setCharIndicator(11, 1);
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	8b e0       	ldi	r24, 0x0B	; 11
     e04:	35 da       	rcall	.-2966   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 2);
     e06:	62 e0       	ldi	r22, 0x02	; 2
     e08:	8b e0       	ldi	r24, 0x0B	; 11
     e0a:	32 da       	rcall	.-2972   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(led_menu_dawn_mins/10, 3);
     e0c:	80 91 c8 00 	lds	r24, 0x00C8
     e10:	90 91 c9 00 	lds	r25, 0x00C9
     e14:	6a e0       	ldi	r22, 0x0A	; 10
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	5e d1       	rcall	.+700    	; 0x10d6 <__udivmodhi4>
     e1a:	86 2f       	mov	r24, r22
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	28 da       	rcall	.-2992   	; 0x270 <setCharIndicator>
				   setCharIndicator(led_menu_dawn_mins%10, 4);				
     e20:	80 91 c8 00 	lds	r24, 0x00C8
     e24:	90 91 c9 00 	lds	r25, 0x00C9
     e28:	88 c0       	rjmp	.+272    	; 0xf3a <main+0x798>
				break;

				case MODE_EDIT_START_TIME_DAWN_MINS: 
				  setCharIndicator(led_menu_dawn_hours/10, 1);
     e2a:	80 91 ca 00 	lds	r24, 0x00CA
     e2e:	90 91 cb 00 	lds	r25, 0x00CB
     e32:	6a e0       	ldi	r22, 0x0A	; 10
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	4f d1       	rcall	.+670    	; 0x10d6 <__udivmodhi4>
     e38:	86 2f       	mov	r24, r22
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	19 da       	rcall	.-3022   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
     e3e:	80 91 ca 00 	lds	r24, 0x00CA
     e42:	90 91 cb 00 	lds	r25, 0x00CB
     e46:	6a e0       	ldi	r22, 0x0A	; 10
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	45 d1       	rcall	.+650    	; 0x10d6 <__udivmodhi4>
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	10 da       	rcall	.-3040   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     e50:	80 91 a1 00 	lds	r24, 0x00A1
     e54:	81 11       	cpse	r24, r1
     e56:	19 c0       	rjmp	.+50     	; 0xe8a <main+0x6e8>
     e58:	d9 cf       	rjmp	.-78     	; 0xe0c <main+0x66a>
				  setCharIndicator(led_menu_sunset_mins%10, 4);				
				break;
			
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
     e5a:	80 91 c4 00 	lds	r24, 0x00C4
     e5e:	90 91 c5 00 	lds	r25, 0x00C5
     e62:	6a e0       	ldi	r22, 0x0A	; 10
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	37 d1       	rcall	.+622    	; 0x10d6 <__udivmodhi4>
     e68:	86 2f       	mov	r24, r22
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	01 da       	rcall	.-3070   	; 0x270 <setCharIndicator>
				  setCharIndicator(led_menu_sunset_hours%10, 2);
     e6e:	80 91 c4 00 	lds	r24, 0x00C4
     e72:	90 91 c5 00 	lds	r25, 0x00C5
     e76:	6a e0       	ldi	r22, 0x0A	; 10
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	2d d1       	rcall	.+602    	; 0x10d6 <__udivmodhi4>
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	f8 d9       	rcall	.-3088   	; 0x270 <setCharIndicator>
				  if(!twoHZ_status){
     e80:	80 91 a1 00 	lds	r24, 0x00A1
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <main+0x6e8>
     e88:	4a c0       	rjmp	.+148    	; 0xf1e <main+0x77c>
				  setCharIndicator(led_menu_dawn_hours%10, 2);
				  if(!twoHZ_status){
					   setCharIndicator(led_menu_dawn_mins/10, 3);
					   setCharIndicator(led_menu_dawn_mins%10, 4);
				  }else{
					   setCharIndicator(11, 3);
     e8a:	63 e0       	ldi	r22, 0x03	; 3
     e8c:	8b e0       	ldi	r24, 0x0B	; 11
     e8e:	f0 d9       	rcall	.-3104   	; 0x270 <setCharIndicator>
					   setCharIndicator(11, 4);
     e90:	64 e0       	ldi	r22, 0x04	; 4
     e92:	8b e0       	ldi	r24, 0x0B	; 11
     e94:	7d c0       	rjmp	.+250    	; 0xf90 <main+0x7ee>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_DAWN: 
				  if(!twoHZ_status){
     e96:	80 91 a1 00 	lds	r24, 0x00A1
     e9a:	81 11       	cpse	r24, r1
     e9c:	1a c0       	rjmp	.+52     	; 0xed2 <main+0x730>
					  setCharIndicator(led_menu_dawn_interval_mins/100, 1);
     e9e:	80 91 c6 00 	lds	r24, 0x00C6
     ea2:	90 91 c7 00 	lds	r25, 0x00C7
     ea6:	b8 01       	movw	r22, r16
     ea8:	16 d1       	rcall	.+556    	; 0x10d6 <__udivmodhi4>
     eaa:	86 2f       	mov	r24, r22
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	e0 d9       	rcall	.-3136   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_dawn_interval_mins%100)/10, 2);
     eb0:	80 91 c6 00 	lds	r24, 0x00C6
     eb4:	90 91 c7 00 	lds	r25, 0x00C7
     eb8:	b8 01       	movw	r22, r16
     eba:	0d d1       	rcall	.+538    	; 0x10d6 <__udivmodhi4>
     ebc:	6a e0       	ldi	r22, 0x0A	; 10
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0a d1       	rcall	.+532    	; 0x10d6 <__udivmodhi4>
     ec2:	86 2f       	mov	r24, r22
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	d4 d9       	rcall	.-3160   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_dawn_interval_mins%100%10, 3);
     ec8:	80 91 c6 00 	lds	r24, 0x00C6
     ecc:	90 91 c7 00 	lds	r25, 0x00C7
     ed0:	56 c0       	rjmp	.+172    	; 0xf7e <main+0x7dc>
					  setCharIndicator(13, 4);
				  }else{
					  setCharIndicator(11, 1);
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
     ed6:	cc d9       	rcall	.-3176   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	8b e0       	ldi	r24, 0x0B	; 11
     edc:	c9 d9       	rcall	.-3182   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 3);
     ede:	63 e0       	ldi	r22, 0x03	; 3
     ee0:	8b e0       	ldi	r24, 0x0B	; 11
     ee2:	53 c0       	rjmp	.+166    	; 0xf8a <main+0x7e8>
				  }

				break;
			
				case MODE_EDIT_START_TIME_SUNSET_HOURS:
				  if(!twoHZ_status){
     ee4:	80 91 a1 00 	lds	r24, 0x00A1
     ee8:	81 11       	cpse	r24, r1
     eea:	13 c0       	rjmp	.+38     	; 0xf12 <main+0x770>
					  setCharIndicator(led_menu_sunset_hours/10, 1);
     eec:	80 91 c4 00 	lds	r24, 0x00C4
     ef0:	90 91 c5 00 	lds	r25, 0x00C5
     ef4:	6a e0       	ldi	r22, 0x0A	; 10
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	ee d0       	rcall	.+476    	; 0x10d6 <__udivmodhi4>
     efa:	86 2f       	mov	r24, r22
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	b8 d9       	rcall	.-3216   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_hours%10, 2);
     f00:	80 91 c4 00 	lds	r24, 0x00C4
     f04:	90 91 c5 00 	lds	r25, 0x00C5
     f08:	6a e0       	ldi	r22, 0x0A	; 10
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	e4 d0       	rcall	.+456    	; 0x10d6 <__udivmodhi4>
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <main+0x77a>
					  }else{
					  setCharIndicator(11, 1);
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	8b e0       	ldi	r24, 0x0B	; 11
     f16:	ac d9       	rcall	.-3240   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 2);
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	8b e0       	ldi	r24, 0x0B	; 11
     f1c:	a9 d9       	rcall	.-3246   	; 0x270 <setCharIndicator>
			
				case MODE_EDIT_START_TIME_SUNSET_MINS: 
				  setCharIndicator(led_menu_sunset_hours/10, 1);
				  setCharIndicator(led_menu_sunset_hours%10, 2);
				  if(!twoHZ_status){
					  setCharIndicator(led_menu_sunset_mins/10, 3);
     f1e:	80 91 c2 00 	lds	r24, 0x00C2
     f22:	90 91 c3 00 	lds	r25, 0x00C3
     f26:	6a e0       	ldi	r22, 0x0A	; 10
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	d5 d0       	rcall	.+426    	; 0x10d6 <__udivmodhi4>
     f2c:	86 2f       	mov	r24, r22
     f2e:	63 e0       	ldi	r22, 0x03	; 3
     f30:	9f d9       	rcall	.-3266   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_mins%10, 4);
     f32:	80 91 c2 00 	lds	r24, 0x00C2
     f36:	90 91 c3 00 	lds	r25, 0x00C3
     f3a:	6a e0       	ldi	r22, 0x0A	; 10
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	cb d0       	rcall	.+406    	; 0x10d6 <__udivmodhi4>
     f40:	64 e0       	ldi	r22, 0x04	; 4
     f42:	26 c0       	rjmp	.+76     	; 0xf90 <main+0x7ee>
				  }
				break;
			
			
				case MODE_EDIT_INTERVAL_SUNSET: 		  
				  if(!twoHZ_status){
     f44:	80 91 a1 00 	lds	r24, 0x00A1
     f48:	81 11       	cpse	r24, r1
     f4a:	c3 cf       	rjmp	.-122    	; 0xed2 <main+0x730>
					  setCharIndicator(led_menu_sunset_interval_mins/100, 1);
     f4c:	80 91 c0 00 	lds	r24, 0x00C0
     f50:	90 91 c1 00 	lds	r25, 0x00C1
     f54:	b8 01       	movw	r22, r16
     f56:	bf d0       	rcall	.+382    	; 0x10d6 <__udivmodhi4>
     f58:	86 2f       	mov	r24, r22
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	89 d9       	rcall	.-3310   	; 0x270 <setCharIndicator>
					  setCharIndicator((led_menu_sunset_interval_mins%100)/10, 2);
     f5e:	80 91 c0 00 	lds	r24, 0x00C0
     f62:	90 91 c1 00 	lds	r25, 0x00C1
     f66:	b8 01       	movw	r22, r16
     f68:	b6 d0       	rcall	.+364    	; 0x10d6 <__udivmodhi4>
     f6a:	6a e0       	ldi	r22, 0x0A	; 10
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	b3 d0       	rcall	.+358    	; 0x10d6 <__udivmodhi4>
     f70:	86 2f       	mov	r24, r22
     f72:	62 e0       	ldi	r22, 0x02	; 2
     f74:	7d d9       	rcall	.-3334   	; 0x270 <setCharIndicator>
					  setCharIndicator(led_menu_sunset_interval_mins%100%10, 3);
     f76:	80 91 c0 00 	lds	r24, 0x00C0
     f7a:	90 91 c1 00 	lds	r25, 0x00C1
     f7e:	b8 01       	movw	r22, r16
     f80:	aa d0       	rcall	.+340    	; 0x10d6 <__udivmodhi4>
     f82:	6a e0       	ldi	r22, 0x0A	; 10
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	a7 d0       	rcall	.+334    	; 0x10d6 <__udivmodhi4>
     f88:	63 e0       	ldi	r22, 0x03	; 3
     f8a:	72 d9       	rcall	.-3356   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
     f8c:	64 e0       	ldi	r22, 0x04	; 4
     f8e:	8d e0       	ldi	r24, 0x0D	; 13
     f90:	6f d9       	rcall	.-3362   	; 0x270 <setCharIndicator>
					  setCharIndicator(13, 4);
				  }				break;
			
			}
		}
		if(now_mode){
     f92:	80 91 bf 00 	lds	r24, 0x00BF
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <main+0x7fa>
     f9a:	5c cc       	rjmp	.-1864   	; 0x854 <main+0xb2>
			//Меню настроки часов
			switch(now_mode){
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <main+0x804>
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	f9 f0       	breq	.+62     	; 0xfe2 <main+0x840>
     fa4:	57 cc       	rjmp	.-1874   	; 0x854 <main+0xb2>
				case MODE_EDIT_HOURS: //часы
				   if(!twoHZ_status){
     fa6:	80 91 a1 00 	lds	r24, 0x00A1
     faa:	81 11       	cpse	r24, r1
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <main+0x82a>
				    setCharIndicator(hour/10, 1);
     fae:	80 91 d8 00 	lds	r24, 0x00D8
     fb2:	3a e0       	ldi	r19, 0x0A	; 10
     fb4:	f3 2e       	mov	r15, r19
     fb6:	6f 2d       	mov	r22, r15
     fb8:	82 d0       	rcall	.+260    	; 0x10be <__udivmodqi4>
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	59 d9       	rcall	.-3406   	; 0x270 <setCharIndicator>
				    setCharIndicator(hour%10, 2);
     fbe:	80 91 d8 00 	lds	r24, 0x00D8
     fc2:	6f 2d       	mov	r22, r15
     fc4:	7c d0       	rcall	.+248    	; 0x10be <__udivmodqi4>
     fc6:	89 2f       	mov	r24, r25
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <main+0x834>
				   }else{
					setCharIndicator(11, 1);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	4f d9       	rcall	.-3426   	; 0x270 <setCharIndicator>
					setCharIndicator(11, 2);				   
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	8b e0       	ldi	r24, 0x0B	; 11
     fd6:	4c d9       	rcall	.-3432   	; 0x270 <setCharIndicator>
				   }
				   setCharIndicator(min/10, 3);
     fd8:	80 91 d9 00 	lds	r24, 0x00D9
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	f2 2e       	mov	r15, r18
     fe0:	15 c0       	rjmp	.+42     	; 0x100c <main+0x86a>
				   setCharIndicator(min%10, 4);
				break;

				case MODE_EDIT_MINUTES: // минуты
				   setCharIndicator(hour/10, 1);
     fe2:	80 91 d8 00 	lds	r24, 0x00D8
     fe6:	9a e0       	ldi	r25, 0x0A	; 10
     fe8:	f9 2e       	mov	r15, r25
     fea:	6f 2d       	mov	r22, r15
     fec:	68 d0       	rcall	.+208    	; 0x10be <__udivmodqi4>
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	3f d9       	rcall	.-3458   	; 0x270 <setCharIndicator>
				   setCharIndicator(hour%10, 2);
     ff2:	80 91 d8 00 	lds	r24, 0x00D8
     ff6:	6f 2d       	mov	r22, r15
     ff8:	62 d0       	rcall	.+196    	; 0x10be <__udivmodqi4>
     ffa:	89 2f       	mov	r24, r25
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	38 d9       	rcall	.-3472   	; 0x270 <setCharIndicator>
				   if(!twoHZ_status){
    1000:	80 91 a1 00 	lds	r24, 0x00A1
    1004:	81 11       	cpse	r24, r1
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <main+0x880>
					  setCharIndicator(min/10, 3);
    1008:	80 91 d9 00 	lds	r24, 0x00D9
    100c:	6f 2d       	mov	r22, r15
    100e:	57 d0       	rcall	.+174    	; 0x10be <__udivmodqi4>
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	2e d9       	rcall	.-3492   	; 0x270 <setCharIndicator>
					  setCharIndicator(min%10, 4);
    1014:	80 91 d9 00 	lds	r24, 0x00D9
    1018:	6f 2d       	mov	r22, r15
    101a:	51 d0       	rcall	.+162    	; 0x10be <__udivmodqi4>
    101c:	89 2f       	mov	r24, r25
    101e:	64 e0       	ldi	r22, 0x04	; 4
    1020:	05 c0       	rjmp	.+10     	; 0x102c <main+0x88a>
				   }else{
					  setCharIndicator(11, 3);
    1022:	63 e0       	ldi	r22, 0x03	; 3
    1024:	8b e0       	ldi	r24, 0x0B	; 11
    1026:	24 d9       	rcall	.-3512   	; 0x270 <setCharIndicator>
					  setCharIndicator(11, 4);
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	8b e0       	ldi	r24, 0x0B	; 11
    102c:	21 d9       	rcall	.-3518   	; 0x270 <setCharIndicator>
    102e:	12 cc       	rjmp	.-2012   	; 0x854 <main+0xb2>

00001030 <RTC_ConvertFromDec>:
﻿#include "RTC.h"

unsigned char RTC_ConvertFromDec(unsigned char c)
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c));
    1030:	98 2f       	mov	r25, r24
    1032:	92 95       	swap	r25
    1034:	9f 70       	andi	r25, 0x0F	; 15
    1036:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	92 9f       	mul	r25, r18
    103c:	80 0d       	add	r24, r0
    103e:	11 24       	eor	r1, r1
    1040:	08 95       	ret

00001042 <RTC_ConvertFromBinDec>:

unsigned char RTC_ConvertFromBinDec(unsigned char c)
{
	unsigned char ch = ((c/10)<<4)|(c%10);
    1042:	6a e0       	ldi	r22, 0x0A	; 10
    1044:	3c d0       	rcall	.+120    	; 0x10be <__udivmodqi4>
    1046:	29 2f       	mov	r18, r25
    1048:	30 e1       	ldi	r19, 0x10	; 16
    104a:	83 9f       	mul	r24, r19
    104c:	c0 01       	movw	r24, r0
    104e:	11 24       	eor	r1, r1
	return ch;
    1050:	82 2b       	or	r24, r18
    1052:	08 95       	ret

00001054 <I2C_Init>:
﻿#include "twi.h"

void I2C_Init (void)
{
	TWBR=0x20;//скорость передачи (при 8 мгц получается 100 кгц, что и необходимо для общения с ds1307)
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	80 b9       	out	0x00, r24	; 0
    1058:	08 95       	ret

0000105a <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    105a:	84 ea       	ldi	r24, 0xA4	; 164
    105c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
    105e:	06 b6       	in	r0, 0x36	; 54
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <I2C_StartCondition+0x4>
}
    1064:	08 95       	ret

00001066 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1066:	84 e9       	ldi	r24, 0x94	; 148
    1068:	86 bf       	out	0x36, r24	; 54
    106a:	08 95       	ret

0000106c <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
    106c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
    1072:	06 b6       	in	r0, 0x36	; 54
    1074:	07 fe       	sbrs	r0, 7
    1076:	fd cf       	rjmp	.-6      	; 0x1072 <I2C_SendByte+0x6>
}
    1078:	08 95       	ret

0000107a <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	18 2f       	mov	r17, r24
	I2C_StartCondition(); // Отправим условие START
    1088:	69 83       	std	Y+1, r22	; 0x01
    108a:	e7 df       	rcall	.-50     	; 0x105a <I2C_StartCondition>
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	ee df       	rcall	.-36     	; 0x106c <I2C_SendByte>
	I2C_SendByte(c);// Отправим байт данных
    1090:	81 2f       	mov	r24, r17
    1092:	ec df       	rcall	.-40     	; 0x106c <I2C_SendByte>
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1094:	84 e9       	ldi	r24, 0x94	; 148
    1096:	86 bf       	out	0x36, r24	; 54
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	08 95       	ret

000010a2 <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    10a2:	84 ec       	ldi	r24, 0xC4	; 196
    10a4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
    10a6:	06 b6       	in	r0, 0x36	; 54
    10a8:	07 fe       	sbrs	r0, 7
    10aa:	fd cf       	rjmp	.-6      	; 0x10a6 <I2C_ReadByte+0x4>
	return TWDR;//читаем регистр данных
    10ac:	83 b1       	in	r24, 0x03	; 3
}
    10ae:	08 95       	ret

000010b0 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    10b0:	84 e8       	ldi	r24, 0x84	; 132
    10b2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
    10b4:	06 b6       	in	r0, 0x36	; 54
    10b6:	07 fe       	sbrs	r0, 7
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <I2C_ReadLastByte+0x4>
	return TWDR;//читаем регистр данных
    10ba:	83 b1       	in	r24, 0x03	; 3
    10bc:	08 95       	ret

000010be <__udivmodqi4>:
    10be:	99 1b       	sub	r25, r25
    10c0:	79 e0       	ldi	r23, 0x09	; 9
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__udivmodqi4_ep>

000010c4 <__udivmodqi4_loop>:
    10c4:	99 1f       	adc	r25, r25
    10c6:	96 17       	cp	r25, r22
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <__udivmodqi4_ep>
    10ca:	96 1b       	sub	r25, r22

000010cc <__udivmodqi4_ep>:
    10cc:	88 1f       	adc	r24, r24
    10ce:	7a 95       	dec	r23
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <__udivmodqi4_loop>
    10d2:	80 95       	com	r24
    10d4:	08 95       	ret

000010d6 <__udivmodhi4>:
    10d6:	aa 1b       	sub	r26, r26
    10d8:	bb 1b       	sub	r27, r27
    10da:	51 e1       	ldi	r21, 0x11	; 17
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <__udivmodhi4_ep>

000010de <__udivmodhi4_loop>:
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	a6 17       	cp	r26, r22
    10e4:	b7 07       	cpc	r27, r23
    10e6:	10 f0       	brcs	.+4      	; 0x10ec <__udivmodhi4_ep>
    10e8:	a6 1b       	sub	r26, r22
    10ea:	b7 0b       	sbc	r27, r23

000010ec <__udivmodhi4_ep>:
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	5a 95       	dec	r21
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__udivmodhi4_loop>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	08 95       	ret

000010fe <__divmodhi4>:
    10fe:	97 fb       	bst	r25, 7
    1100:	07 2e       	mov	r0, r23
    1102:	16 f4       	brtc	.+4      	; 0x1108 <__divmodhi4+0xa>
    1104:	00 94       	com	r0
    1106:	06 d0       	rcall	.+12     	; 0x1114 <__divmodhi4_neg1>
    1108:	77 fd       	sbrc	r23, 7
    110a:	08 d0       	rcall	.+16     	; 0x111c <__divmodhi4_neg2>
    110c:	e4 df       	rcall	.-56     	; 0x10d6 <__udivmodhi4>
    110e:	07 fc       	sbrc	r0, 7
    1110:	05 d0       	rcall	.+10     	; 0x111c <__divmodhi4_neg2>
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__divmodhi4_exit>

00001114 <__divmodhi4_neg1>:
    1114:	90 95       	com	r25
    1116:	81 95       	neg	r24
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

0000111c <__divmodhi4_neg2>:
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255

00001122 <__divmodhi4_exit>:
    1122:	08 95       	ret

00001124 <__divmodsi4>:
    1124:	05 2e       	mov	r0, r21
    1126:	97 fb       	bst	r25, 7
    1128:	16 f4       	brtc	.+4      	; 0x112e <__divmodsi4+0xa>
    112a:	00 94       	com	r0
    112c:	0f d0       	rcall	.+30     	; 0x114c <__negsi2>
    112e:	57 fd       	sbrc	r21, 7
    1130:	05 d0       	rcall	.+10     	; 0x113c <__divmodsi4_neg2>
    1132:	30 d0       	rcall	.+96     	; 0x1194 <__udivmodsi4>
    1134:	07 fc       	sbrc	r0, 7
    1136:	02 d0       	rcall	.+4      	; 0x113c <__divmodsi4_neg2>
    1138:	46 f4       	brtc	.+16     	; 0x114a <__divmodsi4_exit>
    113a:	08 c0       	rjmp	.+16     	; 0x114c <__negsi2>

0000113c <__divmodsi4_neg2>:
    113c:	50 95       	com	r21
    113e:	40 95       	com	r20
    1140:	30 95       	com	r19
    1142:	21 95       	neg	r18
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	4f 4f       	sbci	r20, 0xFF	; 255
    1148:	5f 4f       	sbci	r21, 0xFF	; 255

0000114a <__divmodsi4_exit>:
    114a:	08 95       	ret

0000114c <__negsi2>:
    114c:	90 95       	com	r25
    114e:	80 95       	com	r24
    1150:	70 95       	com	r23
    1152:	61 95       	neg	r22
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	08 95       	ret

0000115c <__umulhisi3>:
    115c:	a2 9f       	mul	r26, r18
    115e:	b0 01       	movw	r22, r0
    1160:	b3 9f       	mul	r27, r19
    1162:	c0 01       	movw	r24, r0
    1164:	a3 9f       	mul	r26, r19
    1166:	01 d0       	rcall	.+2      	; 0x116a <__umulhisi3+0xe>
    1168:	b2 9f       	mul	r27, r18
    116a:	70 0d       	add	r23, r0
    116c:	81 1d       	adc	r24, r1
    116e:	11 24       	eor	r1, r1
    1170:	91 1d       	adc	r25, r1
    1172:	08 95       	ret

00001174 <__muluhisi3>:
    1174:	f3 df       	rcall	.-26     	; 0x115c <__umulhisi3>
    1176:	a5 9f       	mul	r26, r21
    1178:	90 0d       	add	r25, r0
    117a:	b4 9f       	mul	r27, r20
    117c:	90 0d       	add	r25, r0
    117e:	a4 9f       	mul	r26, r20
    1180:	80 0d       	add	r24, r0
    1182:	91 1d       	adc	r25, r1
    1184:	11 24       	eor	r1, r1
    1186:	08 95       	ret

00001188 <__mulshisi3>:
    1188:	b7 ff       	sbrs	r27, 7
    118a:	f4 cf       	rjmp	.-24     	; 0x1174 <__muluhisi3>

0000118c <__mulohisi3>:
    118c:	f3 df       	rcall	.-26     	; 0x1174 <__muluhisi3>
    118e:	82 1b       	sub	r24, r18
    1190:	93 0b       	sbc	r25, r19
    1192:	08 95       	ret

00001194 <__udivmodsi4>:
    1194:	a1 e2       	ldi	r26, 0x21	; 33
    1196:	1a 2e       	mov	r1, r26
    1198:	aa 1b       	sub	r26, r26
    119a:	bb 1b       	sub	r27, r27
    119c:	fd 01       	movw	r30, r26
    119e:	0d c0       	rjmp	.+26     	; 0x11ba <__udivmodsi4_ep>

000011a0 <__udivmodsi4_loop>:
    11a0:	aa 1f       	adc	r26, r26
    11a2:	bb 1f       	adc	r27, r27
    11a4:	ee 1f       	adc	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	a2 17       	cp	r26, r18
    11aa:	b3 07       	cpc	r27, r19
    11ac:	e4 07       	cpc	r30, r20
    11ae:	f5 07       	cpc	r31, r21
    11b0:	20 f0       	brcs	.+8      	; 0x11ba <__udivmodsi4_ep>
    11b2:	a2 1b       	sub	r26, r18
    11b4:	b3 0b       	sbc	r27, r19
    11b6:	e4 0b       	sbc	r30, r20
    11b8:	f5 0b       	sbc	r31, r21

000011ba <__udivmodsi4_ep>:
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	1a 94       	dec	r1
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <__udivmodsi4_loop>
    11c6:	60 95       	com	r22
    11c8:	70 95       	com	r23
    11ca:	80 95       	com	r24
    11cc:	90 95       	com	r25
    11ce:	9b 01       	movw	r18, r22
    11d0:	ac 01       	movw	r20, r24
    11d2:	bd 01       	movw	r22, r26
    11d4:	cf 01       	movw	r24, r30
    11d6:	08 95       	ret

000011d8 <__eerd_word_m8a>:
    11d8:	a8 e1       	ldi	r26, 0x18	; 24
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	42 e0       	ldi	r20, 0x02	; 2
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <__eerd_blraw_m8a>

000011e2 <__eewr_word_m8a>:
    11e2:	12 d0       	rcall	.+36     	; 0x1208 <__eewr_byte_m8a>
    11e4:	27 2f       	mov	r18, r23
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <__eewr_r18_m8a>

000011e8 <__eerd_block_m8a>:
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22

000011ec <__eerd_blraw_m8a>:
    11ec:	fc 01       	movw	r30, r24
    11ee:	e1 99       	sbic	0x1c, 1	; 28
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <__eerd_blraw_m8a+0x2>
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <__eerd_blraw_m8a+0x14>
    11f4:	ff bb       	out	0x1f, r31	; 31
    11f6:	ee bb       	out	0x1e, r30	; 30
    11f8:	e0 9a       	sbi	0x1c, 0	; 28
    11fa:	31 96       	adiw	r30, 0x01	; 1
    11fc:	0d b2       	in	r0, 0x1d	; 29
    11fe:	0d 92       	st	X+, r0
    1200:	41 50       	subi	r20, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	b8 f7       	brcc	.-18     	; 0x11f4 <__eerd_blraw_m8a+0x8>
    1206:	08 95       	ret

00001208 <__eewr_byte_m8a>:
    1208:	26 2f       	mov	r18, r22

0000120a <__eewr_r18_m8a>:
    120a:	e1 99       	sbic	0x1c, 1	; 28
    120c:	fe cf       	rjmp	.-4      	; 0x120a <__eewr_r18_m8a>
    120e:	9f bb       	out	0x1f, r25	; 31
    1210:	8e bb       	out	0x1e, r24	; 30
    1212:	2d bb       	out	0x1d, r18	; 29
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	e2 9a       	sbi	0x1c, 2	; 28
    121a:	e1 9a       	sbi	0x1c, 1	; 28
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
